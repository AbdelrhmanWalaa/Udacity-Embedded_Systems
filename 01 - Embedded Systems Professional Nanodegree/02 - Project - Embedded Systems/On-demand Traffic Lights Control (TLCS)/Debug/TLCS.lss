
TLCS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000022cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000022cc  00002360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000025  00800062  00800062  00002362  2**0
                  ALLOC
  3 .stab         00002b38  00000000  00000000  00002364  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e96  00000000  00000000  00004e9c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 b7 09 	jmp	0x136e	; 0x136e <__vector_1>
       8:	0c 94 ea 09 	jmp	0x13d4	; 0x13d4 <__vector_2>
       c:	0c 94 1d 0a 	jmp	0x143a	; 0x143a <__vector_3>
      10:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__vector_4>
      14:	0c 94 3e 06 	jmp	0xc7c	; 0xc7c <__vector_5>
      18:	0c 94 88 06 	jmp	0xd10	; 0xd10 <__vector_6>
      1c:	0c 94 98 06 	jmp	0xd30	; 0xd30 <__vector_7>
      20:	0c 94 e5 06 	jmp	0xdca	; 0xdca <__vector_8>
      24:	0c 94 32 07 	jmp	0xe64	; 0xe64 <__vector_9>
      28:	0c 94 7d 07 	jmp	0xefa	; 0xefa <__vector_10>
      2c:	0c 94 c5 07 	jmp	0xf8a	; 0xf8a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ec       	ldi	r30, 0xCC	; 204
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 36       	cpi	r26, 0x62	; 98
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e6       	ldi	r26, 0x62	; 98
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 38       	cpi	r26, 0x87	; 135
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 45 11 	call	0x228a	; 0x228a <main>
      8a:	0c 94 64 11 	jmp	0x22c8	; 0x22c8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TMR_vdTMR0Initialization>:
 Input: void
 Output: void
 Description: Function to Initialize TMR0 peripheral.
*/
vd TMR_vdTMR0Initialization  ( void )
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
	/* Step 1: Select Waveform Generation Mode */
	switch ( TMR_U8_TMR_0_MODE_SELECT )
	{
		/* Case 1: Waveform Generation Mode = Normal Mode */
		case TMR_U8_TMR_0_NORMAL_MODE			: CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_WGM00_BIT ); CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_WGM01_BIT ); break;
      9a:	a3 e5       	ldi	r26, 0x53	; 83
      9c:	b0 e0       	ldi	r27, 0x00	; 0
      9e:	e3 e5       	ldi	r30, 0x53	; 83
      a0:	f0 e0       	ldi	r31, 0x00	; 0
      a2:	80 81       	ld	r24, Z
      a4:	8f 7b       	andi	r24, 0xBF	; 191
      a6:	8c 93       	st	X, r24
      a8:	a3 e5       	ldi	r26, 0x53	; 83
      aa:	b0 e0       	ldi	r27, 0x00	; 0
      ac:	e3 e5       	ldi	r30, 0x53	; 83
      ae:	f0 e0       	ldi	r31, 0x00	; 0
      b0:	80 81       	ld	r24, Z
      b2:	87 7f       	andi	r24, 0xF7	; 247
      b4:	8c 93       	st	X, r24

	/* Step 2: Select Compare Match Output Mode */
	switch ( TMR_U8_TMR_0_COMP_OUTPUT_MODE )
	{
		/* Case 1: Waveform Generation Mode = Normal Mode */
		case TMR_U8_TMR_0_DISCONNECT_OC0_PIN: CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_COM00_BIT ); CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_COM01_BIT ); break;
      b6:	a3 e5       	ldi	r26, 0x53	; 83
      b8:	b0 e0       	ldi	r27, 0x00	; 0
      ba:	e3 e5       	ldi	r30, 0x53	; 83
      bc:	f0 e0       	ldi	r31, 0x00	; 0
      be:	80 81       	ld	r24, Z
      c0:	8f 7e       	andi	r24, 0xEF	; 239
      c2:	8c 93       	st	X, r24
      c4:	a3 e5       	ldi	r26, 0x53	; 83
      c6:	b0 e0       	ldi	r27, 0x00	; 0
      c8:	e3 e5       	ldi	r30, 0x53	; 83
      ca:	f0 e0       	ldi	r31, 0x00	; 0
      cc:	80 81       	ld	r24, Z
      ce:	8f 7d       	andi	r24, 0xDF	; 223
      d0:	8c 93       	st	X, r24
		/* Case 1: Interrupt Source = No Interrupt ( i.e.: Interrupts are disabled, as in PWM two modes ) */
		case TMR_U8_TMR_0_NO_INTERRUPT  : CLR_BIT( TMR_U8_TIMSK_REG, TMR_U8_OCIE0_BIT ); CLR_BIT( TMR_U8_TIMSK_REG, TMR_U8_TOIE0_BIT );	break;
		/* Case 2: Interrupt Source = Compare Interrupt */
		case TMR_U8_TMR_0_COMP_INTERRUPT: SET_BIT( TMR_U8_TIMSK_REG, TMR_U8_OCIE0_BIT ); break;
		/* Case 3: Interrupt Source = Overflow Interrupt */
		case TMR_U8_TMR_0_OVF_INTERRUPT : SET_BIT( TMR_U8_TIMSK_REG, TMR_U8_TOIE0_BIT ); break;
      d2:	a9 e5       	ldi	r26, 0x59	; 89
      d4:	b0 e0       	ldi	r27, 0x00	; 0
      d6:	e9 e5       	ldi	r30, 0x59	; 89
      d8:	f0 e0       	ldi	r31, 0x00	; 0
      da:	80 81       	ld	r24, Z
      dc:	81 60       	ori	r24, 0x01	; 1
      de:	8c 93       	st	X, r24
	}

	/* Step 4: Set Compare Value and Preload Value */
	/* Compare Value */
	TMR_U8_OCR0_REG = TMR_U8_TMR_0_COMPARE_VALUE;
      e0:	ec e5       	ldi	r30, 0x5C	; 92
      e2:	f0 e0       	ldi	r31, 0x00	; 0
      e4:	10 82       	st	Z, r1
	/* Preload value */
	TMR_U8_TCNT0_REG = TMR_U8_TMR_0_PRELOAD_VALUE;
      e6:	e2 e5       	ldi	r30, 0x52	; 82
      e8:	f0 e0       	ldi	r31, 0x00	; 0
      ea:	80 ec       	ldi	r24, 0xC0	; 192
      ec:	80 83       	st	Z, r24
														   CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS02_BIT ); break;
	    /* Case 2: Clock Source =  No Prescaler */
		case TMR_U8_TMR_0_NO_PRESCALER					 : SET_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS00_BIT ); CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS01_BIT );
														   CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS02_BIT ); break;
		/* Case 3: Clock Source = 8 Prescaler */
		case TMR_U8_TMR_0_8_PRESCALER					 : CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS00_BIT ); SET_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS01_BIT );
      ee:	a3 e5       	ldi	r26, 0x53	; 83
      f0:	b0 e0       	ldi	r27, 0x00	; 0
      f2:	e3 e5       	ldi	r30, 0x53	; 83
      f4:	f0 e0       	ldi	r31, 0x00	; 0
      f6:	80 81       	ld	r24, Z
      f8:	8e 7f       	andi	r24, 0xFE	; 254
      fa:	8c 93       	st	X, r24
      fc:	a3 e5       	ldi	r26, 0x53	; 83
      fe:	b0 e0       	ldi	r27, 0x00	; 0
     100:	e3 e5       	ldi	r30, 0x53	; 83
     102:	f0 e0       	ldi	r31, 0x00	; 0
     104:	80 81       	ld	r24, Z
     106:	82 60       	ori	r24, 0x02	; 2
     108:	8c 93       	st	X, r24
														   CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS02_BIT ); break;
     10a:	a3 e5       	ldi	r26, 0x53	; 83
     10c:	b0 e0       	ldi	r27, 0x00	; 0
     10e:	e3 e5       	ldi	r30, 0x53	; 83
     110:	f0 e0       	ldi	r31, 0x00	; 0
     112:	80 81       	ld	r24, Z
     114:	8b 7f       	andi	r24, 0xFB	; 251
     116:	8c 93       	st	X, r24
														   SET_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS02_BIT ); break;
		/* Case 8: Clock Source = External Clock Source with Rising Edge, on Pin TO */
		case TMR_U8_TMR_0_EXTERNAL_CLOCK_SOURCE_RISE_EDGE: SET_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS00_BIT ); SET_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS01_BIT );
														   SET_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS02_BIT ); break;
	}
}
     118:	cf 91       	pop	r28
     11a:	df 91       	pop	r29
     11c:	08 95       	ret

0000011e <TMR_vdTMR1Initialization>:
 Input: void
 Output: void
 Description: Function to Initialize TMR1 peripheral.
*/
vd TMR_vdTMR1Initialization  ( void )
{
     11e:	df 93       	push	r29
     120:	cf 93       	push	r28
     122:	cd b7       	in	r28, 0x3d	; 61
     124:	de b7       	in	r29, 0x3e	; 62
	/* Step 1: Select Waveform Generation Mode */
	switch ( TMR_U8_TMR_1_MODE_SELECT )
	{
		/* Case 1: Waveform Generation Mode = Normal Mode */
		case TMR_U8_TMR_1_NORMAL_MODE                      : CLR_BIT( TMR_U8_TCCR1A_REG, TMR_U8_WGM10_BIT ); CLR_BIT( TMR_U8_TCCR1A_REG, TMR_U8_WGM11_BIT );
     126:	af e4       	ldi	r26, 0x4F	; 79
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	ef e4       	ldi	r30, 0x4F	; 79
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	80 81       	ld	r24, Z
     130:	8e 7f       	andi	r24, 0xFE	; 254
     132:	8c 93       	st	X, r24
     134:	af e4       	ldi	r26, 0x4F	; 79
     136:	b0 e0       	ldi	r27, 0x00	; 0
     138:	ef e4       	ldi	r30, 0x4F	; 79
     13a:	f0 e0       	ldi	r31, 0x00	; 0
     13c:	80 81       	ld	r24, Z
     13e:	8d 7f       	andi	r24, 0xFD	; 253
     140:	8c 93       	st	X, r24
															 CLR_BIT( TMR_U8_TCCR1B_REG, TMR_U8_WGM12_BIT ); CLR_BIT( TMR_U8_TCCR1B_REG, TMR_U8_WGM13_BIT );
     142:	ae e4       	ldi	r26, 0x4E	; 78
     144:	b0 e0       	ldi	r27, 0x00	; 0
     146:	ee e4       	ldi	r30, 0x4E	; 78
     148:	f0 e0       	ldi	r31, 0x00	; 0
     14a:	80 81       	ld	r24, Z
     14c:	87 7f       	andi	r24, 0xF7	; 247
     14e:	8c 93       	st	X, r24
     150:	ae e4       	ldi	r26, 0x4E	; 78
     152:	b0 e0       	ldi	r27, 0x00	; 0
     154:	ee e4       	ldi	r30, 0x4E	; 78
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	80 81       	ld	r24, Z
     15a:	8f 7e       	andi	r24, 0xEF	; 239
     15c:	8c 93       	st	X, r24
	/* Step 2: Select Compare Match Output Mode */
	/* Channel A */
	switch ( TMR_U8_TMR_1_COMP_OUTPUT_MODE_A )
	{
		/* Case 1: Normal port operation, OC1A disconnected */
		case TMR_U8_TMR_1_DISCONNECT_OC1A_PIN: CLR_BIT( TMR_U8_TCCR1A_REG, TMR_U8_COM1A0_BIT ); CLR_BIT( TMR_U8_TCCR1A_REG, TMR_U8_COM1A1_BIT ); break;
     15e:	af e4       	ldi	r26, 0x4F	; 79
     160:	b0 e0       	ldi	r27, 0x00	; 0
     162:	ef e4       	ldi	r30, 0x4F	; 79
     164:	f0 e0       	ldi	r31, 0x00	; 0
     166:	80 81       	ld	r24, Z
     168:	8f 7b       	andi	r24, 0xBF	; 191
     16a:	8c 93       	st	X, r24
     16c:	af e4       	ldi	r26, 0x4F	; 79
     16e:	b0 e0       	ldi	r27, 0x00	; 0
     170:	ef e4       	ldi	r30, 0x4F	; 79
     172:	f0 e0       	ldi	r31, 0x00	; 0
     174:	80 81       	ld	r24, Z
     176:	8f 77       	andi	r24, 0x7F	; 127
     178:	8c 93       	st	X, r24

	/* Channel B */
	switch ( TMR_U8_TMR_1_COMP_OUTPUT_MODE_B )
	{
		/* Case 1: Normal port operation, OC1B disconnected */
		case TMR_U8_TMR_1_DISCONNECT_OC1B_PIN: CLR_BIT( TMR_U8_TCCR1A_REG, TMR_U8_COM1B0_BIT ); CLR_BIT( TMR_U8_TCCR1A_REG, TMR_U8_COM1B1_BIT ); break;
     17a:	af e4       	ldi	r26, 0x4F	; 79
     17c:	b0 e0       	ldi	r27, 0x00	; 0
     17e:	ef e4       	ldi	r30, 0x4F	; 79
     180:	f0 e0       	ldi	r31, 0x00	; 0
     182:	80 81       	ld	r24, Z
     184:	8f 7e       	andi	r24, 0xEF	; 239
     186:	8c 93       	st	X, r24
     188:	af e4       	ldi	r26, 0x4F	; 79
     18a:	b0 e0       	ldi	r27, 0x00	; 0
     18c:	ef e4       	ldi	r30, 0x4F	; 79
     18e:	f0 e0       	ldi	r31, 0x00	; 0
     190:	80 81       	ld	r24, Z
     192:	8f 7d       	andi	r24, 0xDF	; 223
     194:	8c 93       	st	X, r24

	/* Step 3: Select Interrupt Source */
	switch ( TMR_U8_TMR_1_INTERRUPT_SELECT )
	{
		/* Case 1: Interrupt Source = No Interrupt ( i.e.: Interrupts are disabled, as in PWM modes ) */
		case TMR_U8_TMR_1_NO_INTERRUPT    : CLR_BIT( TMR_U8_TIMSK_REG, TMR_U8_TICIE1_BIT );	CLR_BIT( TMR_U8_TIMSK_REG, TMR_U8_OCIE1A_BIT );
     196:	a9 e5       	ldi	r26, 0x59	; 89
     198:	b0 e0       	ldi	r27, 0x00	; 0
     19a:	e9 e5       	ldi	r30, 0x59	; 89
     19c:	f0 e0       	ldi	r31, 0x00	; 0
     19e:	80 81       	ld	r24, Z
     1a0:	8f 7d       	andi	r24, 0xDF	; 223
     1a2:	8c 93       	st	X, r24
     1a4:	a9 e5       	ldi	r26, 0x59	; 89
     1a6:	b0 e0       	ldi	r27, 0x00	; 0
     1a8:	e9 e5       	ldi	r30, 0x59	; 89
     1aa:	f0 e0       	ldi	r31, 0x00	; 0
     1ac:	80 81       	ld	r24, Z
     1ae:	8f 7e       	andi	r24, 0xEF	; 239
     1b0:	8c 93       	st	X, r24
											CLR_BIT( TMR_U8_TIMSK_REG, TMR_U8_OCIE1B_BIT );	CLR_BIT( TMR_U8_TIMSK_REG, TMR_U8_TOIE1_BIT  ); break;
     1b2:	a9 e5       	ldi	r26, 0x59	; 89
     1b4:	b0 e0       	ldi	r27, 0x00	; 0
     1b6:	e9 e5       	ldi	r30, 0x59	; 89
     1b8:	f0 e0       	ldi	r31, 0x00	; 0
     1ba:	80 81       	ld	r24, Z
     1bc:	87 7f       	andi	r24, 0xF7	; 247
     1be:	8c 93       	st	X, r24
     1c0:	a9 e5       	ldi	r26, 0x59	; 89
     1c2:	b0 e0       	ldi	r27, 0x00	; 0
     1c4:	e9 e5       	ldi	r30, 0x59	; 89
     1c6:	f0 e0       	ldi	r31, 0x00	; 0
     1c8:	80 81       	ld	r24, Z
     1ca:	8b 7f       	andi	r24, 0xFB	; 251
     1cc:	8c 93       	st	X, r24
		case TMR_U8_TMR_1_OVF_INTERRUPT	  :	SET_BIT( TMR_U8_TIMSK_REG, TMR_U8_TOIE1_BIT  ); break;
	}

	/* Step 4: Set Compare Values in both Channels, Input Capture Value, and Preload Value  */
	/* Compare Value A */
	TMR_U16_OCR1A_REG = TMR_U16_TMR_1_COMPARE_VALUE_A;
     1ce:	ea e4       	ldi	r30, 0x4A	; 74
     1d0:	f0 e0       	ldi	r31, 0x00	; 0
     1d2:	11 82       	std	Z+1, r1	; 0x01
     1d4:	10 82       	st	Z, r1
	/* Compare Value B */
	TMR_U16_OCR1B_REG = TMR_U16_TMR_1_COMPARE_VALUE_B;
     1d6:	e8 e4       	ldi	r30, 0x48	; 72
     1d8:	f0 e0       	ldi	r31, 0x00	; 0
     1da:	11 82       	std	Z+1, r1	; 0x01
     1dc:	10 82       	st	Z, r1
	/* Input Capture Value */
	TMR_U16_ICR1_REG  = TMR_U16_TMR_1_INPUT_CAPTURE_VALUE;
     1de:	e6 e4       	ldi	r30, 0x46	; 70
     1e0:	f0 e0       	ldi	r31, 0x00	; 0
     1e2:	11 82       	std	Z+1, r1	; 0x01
     1e4:	10 82       	st	Z, r1
	/* Preload value */
	TMR_U16_TCNT1_REG = TMR_U16_TMR_1_PRELOAD_VALUE;
     1e6:	ec e4       	ldi	r30, 0x4C	; 76
     1e8:	f0 e0       	ldi	r31, 0x00	; 0
     1ea:	11 82       	std	Z+1, r1	; 0x01
     1ec:	10 82       	st	Z, r1

	/* Step 5: Select Clock Source ( i.e.: Start Counting ) */
	switch ( TMR_U8_TMR_1_CLOCK_SELECT )
	{
		/* Case 1: Clock Source = No Clock Source (Timer/Counter1 stopped) */
		case TMR_U8_TMR_1_NO_CLOCK_SOURCE				 : CLR_BIT( TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT ); CLR_BIT( TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT );
     1ee:	ae e4       	ldi	r26, 0x4E	; 78
     1f0:	b0 e0       	ldi	r27, 0x00	; 0
     1f2:	ee e4       	ldi	r30, 0x4E	; 78
     1f4:	f0 e0       	ldi	r31, 0x00	; 0
     1f6:	80 81       	ld	r24, Z
     1f8:	8e 7f       	andi	r24, 0xFE	; 254
     1fa:	8c 93       	st	X, r24
     1fc:	ae e4       	ldi	r26, 0x4E	; 78
     1fe:	b0 e0       	ldi	r27, 0x00	; 0
     200:	ee e4       	ldi	r30, 0x4E	; 78
     202:	f0 e0       	ldi	r31, 0x00	; 0
     204:	80 81       	ld	r24, Z
     206:	8d 7f       	andi	r24, 0xFD	; 253
     208:	8c 93       	st	X, r24
														   CLR_BIT( TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT ); break;
     20a:	ae e4       	ldi	r26, 0x4E	; 78
     20c:	b0 e0       	ldi	r27, 0x00	; 0
     20e:	ee e4       	ldi	r30, 0x4E	; 78
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	80 81       	ld	r24, Z
     214:	8b 7f       	andi	r24, 0xFB	; 251
     216:	8c 93       	st	X, r24
														   SET_BIT( TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT ); break;
		/* Case 8: Clock Source = External Clock Source with Rising Edge, on Pin T1 */
		case TMR_U8_TMR_1_EXTERNAL_CLOCK_SOURCE_RISE_EDGE: SET_BIT( TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT ); SET_BIT( TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT );
														   SET_BIT( TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT ); break;
	}
}
     218:	cf 91       	pop	r28
     21a:	df 91       	pop	r29
     21c:	08 95       	ret

0000021e <TMR_vdTMR2Initialization>:
 Input: void
 Output: void
 Description: Function to Initialize TMR2 peripheral.
*/
vd TMR_vdTMR2Initialization  ( void )
{
     21e:	df 93       	push	r29
     220:	cf 93       	push	r28
     222:	cd b7       	in	r28, 0x3d	; 61
     224:	de b7       	in	r29, 0x3e	; 62
	/* Step 1: Select Waveform Generation Mode */
	switch ( TMR_U8_TMR_2_MODE_SELECT )
	{
		/* Case 1: Waveform Generation Mode = Normal Mode */
		case TMR_U8_TMR_2_NORMAL_MODE			: CLR_BIT( TMR_U8_TCCR2_REG, TMR_U8_WGM20_BIT ); CLR_BIT( TMR_U8_TCCR2_REG, TMR_U8_WGM21_BIT ); break;
     226:	a5 e4       	ldi	r26, 0x45	; 69
     228:	b0 e0       	ldi	r27, 0x00	; 0
     22a:	e5 e4       	ldi	r30, 0x45	; 69
     22c:	f0 e0       	ldi	r31, 0x00	; 0
     22e:	80 81       	ld	r24, Z
     230:	8f 7b       	andi	r24, 0xBF	; 191
     232:	8c 93       	st	X, r24
     234:	a5 e4       	ldi	r26, 0x45	; 69
     236:	b0 e0       	ldi	r27, 0x00	; 0
     238:	e5 e4       	ldi	r30, 0x45	; 69
     23a:	f0 e0       	ldi	r31, 0x00	; 0
     23c:	80 81       	ld	r24, Z
     23e:	87 7f       	andi	r24, 0xF7	; 247
     240:	8c 93       	st	X, r24

	/* Step 2: Select Compare Match Output Mode */
	switch ( TMR_U8_TMR_2_COMP_OUTPUT_MODE )
	{
		/* Case 1: Normal port operation, OC2 disconnected */
		case TMR_U8_TMR_2_DISCONNECT_OC2_PIN: CLR_BIT( TMR_U8_TCCR2_REG, TMR_U8_COM20_BIT ); CLR_BIT( TMR_U8_TCCR2_REG, TMR_U8_COM21_BIT ); break;
     242:	a5 e4       	ldi	r26, 0x45	; 69
     244:	b0 e0       	ldi	r27, 0x00	; 0
     246:	e5 e4       	ldi	r30, 0x45	; 69
     248:	f0 e0       	ldi	r31, 0x00	; 0
     24a:	80 81       	ld	r24, Z
     24c:	8f 7e       	andi	r24, 0xEF	; 239
     24e:	8c 93       	st	X, r24
     250:	a5 e4       	ldi	r26, 0x45	; 69
     252:	b0 e0       	ldi	r27, 0x00	; 0
     254:	e5 e4       	ldi	r30, 0x45	; 69
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	80 81       	ld	r24, Z
     25a:	8f 7d       	andi	r24, 0xDF	; 223
     25c:	8c 93       	st	X, r24

	/* Step 3: Select Interrupt Source */
	switch ( TMR_U8_TMR_2_INTERRUPT_SELECT )
	{
		/* Case 1: Interrupt Source = No Interrupt ( i.e.: Interrupts are disabled, as in PWM two modes ) */
		case TMR_U8_TMR_2_NO_INTERRUPT  : CLR_BIT( TMR_U8_TIMSK_REG, TMR_U8_OCIE2_BIT ); CLR_BIT( TMR_U8_TIMSK_REG, TMR_U8_TOIE2_BIT ); break;
     25e:	a9 e5       	ldi	r26, 0x59	; 89
     260:	b0 e0       	ldi	r27, 0x00	; 0
     262:	e9 e5       	ldi	r30, 0x59	; 89
     264:	f0 e0       	ldi	r31, 0x00	; 0
     266:	80 81       	ld	r24, Z
     268:	8f 77       	andi	r24, 0x7F	; 127
     26a:	8c 93       	st	X, r24
     26c:	a9 e5       	ldi	r26, 0x59	; 89
     26e:	b0 e0       	ldi	r27, 0x00	; 0
     270:	e9 e5       	ldi	r30, 0x59	; 89
     272:	f0 e0       	ldi	r31, 0x00	; 0
     274:	80 81       	ld	r24, Z
     276:	8f 7b       	andi	r24, 0xBF	; 191
     278:	8c 93       	st	X, r24
		case TMR_U8_TMR_2_OVF_INTERRUPT : SET_BIT( TMR_U8_TIMSK_REG, TMR_U8_TOIE2_BIT ); break;
	}
	
	/* Step 4: Set Compare Value and Preload Value */
	/* Compare Value */
	TMR_U8_OCR2_REG = TMR_U8_TMR_2_COMPARE_VALUE;
     27a:	e3 e4       	ldi	r30, 0x43	; 67
     27c:	f0 e0       	ldi	r31, 0x00	; 0
     27e:	10 82       	st	Z, r1
	/* Set Preload value */
	TMR_U8_TCNT2_REG = TMR_U8_TMR_2_PRELOAD_VALUE;
     280:	e4 e4       	ldi	r30, 0x44	; 68
     282:	f0 e0       	ldi	r31, 0x00	; 0
     284:	10 82       	st	Z, r1

	/* Step 5: Select Clock Source ( i.e.: Start Counting ) */
	switch ( TMR_U8_TMR_2_CLOCK_SELECT )
	{
		/* Case 1: Clock Source = No Clock Source (Timer/Counter2 stopped) */
		case TMR_U8_TMR_2_NO_CLOCK_SOURCE: CLR_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS20_BIT ); CLR_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS21_BIT );
     286:	a5 e4       	ldi	r26, 0x45	; 69
     288:	b0 e0       	ldi	r27, 0x00	; 0
     28a:	e5 e4       	ldi	r30, 0x45	; 69
     28c:	f0 e0       	ldi	r31, 0x00	; 0
     28e:	80 81       	ld	r24, Z
     290:	8e 7f       	andi	r24, 0xFE	; 254
     292:	8c 93       	st	X, r24
     294:	a5 e4       	ldi	r26, 0x45	; 69
     296:	b0 e0       	ldi	r27, 0x00	; 0
     298:	e5 e4       	ldi	r30, 0x45	; 69
     29a:	f0 e0       	ldi	r31, 0x00	; 0
     29c:	80 81       	ld	r24, Z
     29e:	8d 7f       	andi	r24, 0xFD	; 253
     2a0:	8c 93       	st	X, r24
										   CLR_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS22_BIT ); break;
     2a2:	a5 e4       	ldi	r26, 0x45	; 69
     2a4:	b0 e0       	ldi	r27, 0x00	; 0
     2a6:	e5 e4       	ldi	r30, 0x45	; 69
     2a8:	f0 e0       	ldi	r31, 0x00	; 0
     2aa:	80 81       	ld	r24, Z
     2ac:	8b 7f       	andi	r24, 0xFB	; 251
     2ae:	8c 93       	st	X, r24
										   SET_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS22_BIT ); break;
		/* Case 8: Clock Source = 1024 Prescaler */
		case TMR_U8_TMR_2_1024_PRESCALER : SET_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS20_BIT ); SET_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS21_BIT );
										   SET_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS22_BIT ); break;
	}
}
     2b0:	cf 91       	pop	r28
     2b2:	df 91       	pop	r29
     2b4:	08 95       	ret

000002b6 <TMR_u8EnableTMR>:
 Input: u8 TimerId
 Output: u8 Error or No Error
 Description: Function to Enable TMR peripheral.
*/
u8 TMR_u8EnableTMR		     ( u8 Cpy_u8TimerId )
{
     2b6:	df 93       	push	r29
     2b8:	cf 93       	push	r28
     2ba:	00 d0       	rcall	.+0      	; 0x2bc <TMR_u8EnableTMR+0x6>
     2bc:	00 d0       	rcall	.+0      	; 0x2be <TMR_u8EnableTMR+0x8>
     2be:	cd b7       	in	r28, 0x3d	; 61
     2c0:	de b7       	in	r29, 0x3e	; 62
     2c2:	8a 83       	std	Y+2, r24	; 0x02
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
     2c4:	81 e0       	ldi	r24, 0x01	; 1
     2c6:	89 83       	std	Y+1, r24	; 0x01

	/* Check 1: TimertId is in the valid range */
	if ( Cpy_u8TimerId <= TMR_U8_TMR2 )
     2c8:	8a 81       	ldd	r24, Y+2	; 0x02
     2ca:	83 30       	cpi	r24, 0x03	; 3
     2cc:	08 f0       	brcs	.+2      	; 0x2d0 <TMR_u8EnableTMR+0x1a>
     2ce:	48 c0       	rjmp	.+144    	; 0x360 <TMR_u8EnableTMR+0xaa>
	{
		/* Check 1.1: Required TimerId */
		switch ( Cpy_u8TimerId )
     2d0:	8a 81       	ldd	r24, Y+2	; 0x02
     2d2:	28 2f       	mov	r18, r24
     2d4:	30 e0       	ldi	r19, 0x00	; 0
     2d6:	3c 83       	std	Y+4, r19	; 0x04
     2d8:	2b 83       	std	Y+3, r18	; 0x03
     2da:	8b 81       	ldd	r24, Y+3	; 0x03
     2dc:	9c 81       	ldd	r25, Y+4	; 0x04
     2de:	81 30       	cpi	r24, 0x01	; 1
     2e0:	91 05       	cpc	r25, r1
     2e2:	31 f1       	breq	.+76     	; 0x330 <TMR_u8EnableTMR+0x7a>
     2e4:	2b 81       	ldd	r18, Y+3	; 0x03
     2e6:	3c 81       	ldd	r19, Y+4	; 0x04
     2e8:	22 30       	cpi	r18, 0x02	; 2
     2ea:	31 05       	cpc	r19, r1
     2ec:	91 f1       	breq	.+100    	; 0x352 <TMR_u8EnableTMR+0x9c>
     2ee:	8b 81       	ldd	r24, Y+3	; 0x03
     2f0:	9c 81       	ldd	r25, Y+4	; 0x04
     2f2:	00 97       	sbiw	r24, 0x00	; 0
     2f4:	b1 f5       	brne	.+108    	; 0x362 <TMR_u8EnableTMR+0xac>
		{
			case TMR_U8_TMR0:

				/* Step 1: Set Compare Value and Preload Value */
				/* Compare Value */
				TMR_U8_OCR0_REG  = TMR_U8_TMR_0_COMPARE_VALUE;
     2f6:	ec e5       	ldi	r30, 0x5C	; 92
     2f8:	f0 e0       	ldi	r31, 0x00	; 0
     2fa:	10 82       	st	Z, r1
				/* Preload value */
				TMR_U8_TCNT0_REG = TMR_U8_TMR_0_PRELOAD_VALUE;
     2fc:	e2 e5       	ldi	r30, 0x52	; 82
     2fe:	f0 e0       	ldi	r31, 0x00	; 0
     300:	80 ec       	ldi	r24, 0xC0	; 192
     302:	80 83       	st	Z, r24
				{
				    /* Case 1: Clock Source =  No Prescaler */
					case TMR_U8_TMR_0_NO_PRESCALER					 : SET_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS00_BIT ); CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS01_BIT );
																	   CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS02_BIT ); break;
					/* Case 2: Clock Source = 8 Prescaler */
					case TMR_U8_TMR_0_8_PRESCALER					 : CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS00_BIT ); SET_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS01_BIT );
     304:	a3 e5       	ldi	r26, 0x53	; 83
     306:	b0 e0       	ldi	r27, 0x00	; 0
     308:	e3 e5       	ldi	r30, 0x53	; 83
     30a:	f0 e0       	ldi	r31, 0x00	; 0
     30c:	80 81       	ld	r24, Z
     30e:	8e 7f       	andi	r24, 0xFE	; 254
     310:	8c 93       	st	X, r24
     312:	a3 e5       	ldi	r26, 0x53	; 83
     314:	b0 e0       	ldi	r27, 0x00	; 0
     316:	e3 e5       	ldi	r30, 0x53	; 83
     318:	f0 e0       	ldi	r31, 0x00	; 0
     31a:	80 81       	ld	r24, Z
     31c:	82 60       	ori	r24, 0x02	; 2
     31e:	8c 93       	st	X, r24
																	   CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS02_BIT ); break;
     320:	a3 e5       	ldi	r26, 0x53	; 83
     322:	b0 e0       	ldi	r27, 0x00	; 0
     324:	e3 e5       	ldi	r30, 0x53	; 83
     326:	f0 e0       	ldi	r31, 0x00	; 0
     328:	80 81       	ld	r24, Z
     32a:	8b 7f       	andi	r24, 0xFB	; 251
     32c:	8c 93       	st	X, r24
     32e:	19 c0       	rjmp	.+50     	; 0x362 <TMR_u8EnableTMR+0xac>

			case TMR_U8_TMR1:

				/* Step 1: Set Compare Value in both Channels, Input Capture Value, and Preload Value  */
				/* Compare Value A */
				TMR_U16_OCR1A_REG = TMR_U16_TMR_1_COMPARE_VALUE_A;
     330:	ea e4       	ldi	r30, 0x4A	; 74
     332:	f0 e0       	ldi	r31, 0x00	; 0
     334:	11 82       	std	Z+1, r1	; 0x01
     336:	10 82       	st	Z, r1
				/* Compare Value B */
				TMR_U16_OCR1B_REG = TMR_U16_TMR_1_COMPARE_VALUE_B;
     338:	e8 e4       	ldi	r30, 0x48	; 72
     33a:	f0 e0       	ldi	r31, 0x00	; 0
     33c:	11 82       	std	Z+1, r1	; 0x01
     33e:	10 82       	st	Z, r1
				/* Input Capture Value */
				TMR_U16_ICR1_REG  = TMR_U16_TMR_1_INPUT_CAPTURE_VALUE;
     340:	e6 e4       	ldi	r30, 0x46	; 70
     342:	f0 e0       	ldi	r31, 0x00	; 0
     344:	11 82       	std	Z+1, r1	; 0x01
     346:	10 82       	st	Z, r1
				/* Preload value */
				TMR_U16_TCNT1_REG = TMR_U16_TMR_1_PRELOAD_VALUE;
     348:	ec e4       	ldi	r30, 0x4C	; 76
     34a:	f0 e0       	ldi	r31, 0x00	; 0
     34c:	11 82       	std	Z+1, r1	; 0x01
     34e:	10 82       	st	Z, r1
     350:	08 c0       	rjmp	.+16     	; 0x362 <TMR_u8EnableTMR+0xac>

			case TMR_U8_TMR2:

				/* Step 1: Set Compare Value and Preload Value */
				/* Compare Value */
				TMR_U8_OCR2_REG  = TMR_U8_TMR_2_COMPARE_VALUE;
     352:	e3 e4       	ldi	r30, 0x43	; 67
     354:	f0 e0       	ldi	r31, 0x00	; 0
     356:	10 82       	st	Z, r1
				/* Set Preload value */
				TMR_U8_TCNT2_REG = TMR_U8_TMR_2_PRELOAD_VALUE;
     358:	e4 e4       	ldi	r30, 0x44	; 68
     35a:	f0 e0       	ldi	r31, 0x00	; 0
     35c:	10 82       	st	Z, r1
     35e:	01 c0       	rjmp	.+2      	; 0x362 <TMR_u8EnableTMR+0xac>
	}
	/* Check 2: TimertId is not in the valid range */
	else
	{
		/* Update error state = NOK, wrong TimertId! */
		Loc_u8ErrorState = STD_TYPES_NOK;
     360:	19 82       	std	Y+1, r1	; 0x01
	}

	return Loc_u8ErrorState;
     362:	89 81       	ldd	r24, Y+1	; 0x01
}
     364:	0f 90       	pop	r0
     366:	0f 90       	pop	r0
     368:	0f 90       	pop	r0
     36a:	0f 90       	pop	r0
     36c:	cf 91       	pop	r28
     36e:	df 91       	pop	r29
     370:	08 95       	ret

00000372 <TMR_u8DisableTMR>:
 Input: u8 TimerId
 Output: u8 Error or No Error
 Description: Function to Disable TMR peripheral.
*/
u8 TMR_u8DisableTMR		     ( u8 Cpy_u8TimerId )
{
     372:	df 93       	push	r29
     374:	cf 93       	push	r28
     376:	00 d0       	rcall	.+0      	; 0x378 <TMR_u8DisableTMR+0x6>
     378:	00 d0       	rcall	.+0      	; 0x37a <TMR_u8DisableTMR+0x8>
     37a:	cd b7       	in	r28, 0x3d	; 61
     37c:	de b7       	in	r29, 0x3e	; 62
     37e:	8a 83       	std	Y+2, r24	; 0x02
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
     380:	81 e0       	ldi	r24, 0x01	; 1
     382:	89 83       	std	Y+1, r24	; 0x01

	/* Check 1: TimertId is in the valid range */
	if ( Cpy_u8TimerId <= TMR_U8_TMR2 )
     384:	8a 81       	ldd	r24, Y+2	; 0x02
     386:	83 30       	cpi	r24, 0x03	; 3
     388:	08 f0       	brcs	.+2      	; 0x38c <TMR_u8DisableTMR+0x1a>
     38a:	94 c0       	rjmp	.+296    	; 0x4b4 <TMR_u8DisableTMR+0x142>
	{
		/* Check 1.1: Required TimerId */
		switch ( Cpy_u8TimerId )
     38c:	8a 81       	ldd	r24, Y+2	; 0x02
     38e:	28 2f       	mov	r18, r24
     390:	30 e0       	ldi	r19, 0x00	; 0
     392:	3c 83       	std	Y+4, r19	; 0x04
     394:	2b 83       	std	Y+3, r18	; 0x03
     396:	8b 81       	ldd	r24, Y+3	; 0x03
     398:	9c 81       	ldd	r25, Y+4	; 0x04
     39a:	81 30       	cpi	r24, 0x01	; 1
     39c:	91 05       	cpc	r25, r1
     39e:	91 f1       	breq	.+100    	; 0x404 <TMR_u8DisableTMR+0x92>
     3a0:	2b 81       	ldd	r18, Y+3	; 0x03
     3a2:	3c 81       	ldd	r19, Y+4	; 0x04
     3a4:	22 30       	cpi	r18, 0x02	; 2
     3a6:	31 05       	cpc	r19, r1
     3a8:	09 f4       	brne	.+2      	; 0x3ac <TMR_u8DisableTMR+0x3a>
     3aa:	5d c0       	rjmp	.+186    	; 0x466 <TMR_u8DisableTMR+0xf4>
     3ac:	8b 81       	ldd	r24, Y+3	; 0x03
     3ae:	9c 81       	ldd	r25, Y+4	; 0x04
     3b0:	00 97       	sbiw	r24, 0x00	; 0
     3b2:	09 f0       	breq	.+2      	; 0x3b6 <TMR_u8DisableTMR+0x44>
     3b4:	80 c0       	rjmp	.+256    	; 0x4b6 <TMR_u8DisableTMR+0x144>
		{
			case TMR_U8_TMR0:

				/* Step 1: Clock Source = No Clock Source (Timer/Counter0 stopped) */
				CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS00_BIT );
     3b6:	a3 e5       	ldi	r26, 0x53	; 83
     3b8:	b0 e0       	ldi	r27, 0x00	; 0
     3ba:	e3 e5       	ldi	r30, 0x53	; 83
     3bc:	f0 e0       	ldi	r31, 0x00	; 0
     3be:	80 81       	ld	r24, Z
     3c0:	8e 7f       	andi	r24, 0xFE	; 254
     3c2:	8c 93       	st	X, r24
				CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS01_BIT );
     3c4:	a3 e5       	ldi	r26, 0x53	; 83
     3c6:	b0 e0       	ldi	r27, 0x00	; 0
     3c8:	e3 e5       	ldi	r30, 0x53	; 83
     3ca:	f0 e0       	ldi	r31, 0x00	; 0
     3cc:	80 81       	ld	r24, Z
     3ce:	8d 7f       	andi	r24, 0xFD	; 253
     3d0:	8c 93       	st	X, r24
				CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS02_BIT );
     3d2:	a3 e5       	ldi	r26, 0x53	; 83
     3d4:	b0 e0       	ldi	r27, 0x00	; 0
     3d6:	e3 e5       	ldi	r30, 0x53	; 83
     3d8:	f0 e0       	ldi	r31, 0x00	; 0
     3da:	80 81       	ld	r24, Z
     3dc:	8b 7f       	andi	r24, 0xFB	; 251
     3de:	8c 93       	st	X, r24

				/* Step 2: Clear Timer/Counter0 OVF Flag */
				SET_BIT( TMR_U8_TIFR_REG, TMR_U8_TOV0_BIT );
     3e0:	a8 e5       	ldi	r26, 0x58	; 88
     3e2:	b0 e0       	ldi	r27, 0x00	; 0
     3e4:	e8 e5       	ldi	r30, 0x58	; 88
     3e6:	f0 e0       	ldi	r31, 0x00	; 0
     3e8:	80 81       	ld	r24, Z
     3ea:	81 60       	ori	r24, 0x01	; 1
     3ec:	8c 93       	st	X, r24

				/* Step 3: Clear Compare Value and Preload Value */
				/* Compare Value */
				TMR_U8_OCR0_REG  = 0x00;
     3ee:	ec e5       	ldi	r30, 0x5C	; 92
     3f0:	f0 e0       	ldi	r31, 0x00	; 0
     3f2:	10 82       	st	Z, r1
				/* Clear TMR0 */
				TMR_U8_TCNT0_REG = 0x00;
     3f4:	e2 e5       	ldi	r30, 0x52	; 82
     3f6:	f0 e0       	ldi	r31, 0x00	; 0
     3f8:	10 82       	st	Z, r1

				/* Step 4: Reset the OVF Counter of Timer/Counter0 to 0 */
				Glb_Au16OVFCounters[TMR_U8_TMR0] = 0;
     3fa:	10 92 6f 00 	sts	0x006F, r1
     3fe:	10 92 6e 00 	sts	0x006E, r1
     402:	59 c0       	rjmp	.+178    	; 0x4b6 <TMR_u8DisableTMR+0x144>
				break;

			case TMR_U8_TMR1:

				/* Step 1: Clock Source = No Clock Source (Timer/Counter1 stopped) */
				CLR_BIT( TMR_U8_TCCR1B_REG, TMR_U8_CS10_BIT );
     404:	ae e4       	ldi	r26, 0x4E	; 78
     406:	b0 e0       	ldi	r27, 0x00	; 0
     408:	ee e4       	ldi	r30, 0x4E	; 78
     40a:	f0 e0       	ldi	r31, 0x00	; 0
     40c:	80 81       	ld	r24, Z
     40e:	8e 7f       	andi	r24, 0xFE	; 254
     410:	8c 93       	st	X, r24
				CLR_BIT( TMR_U8_TCCR1B_REG, TMR_U8_CS11_BIT );
     412:	ae e4       	ldi	r26, 0x4E	; 78
     414:	b0 e0       	ldi	r27, 0x00	; 0
     416:	ee e4       	ldi	r30, 0x4E	; 78
     418:	f0 e0       	ldi	r31, 0x00	; 0
     41a:	80 81       	ld	r24, Z
     41c:	8d 7f       	andi	r24, 0xFD	; 253
     41e:	8c 93       	st	X, r24
				CLR_BIT( TMR_U8_TCCR1B_REG, TMR_U8_CS12_BIT );
     420:	ae e4       	ldi	r26, 0x4E	; 78
     422:	b0 e0       	ldi	r27, 0x00	; 0
     424:	ee e4       	ldi	r30, 0x4E	; 78
     426:	f0 e0       	ldi	r31, 0x00	; 0
     428:	80 81       	ld	r24, Z
     42a:	8b 7f       	andi	r24, 0xFB	; 251
     42c:	8c 93       	st	X, r24

				/* Step 2: Clear Timer/Counter1 OVF Flag */
				SET_BIT( TMR_U8_TIFR_REG, TMR_U8_TOV1_BIT );
     42e:	a8 e5       	ldi	r26, 0x58	; 88
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	e8 e5       	ldi	r30, 0x58	; 88
     434:	f0 e0       	ldi	r31, 0x00	; 0
     436:	80 81       	ld	r24, Z
     438:	84 60       	ori	r24, 0x04	; 4
     43a:	8c 93       	st	X, r24

				/* Step 3:  Clear Compare Values in both Channels, Input Capture Value, and Preload Value  */
				/* Input Capture Value */
				TMR_U16_ICR1_REG  = 0x00;
     43c:	e6 e4       	ldi	r30, 0x46	; 70
     43e:	f0 e0       	ldi	r31, 0x00	; 0
     440:	11 82       	std	Z+1, r1	; 0x01
     442:	10 82       	st	Z, r1
				/* Compare Value A */
				TMR_U16_OCR1A_REG = 0x00;
     444:	ea e4       	ldi	r30, 0x4A	; 74
     446:	f0 e0       	ldi	r31, 0x00	; 0
     448:	11 82       	std	Z+1, r1	; 0x01
     44a:	10 82       	st	Z, r1
				/* Compare Value B */
				TMR_U16_OCR1B_REG = 0x00;
     44c:	e8 e4       	ldi	r30, 0x48	; 72
     44e:	f0 e0       	ldi	r31, 0x00	; 0
     450:	11 82       	std	Z+1, r1	; 0x01
     452:	10 82       	st	Z, r1
				/* Clear TMR1 */
				TMR_U16_TCNT1_REG = 0x00;
     454:	ec e4       	ldi	r30, 0x4C	; 76
     456:	f0 e0       	ldi	r31, 0x00	; 0
     458:	11 82       	std	Z+1, r1	; 0x01
     45a:	10 82       	st	Z, r1

				/* Step 4: Reset the OVF Counter of Timer/Counter1 to 0 */
				Glb_Au16OVFCounters[TMR_U8_TMR1] = 0;
     45c:	10 92 71 00 	sts	0x0071, r1
     460:	10 92 70 00 	sts	0x0070, r1
     464:	28 c0       	rjmp	.+80     	; 0x4b6 <TMR_u8DisableTMR+0x144>
				break;

			case TMR_U8_TMR2:

				/* Step 1: Clock Source = No Clock Source (Timer/Counter2 stopped) */
				CLR_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS20_BIT );
     466:	a5 e4       	ldi	r26, 0x45	; 69
     468:	b0 e0       	ldi	r27, 0x00	; 0
     46a:	e5 e4       	ldi	r30, 0x45	; 69
     46c:	f0 e0       	ldi	r31, 0x00	; 0
     46e:	80 81       	ld	r24, Z
     470:	8e 7f       	andi	r24, 0xFE	; 254
     472:	8c 93       	st	X, r24
				CLR_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS21_BIT );
     474:	a5 e4       	ldi	r26, 0x45	; 69
     476:	b0 e0       	ldi	r27, 0x00	; 0
     478:	e5 e4       	ldi	r30, 0x45	; 69
     47a:	f0 e0       	ldi	r31, 0x00	; 0
     47c:	80 81       	ld	r24, Z
     47e:	8d 7f       	andi	r24, 0xFD	; 253
     480:	8c 93       	st	X, r24
				CLR_BIT( TMR_U8_TCCR2_REG, TMR_U8_CS22_BIT );
     482:	a5 e4       	ldi	r26, 0x45	; 69
     484:	b0 e0       	ldi	r27, 0x00	; 0
     486:	e5 e4       	ldi	r30, 0x45	; 69
     488:	f0 e0       	ldi	r31, 0x00	; 0
     48a:	80 81       	ld	r24, Z
     48c:	8b 7f       	andi	r24, 0xFB	; 251
     48e:	8c 93       	st	X, r24

				/* Step 2: Clear Timer/Counter2 OVF Flag */
				SET_BIT( TMR_U8_TIFR_REG, TMR_U8_TOV2_BIT );
     490:	a8 e5       	ldi	r26, 0x58	; 88
     492:	b0 e0       	ldi	r27, 0x00	; 0
     494:	e8 e5       	ldi	r30, 0x58	; 88
     496:	f0 e0       	ldi	r31, 0x00	; 0
     498:	80 81       	ld	r24, Z
     49a:	80 64       	ori	r24, 0x40	; 64
     49c:	8c 93       	st	X, r24

				/* Step 3: Clear Compare Value and Preload Value */
				/* Compare Value */
				TMR_U8_OCR2_REG  = 0x00;
     49e:	e3 e4       	ldi	r30, 0x43	; 67
     4a0:	f0 e0       	ldi	r31, 0x00	; 0
     4a2:	10 82       	st	Z, r1
				/* Clear TMR2 */
				TMR_U8_TCNT2_REG = 0x00;
     4a4:	e4 e4       	ldi	r30, 0x44	; 68
     4a6:	f0 e0       	ldi	r31, 0x00	; 0
     4a8:	10 82       	st	Z, r1

				/* Step 4: Reset the OVF Counter of Timer/Counter2 to 0 */
				Glb_Au16OVFCounters[TMR_U8_TMR2] = 0;
     4aa:	10 92 73 00 	sts	0x0073, r1
     4ae:	10 92 72 00 	sts	0x0072, r1
     4b2:	01 c0       	rjmp	.+2      	; 0x4b6 <TMR_u8DisableTMR+0x144>
	}
	/* Check 2: TimertId is not in the valid range */
	else
	{
		/* Update error state = NOK, wrong TimertId! */
		Loc_u8ErrorState = STD_TYPES_NOK;
     4b4:	19 82       	std	Y+1, r1	; 0x01
	}

	return Loc_u8ErrorState;
     4b6:	89 81       	ldd	r24, Y+1	; 0x01
}
     4b8:	0f 90       	pop	r0
     4ba:	0f 90       	pop	r0
     4bc:	0f 90       	pop	r0
     4be:	0f 90       	pop	r0
     4c0:	cf 91       	pop	r28
     4c2:	df 91       	pop	r29
     4c4:	08 95       	ret

000004c6 <TMR_u8EnableTMRInterrupt>:
 Input: u8 TimerId, u8 Timer1ChannelId, and u8 InterruptType
 Output: u8 Error or No Error
 Description: Function to Enable Interrupt of TMR peripheral.
*/
u8 TMR_u8EnableTMRInterrupt  ( u8 Cpy_u8TimerId, u8 Cpy_u8Timer1ChannelId, u8 Cpy_u8InterruptType )
{
     4c6:	df 93       	push	r29
     4c8:	cf 93       	push	r28
     4ca:	cd b7       	in	r28, 0x3d	; 61
     4cc:	de b7       	in	r29, 0x3e	; 62
     4ce:	2e 97       	sbiw	r28, 0x0e	; 14
     4d0:	0f b6       	in	r0, 0x3f	; 63
     4d2:	f8 94       	cli
     4d4:	de bf       	out	0x3e, r29	; 62
     4d6:	0f be       	out	0x3f, r0	; 63
     4d8:	cd bf       	out	0x3d, r28	; 61
     4da:	8a 83       	std	Y+2, r24	; 0x02
     4dc:	6b 83       	std	Y+3, r22	; 0x03
     4de:	4c 83       	std	Y+4, r20	; 0x04
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
     4e0:	81 e0       	ldi	r24, 0x01	; 1
     4e2:	89 83       	std	Y+1, r24	; 0x01

	/* Check 1: TimertId, ChannelId and Interrupt Type are in the valid range */
	if ( ( Cpy_u8TimerId <= TMR_U8_TMR2 ) && ( Cpy_u8Timer1ChannelId <= TMR_U8_TMR_1_CHANNEL_B ) && ( Cpy_u8InterruptType <= TMR_U8_COMP_INTERRUPT ) )
     4e4:	8a 81       	ldd	r24, Y+2	; 0x02
     4e6:	83 30       	cpi	r24, 0x03	; 3
     4e8:	08 f0       	brcs	.+2      	; 0x4ec <TMR_u8EnableTMRInterrupt+0x26>
     4ea:	a1 c0       	rjmp	.+322    	; 0x62e <TMR_u8EnableTMRInterrupt+0x168>
     4ec:	8b 81       	ldd	r24, Y+3	; 0x03
     4ee:	83 30       	cpi	r24, 0x03	; 3
     4f0:	08 f0       	brcs	.+2      	; 0x4f4 <TMR_u8EnableTMRInterrupt+0x2e>
     4f2:	9d c0       	rjmp	.+314    	; 0x62e <TMR_u8EnableTMRInterrupt+0x168>
     4f4:	8c 81       	ldd	r24, Y+4	; 0x04
     4f6:	82 30       	cpi	r24, 0x02	; 2
     4f8:	08 f0       	brcs	.+2      	; 0x4fc <TMR_u8EnableTMRInterrupt+0x36>
     4fa:	99 c0       	rjmp	.+306    	; 0x62e <TMR_u8EnableTMRInterrupt+0x168>
	{
		/* Check 1.1: Required TimerId */
		switch ( Cpy_u8TimerId )
     4fc:	8a 81       	ldd	r24, Y+2	; 0x02
     4fe:	28 2f       	mov	r18, r24
     500:	30 e0       	ldi	r19, 0x00	; 0
     502:	3e 87       	std	Y+14, r19	; 0x0e
     504:	2d 87       	std	Y+13, r18	; 0x0d
     506:	8d 85       	ldd	r24, Y+13	; 0x0d
     508:	9e 85       	ldd	r25, Y+14	; 0x0e
     50a:	81 30       	cpi	r24, 0x01	; 1
     50c:	91 05       	cpc	r25, r1
     50e:	59 f1       	breq	.+86     	; 0x566 <TMR_u8EnableTMRInterrupt+0xa0>
     510:	2d 85       	ldd	r18, Y+13	; 0x0d
     512:	3e 85       	ldd	r19, Y+14	; 0x0e
     514:	22 30       	cpi	r18, 0x02	; 2
     516:	31 05       	cpc	r19, r1
     518:	09 f4       	brne	.+2      	; 0x51c <TMR_u8EnableTMRInterrupt+0x56>
     51a:	69 c0       	rjmp	.+210    	; 0x5ee <TMR_u8EnableTMRInterrupt+0x128>
     51c:	8d 85       	ldd	r24, Y+13	; 0x0d
     51e:	9e 85       	ldd	r25, Y+14	; 0x0e
     520:	00 97       	sbiw	r24, 0x00	; 0
     522:	09 f0       	breq	.+2      	; 0x526 <TMR_u8EnableTMRInterrupt+0x60>
     524:	85 c0       	rjmp	.+266    	; 0x630 <TMR_u8EnableTMRInterrupt+0x16a>
		{
			case TMR_U8_TMR0:
				/* Check 1.1.1: Required InterruptType */
				switch ( Cpy_u8InterruptType )
     526:	8c 81       	ldd	r24, Y+4	; 0x04
     528:	28 2f       	mov	r18, r24
     52a:	30 e0       	ldi	r19, 0x00	; 0
     52c:	3c 87       	std	Y+12, r19	; 0x0c
     52e:	2b 87       	std	Y+11, r18	; 0x0b
     530:	8b 85       	ldd	r24, Y+11	; 0x0b
     532:	9c 85       	ldd	r25, Y+12	; 0x0c
     534:	81 30       	cpi	r24, 0x01	; 1
     536:	91 05       	cpc	r25, r1
     538:	31 f0       	breq	.+12     	; 0x546 <TMR_u8EnableTMRInterrupt+0x80>
     53a:	2b 85       	ldd	r18, Y+11	; 0x0b
     53c:	3c 85       	ldd	r19, Y+12	; 0x0c
     53e:	22 30       	cpi	r18, 0x02	; 2
     540:	31 05       	cpc	r19, r1
     542:	49 f0       	breq	.+18     	; 0x556 <TMR_u8EnableTMRInterrupt+0x90>
     544:	75 c0       	rjmp	.+234    	; 0x630 <TMR_u8EnableTMRInterrupt+0x16a>
				{
					case TMR_U8_COMP_INTERRUPT: SET_BIT( TMR_U8_TIMSK_REG, TMR_U8_OCIE0_BIT ); break;
     546:	a9 e5       	ldi	r26, 0x59	; 89
     548:	b0 e0       	ldi	r27, 0x00	; 0
     54a:	e9 e5       	ldi	r30, 0x59	; 89
     54c:	f0 e0       	ldi	r31, 0x00	; 0
     54e:	80 81       	ld	r24, Z
     550:	82 60       	ori	r24, 0x02	; 2
     552:	8c 93       	st	X, r24
     554:	6d c0       	rjmp	.+218    	; 0x630 <TMR_u8EnableTMRInterrupt+0x16a>
					case TMR_U8_OVF_INTERRUPT : SET_BIT( TMR_U8_TIMSK_REG, TMR_U8_TOIE0_BIT ); break;
     556:	a9 e5       	ldi	r26, 0x59	; 89
     558:	b0 e0       	ldi	r27, 0x00	; 0
     55a:	e9 e5       	ldi	r30, 0x59	; 89
     55c:	f0 e0       	ldi	r31, 0x00	; 0
     55e:	80 81       	ld	r24, Z
     560:	81 60       	ori	r24, 0x01	; 1
     562:	8c 93       	st	X, r24
     564:	65 c0       	rjmp	.+202    	; 0x630 <TMR_u8EnableTMRInterrupt+0x16a>
				}
				break;

			case TMR_U8_TMR1:
				/* Check 1.1.2: Required InterruptType */
				switch ( Cpy_u8InterruptType )
     566:	8c 81       	ldd	r24, Y+4	; 0x04
     568:	28 2f       	mov	r18, r24
     56a:	30 e0       	ldi	r19, 0x00	; 0
     56c:	3a 87       	std	Y+10, r19	; 0x0a
     56e:	29 87       	std	Y+9, r18	; 0x09
     570:	89 85       	ldd	r24, Y+9	; 0x09
     572:	9a 85       	ldd	r25, Y+10	; 0x0a
     574:	81 30       	cpi	r24, 0x01	; 1
     576:	91 05       	cpc	r25, r1
     578:	91 f0       	breq	.+36     	; 0x59e <TMR_u8EnableTMRInterrupt+0xd8>
     57a:	29 85       	ldd	r18, Y+9	; 0x09
     57c:	3a 85       	ldd	r19, Y+10	; 0x0a
     57e:	22 30       	cpi	r18, 0x02	; 2
     580:	31 05       	cpc	r19, r1
     582:	69 f1       	breq	.+90     	; 0x5de <TMR_u8EnableTMRInterrupt+0x118>
     584:	89 85       	ldd	r24, Y+9	; 0x09
     586:	9a 85       	ldd	r25, Y+10	; 0x0a
     588:	00 97       	sbiw	r24, 0x00	; 0
     58a:	09 f0       	breq	.+2      	; 0x58e <TMR_u8EnableTMRInterrupt+0xc8>
     58c:	51 c0       	rjmp	.+162    	; 0x630 <TMR_u8EnableTMRInterrupt+0x16a>
				{
					case TMR_U8_CAPT_INTERRUPT: SET_BIT( TMR_U8_TIMSK_REG, TMR_U8_TICIE1_BIT ); break;
     58e:	a9 e5       	ldi	r26, 0x59	; 89
     590:	b0 e0       	ldi	r27, 0x00	; 0
     592:	e9 e5       	ldi	r30, 0x59	; 89
     594:	f0 e0       	ldi	r31, 0x00	; 0
     596:	80 81       	ld	r24, Z
     598:	80 62       	ori	r24, 0x20	; 32
     59a:	8c 93       	st	X, r24
     59c:	49 c0       	rjmp	.+146    	; 0x630 <TMR_u8EnableTMRInterrupt+0x16a>
					case TMR_U8_COMP_INTERRUPT:
						/* Check 1.1.2.1: Required Timer1ChannelId */
						switch ( Cpy_u8Timer1ChannelId )
     59e:	8b 81       	ldd	r24, Y+3	; 0x03
     5a0:	28 2f       	mov	r18, r24
     5a2:	30 e0       	ldi	r19, 0x00	; 0
     5a4:	38 87       	std	Y+8, r19	; 0x08
     5a6:	2f 83       	std	Y+7, r18	; 0x07
     5a8:	8f 81       	ldd	r24, Y+7	; 0x07
     5aa:	98 85       	ldd	r25, Y+8	; 0x08
     5ac:	81 30       	cpi	r24, 0x01	; 1
     5ae:	91 05       	cpc	r25, r1
     5b0:	31 f0       	breq	.+12     	; 0x5be <TMR_u8EnableTMRInterrupt+0xf8>
     5b2:	2f 81       	ldd	r18, Y+7	; 0x07
     5b4:	38 85       	ldd	r19, Y+8	; 0x08
     5b6:	22 30       	cpi	r18, 0x02	; 2
     5b8:	31 05       	cpc	r19, r1
     5ba:	49 f0       	breq	.+18     	; 0x5ce <TMR_u8EnableTMRInterrupt+0x108>
     5bc:	39 c0       	rjmp	.+114    	; 0x630 <TMR_u8EnableTMRInterrupt+0x16a>
						{
							case TMR_U8_NO_CHANNEL     :												 break;
							case TMR_U8_TMR_1_CHANNEL_A: SET_BIT( TMR_U8_TIMSK_REG, TMR_U8_OCIE1A_BIT ); break;
     5be:	a9 e5       	ldi	r26, 0x59	; 89
     5c0:	b0 e0       	ldi	r27, 0x00	; 0
     5c2:	e9 e5       	ldi	r30, 0x59	; 89
     5c4:	f0 e0       	ldi	r31, 0x00	; 0
     5c6:	80 81       	ld	r24, Z
     5c8:	80 61       	ori	r24, 0x10	; 16
     5ca:	8c 93       	st	X, r24
     5cc:	31 c0       	rjmp	.+98     	; 0x630 <TMR_u8EnableTMRInterrupt+0x16a>
							case TMR_U8_TMR_1_CHANNEL_B: SET_BIT( TMR_U8_TIMSK_REG, TMR_U8_OCIE1B_BIT ); break;
     5ce:	a9 e5       	ldi	r26, 0x59	; 89
     5d0:	b0 e0       	ldi	r27, 0x00	; 0
     5d2:	e9 e5       	ldi	r30, 0x59	; 89
     5d4:	f0 e0       	ldi	r31, 0x00	; 0
     5d6:	80 81       	ld	r24, Z
     5d8:	88 60       	ori	r24, 0x08	; 8
     5da:	8c 93       	st	X, r24
     5dc:	29 c0       	rjmp	.+82     	; 0x630 <TMR_u8EnableTMRInterrupt+0x16a>
						}
						break;
					case TMR_U8_OVF_INTERRUPT: SET_BIT( TMR_U8_TIMSK_REG, TMR_U8_TOIE1_BIT  ); break;
     5de:	a9 e5       	ldi	r26, 0x59	; 89
     5e0:	b0 e0       	ldi	r27, 0x00	; 0
     5e2:	e9 e5       	ldi	r30, 0x59	; 89
     5e4:	f0 e0       	ldi	r31, 0x00	; 0
     5e6:	80 81       	ld	r24, Z
     5e8:	84 60       	ori	r24, 0x04	; 4
     5ea:	8c 93       	st	X, r24
     5ec:	21 c0       	rjmp	.+66     	; 0x630 <TMR_u8EnableTMRInterrupt+0x16a>
				}
				break;

			case TMR_U8_TMR2:
				/* Check 1.1.3: Required InterruptType */
				switch ( Cpy_u8InterruptType )
     5ee:	8c 81       	ldd	r24, Y+4	; 0x04
     5f0:	28 2f       	mov	r18, r24
     5f2:	30 e0       	ldi	r19, 0x00	; 0
     5f4:	3e 83       	std	Y+6, r19	; 0x06
     5f6:	2d 83       	std	Y+5, r18	; 0x05
     5f8:	8d 81       	ldd	r24, Y+5	; 0x05
     5fa:	9e 81       	ldd	r25, Y+6	; 0x06
     5fc:	81 30       	cpi	r24, 0x01	; 1
     5fe:	91 05       	cpc	r25, r1
     600:	31 f0       	breq	.+12     	; 0x60e <TMR_u8EnableTMRInterrupt+0x148>
     602:	2d 81       	ldd	r18, Y+5	; 0x05
     604:	3e 81       	ldd	r19, Y+6	; 0x06
     606:	22 30       	cpi	r18, 0x02	; 2
     608:	31 05       	cpc	r19, r1
     60a:	49 f0       	breq	.+18     	; 0x61e <TMR_u8EnableTMRInterrupt+0x158>
     60c:	11 c0       	rjmp	.+34     	; 0x630 <TMR_u8EnableTMRInterrupt+0x16a>
				{
					case TMR_U8_COMP_INTERRUPT: SET_BIT( TMR_U8_TIMSK_REG, TMR_U8_OCIE2_BIT ); break;
     60e:	a9 e5       	ldi	r26, 0x59	; 89
     610:	b0 e0       	ldi	r27, 0x00	; 0
     612:	e9 e5       	ldi	r30, 0x59	; 89
     614:	f0 e0       	ldi	r31, 0x00	; 0
     616:	80 81       	ld	r24, Z
     618:	80 68       	ori	r24, 0x80	; 128
     61a:	8c 93       	st	X, r24
     61c:	09 c0       	rjmp	.+18     	; 0x630 <TMR_u8EnableTMRInterrupt+0x16a>
					case TMR_U8_OVF_INTERRUPT : SET_BIT( TMR_U8_TIMSK_REG, TMR_U8_TOIE2_BIT ); break;
     61e:	a9 e5       	ldi	r26, 0x59	; 89
     620:	b0 e0       	ldi	r27, 0x00	; 0
     622:	e9 e5       	ldi	r30, 0x59	; 89
     624:	f0 e0       	ldi	r31, 0x00	; 0
     626:	80 81       	ld	r24, Z
     628:	80 64       	ori	r24, 0x40	; 64
     62a:	8c 93       	st	X, r24
     62c:	01 c0       	rjmp	.+2      	; 0x630 <TMR_u8EnableTMRInterrupt+0x16a>
	}
	/* Check 2: TimertId, ChannelId or Interrupt Type is not in the valid range */
	else
	{
		/* Update error state = NOK, wrong TimertId, ChannelId or InterruptType! */
		Loc_u8ErrorState = STD_TYPES_NOK;
     62e:	19 82       	std	Y+1, r1	; 0x01
	}

	return Loc_u8ErrorState;
     630:	89 81       	ldd	r24, Y+1	; 0x01
}
     632:	2e 96       	adiw	r28, 0x0e	; 14
     634:	0f b6       	in	r0, 0x3f	; 63
     636:	f8 94       	cli
     638:	de bf       	out	0x3e, r29	; 62
     63a:	0f be       	out	0x3f, r0	; 63
     63c:	cd bf       	out	0x3d, r28	; 61
     63e:	cf 91       	pop	r28
     640:	df 91       	pop	r29
     642:	08 95       	ret

00000644 <TMR_u8DisableTMRInterrupt>:
 Input: u8 TimerId, u8 Timer1ChannelId, and u8 InterruptType
 Output: u8 Error or No Error
 Description: Function to Disable Interrupt of TMR peripheral.
*/
u8 TMR_u8DisableTMRInterrupt ( u8 Cpy_u8TimerId, u8 Cpy_u8Timer1ChannelId, u8 Cpy_u8InterruptType )
{
     644:	df 93       	push	r29
     646:	cf 93       	push	r28
     648:	cd b7       	in	r28, 0x3d	; 61
     64a:	de b7       	in	r29, 0x3e	; 62
     64c:	2e 97       	sbiw	r28, 0x0e	; 14
     64e:	0f b6       	in	r0, 0x3f	; 63
     650:	f8 94       	cli
     652:	de bf       	out	0x3e, r29	; 62
     654:	0f be       	out	0x3f, r0	; 63
     656:	cd bf       	out	0x3d, r28	; 61
     658:	8a 83       	std	Y+2, r24	; 0x02
     65a:	6b 83       	std	Y+3, r22	; 0x03
     65c:	4c 83       	std	Y+4, r20	; 0x04
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	89 83       	std	Y+1, r24	; 0x01

	/* Check 1: TimertId, ChannelId and Interrupt Type are in the valid range */
	if ( ( Cpy_u8TimerId <= TMR_U8_TMR2 ) && ( Cpy_u8Timer1ChannelId <= TMR_U8_TMR_1_CHANNEL_B ) && ( Cpy_u8InterruptType <= TMR_U8_COMP_INTERRUPT ) )
     662:	8a 81       	ldd	r24, Y+2	; 0x02
     664:	83 30       	cpi	r24, 0x03	; 3
     666:	08 f0       	brcs	.+2      	; 0x66a <TMR_u8DisableTMRInterrupt+0x26>
     668:	a1 c0       	rjmp	.+322    	; 0x7ac <TMR_u8DisableTMRInterrupt+0x168>
     66a:	8b 81       	ldd	r24, Y+3	; 0x03
     66c:	83 30       	cpi	r24, 0x03	; 3
     66e:	08 f0       	brcs	.+2      	; 0x672 <TMR_u8DisableTMRInterrupt+0x2e>
     670:	9d c0       	rjmp	.+314    	; 0x7ac <TMR_u8DisableTMRInterrupt+0x168>
     672:	8c 81       	ldd	r24, Y+4	; 0x04
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	08 f0       	brcs	.+2      	; 0x67a <TMR_u8DisableTMRInterrupt+0x36>
     678:	99 c0       	rjmp	.+306    	; 0x7ac <TMR_u8DisableTMRInterrupt+0x168>
	{
		/* Check 1.1: Required TimerId */
		switch ( Cpy_u8TimerId )
     67a:	8a 81       	ldd	r24, Y+2	; 0x02
     67c:	28 2f       	mov	r18, r24
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	3e 87       	std	Y+14, r19	; 0x0e
     682:	2d 87       	std	Y+13, r18	; 0x0d
     684:	8d 85       	ldd	r24, Y+13	; 0x0d
     686:	9e 85       	ldd	r25, Y+14	; 0x0e
     688:	81 30       	cpi	r24, 0x01	; 1
     68a:	91 05       	cpc	r25, r1
     68c:	59 f1       	breq	.+86     	; 0x6e4 <TMR_u8DisableTMRInterrupt+0xa0>
     68e:	2d 85       	ldd	r18, Y+13	; 0x0d
     690:	3e 85       	ldd	r19, Y+14	; 0x0e
     692:	22 30       	cpi	r18, 0x02	; 2
     694:	31 05       	cpc	r19, r1
     696:	09 f4       	brne	.+2      	; 0x69a <TMR_u8DisableTMRInterrupt+0x56>
     698:	69 c0       	rjmp	.+210    	; 0x76c <TMR_u8DisableTMRInterrupt+0x128>
     69a:	8d 85       	ldd	r24, Y+13	; 0x0d
     69c:	9e 85       	ldd	r25, Y+14	; 0x0e
     69e:	00 97       	sbiw	r24, 0x00	; 0
     6a0:	09 f0       	breq	.+2      	; 0x6a4 <TMR_u8DisableTMRInterrupt+0x60>
     6a2:	85 c0       	rjmp	.+266    	; 0x7ae <TMR_u8DisableTMRInterrupt+0x16a>
		{
			case TMR_U8_TMR0:
				/* Check 1.1.1: Required InterruptType */
				switch ( Cpy_u8InterruptType )
     6a4:	8c 81       	ldd	r24, Y+4	; 0x04
     6a6:	28 2f       	mov	r18, r24
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	3c 87       	std	Y+12, r19	; 0x0c
     6ac:	2b 87       	std	Y+11, r18	; 0x0b
     6ae:	8b 85       	ldd	r24, Y+11	; 0x0b
     6b0:	9c 85       	ldd	r25, Y+12	; 0x0c
     6b2:	81 30       	cpi	r24, 0x01	; 1
     6b4:	91 05       	cpc	r25, r1
     6b6:	31 f0       	breq	.+12     	; 0x6c4 <TMR_u8DisableTMRInterrupt+0x80>
     6b8:	2b 85       	ldd	r18, Y+11	; 0x0b
     6ba:	3c 85       	ldd	r19, Y+12	; 0x0c
     6bc:	22 30       	cpi	r18, 0x02	; 2
     6be:	31 05       	cpc	r19, r1
     6c0:	49 f0       	breq	.+18     	; 0x6d4 <TMR_u8DisableTMRInterrupt+0x90>
     6c2:	75 c0       	rjmp	.+234    	; 0x7ae <TMR_u8DisableTMRInterrupt+0x16a>
				{
					case TMR_U8_COMP_INTERRUPT: CLR_BIT( TMR_U8_TIMSK_REG, TMR_U8_OCIE0_BIT ); break;
     6c4:	a9 e5       	ldi	r26, 0x59	; 89
     6c6:	b0 e0       	ldi	r27, 0x00	; 0
     6c8:	e9 e5       	ldi	r30, 0x59	; 89
     6ca:	f0 e0       	ldi	r31, 0x00	; 0
     6cc:	80 81       	ld	r24, Z
     6ce:	8d 7f       	andi	r24, 0xFD	; 253
     6d0:	8c 93       	st	X, r24
     6d2:	6d c0       	rjmp	.+218    	; 0x7ae <TMR_u8DisableTMRInterrupt+0x16a>
					case TMR_U8_OVF_INTERRUPT : CLR_BIT( TMR_U8_TIMSK_REG, TMR_U8_TOIE0_BIT ); break;
     6d4:	a9 e5       	ldi	r26, 0x59	; 89
     6d6:	b0 e0       	ldi	r27, 0x00	; 0
     6d8:	e9 e5       	ldi	r30, 0x59	; 89
     6da:	f0 e0       	ldi	r31, 0x00	; 0
     6dc:	80 81       	ld	r24, Z
     6de:	8e 7f       	andi	r24, 0xFE	; 254
     6e0:	8c 93       	st	X, r24
     6e2:	65 c0       	rjmp	.+202    	; 0x7ae <TMR_u8DisableTMRInterrupt+0x16a>
				}
				break;

			case TMR_U8_TMR1:
				/* Check 1.1.2: Required InterruptType */
				switch ( Cpy_u8InterruptType )
     6e4:	8c 81       	ldd	r24, Y+4	; 0x04
     6e6:	28 2f       	mov	r18, r24
     6e8:	30 e0       	ldi	r19, 0x00	; 0
     6ea:	3a 87       	std	Y+10, r19	; 0x0a
     6ec:	29 87       	std	Y+9, r18	; 0x09
     6ee:	89 85       	ldd	r24, Y+9	; 0x09
     6f0:	9a 85       	ldd	r25, Y+10	; 0x0a
     6f2:	81 30       	cpi	r24, 0x01	; 1
     6f4:	91 05       	cpc	r25, r1
     6f6:	91 f0       	breq	.+36     	; 0x71c <TMR_u8DisableTMRInterrupt+0xd8>
     6f8:	29 85       	ldd	r18, Y+9	; 0x09
     6fa:	3a 85       	ldd	r19, Y+10	; 0x0a
     6fc:	22 30       	cpi	r18, 0x02	; 2
     6fe:	31 05       	cpc	r19, r1
     700:	69 f1       	breq	.+90     	; 0x75c <TMR_u8DisableTMRInterrupt+0x118>
     702:	89 85       	ldd	r24, Y+9	; 0x09
     704:	9a 85       	ldd	r25, Y+10	; 0x0a
     706:	00 97       	sbiw	r24, 0x00	; 0
     708:	09 f0       	breq	.+2      	; 0x70c <TMR_u8DisableTMRInterrupt+0xc8>
     70a:	51 c0       	rjmp	.+162    	; 0x7ae <TMR_u8DisableTMRInterrupt+0x16a>
				{
					case TMR_U8_CAPT_INTERRUPT: CLR_BIT( TMR_U8_TIMSK_REG, TMR_U8_TICIE1_BIT ); break;
     70c:	a9 e5       	ldi	r26, 0x59	; 89
     70e:	b0 e0       	ldi	r27, 0x00	; 0
     710:	e9 e5       	ldi	r30, 0x59	; 89
     712:	f0 e0       	ldi	r31, 0x00	; 0
     714:	80 81       	ld	r24, Z
     716:	8f 7d       	andi	r24, 0xDF	; 223
     718:	8c 93       	st	X, r24
     71a:	49 c0       	rjmp	.+146    	; 0x7ae <TMR_u8DisableTMRInterrupt+0x16a>
					case TMR_U8_COMP_INTERRUPT:
						/* Check 1.1.2.1: Required Timer1ChannelId */
						switch ( Cpy_u8Timer1ChannelId )
     71c:	8b 81       	ldd	r24, Y+3	; 0x03
     71e:	28 2f       	mov	r18, r24
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	38 87       	std	Y+8, r19	; 0x08
     724:	2f 83       	std	Y+7, r18	; 0x07
     726:	8f 81       	ldd	r24, Y+7	; 0x07
     728:	98 85       	ldd	r25, Y+8	; 0x08
     72a:	81 30       	cpi	r24, 0x01	; 1
     72c:	91 05       	cpc	r25, r1
     72e:	31 f0       	breq	.+12     	; 0x73c <TMR_u8DisableTMRInterrupt+0xf8>
     730:	2f 81       	ldd	r18, Y+7	; 0x07
     732:	38 85       	ldd	r19, Y+8	; 0x08
     734:	22 30       	cpi	r18, 0x02	; 2
     736:	31 05       	cpc	r19, r1
     738:	49 f0       	breq	.+18     	; 0x74c <TMR_u8DisableTMRInterrupt+0x108>
     73a:	39 c0       	rjmp	.+114    	; 0x7ae <TMR_u8DisableTMRInterrupt+0x16a>
						{
							case TMR_U8_NO_CHANNEL     :												 break;
							case TMR_U8_TMR_1_CHANNEL_A: CLR_BIT( TMR_U8_TIMSK_REG, TMR_U8_OCIE1A_BIT ); break;
     73c:	a9 e5       	ldi	r26, 0x59	; 89
     73e:	b0 e0       	ldi	r27, 0x00	; 0
     740:	e9 e5       	ldi	r30, 0x59	; 89
     742:	f0 e0       	ldi	r31, 0x00	; 0
     744:	80 81       	ld	r24, Z
     746:	8f 7e       	andi	r24, 0xEF	; 239
     748:	8c 93       	st	X, r24
     74a:	31 c0       	rjmp	.+98     	; 0x7ae <TMR_u8DisableTMRInterrupt+0x16a>
							case TMR_U8_TMR_1_CHANNEL_B: CLR_BIT( TMR_U8_TIMSK_REG, TMR_U8_OCIE1B_BIT ); break;
     74c:	a9 e5       	ldi	r26, 0x59	; 89
     74e:	b0 e0       	ldi	r27, 0x00	; 0
     750:	e9 e5       	ldi	r30, 0x59	; 89
     752:	f0 e0       	ldi	r31, 0x00	; 0
     754:	80 81       	ld	r24, Z
     756:	87 7f       	andi	r24, 0xF7	; 247
     758:	8c 93       	st	X, r24
     75a:	29 c0       	rjmp	.+82     	; 0x7ae <TMR_u8DisableTMRInterrupt+0x16a>
						}
						break;
					case TMR_U8_OVF_INTERRUPT: CLR_BIT( TMR_U8_TIMSK_REG, TMR_U8_TOIE1_BIT  ); break;
     75c:	a9 e5       	ldi	r26, 0x59	; 89
     75e:	b0 e0       	ldi	r27, 0x00	; 0
     760:	e9 e5       	ldi	r30, 0x59	; 89
     762:	f0 e0       	ldi	r31, 0x00	; 0
     764:	80 81       	ld	r24, Z
     766:	8b 7f       	andi	r24, 0xFB	; 251
     768:	8c 93       	st	X, r24
     76a:	21 c0       	rjmp	.+66     	; 0x7ae <TMR_u8DisableTMRInterrupt+0x16a>
				}
				break;

			case TMR_U8_TMR2:
				/* Check 1.1.3: Required InterruptType */
				switch ( Cpy_u8InterruptType )
     76c:	8c 81       	ldd	r24, Y+4	; 0x04
     76e:	28 2f       	mov	r18, r24
     770:	30 e0       	ldi	r19, 0x00	; 0
     772:	3e 83       	std	Y+6, r19	; 0x06
     774:	2d 83       	std	Y+5, r18	; 0x05
     776:	8d 81       	ldd	r24, Y+5	; 0x05
     778:	9e 81       	ldd	r25, Y+6	; 0x06
     77a:	81 30       	cpi	r24, 0x01	; 1
     77c:	91 05       	cpc	r25, r1
     77e:	31 f0       	breq	.+12     	; 0x78c <TMR_u8DisableTMRInterrupt+0x148>
     780:	2d 81       	ldd	r18, Y+5	; 0x05
     782:	3e 81       	ldd	r19, Y+6	; 0x06
     784:	22 30       	cpi	r18, 0x02	; 2
     786:	31 05       	cpc	r19, r1
     788:	49 f0       	breq	.+18     	; 0x79c <TMR_u8DisableTMRInterrupt+0x158>
     78a:	11 c0       	rjmp	.+34     	; 0x7ae <TMR_u8DisableTMRInterrupt+0x16a>
				{
					case TMR_U8_COMP_INTERRUPT: CLR_BIT( TMR_U8_TIMSK_REG, TMR_U8_OCIE2_BIT ); break;
     78c:	a9 e5       	ldi	r26, 0x59	; 89
     78e:	b0 e0       	ldi	r27, 0x00	; 0
     790:	e9 e5       	ldi	r30, 0x59	; 89
     792:	f0 e0       	ldi	r31, 0x00	; 0
     794:	80 81       	ld	r24, Z
     796:	8f 77       	andi	r24, 0x7F	; 127
     798:	8c 93       	st	X, r24
     79a:	09 c0       	rjmp	.+18     	; 0x7ae <TMR_u8DisableTMRInterrupt+0x16a>
					case TMR_U8_OVF_INTERRUPT : CLR_BIT( TMR_U8_TIMSK_REG, TMR_U8_TOIE2_BIT ); break;
     79c:	a9 e5       	ldi	r26, 0x59	; 89
     79e:	b0 e0       	ldi	r27, 0x00	; 0
     7a0:	e9 e5       	ldi	r30, 0x59	; 89
     7a2:	f0 e0       	ldi	r31, 0x00	; 0
     7a4:	80 81       	ld	r24, Z
     7a6:	8f 7b       	andi	r24, 0xBF	; 191
     7a8:	8c 93       	st	X, r24
     7aa:	01 c0       	rjmp	.+2      	; 0x7ae <TMR_u8DisableTMRInterrupt+0x16a>
	}
	/* Check 2: TimertId, ChannelId or Interrupt Type is not in the valid range */
	else
	{
		/* Update error state = NOK, wrong TimertId, ChannelId or InterruptType! */
		Loc_u8ErrorState = STD_TYPES_NOK;
     7ac:	19 82       	std	Y+1, r1	; 0x01
	}

	return Loc_u8ErrorState;
     7ae:	89 81       	ldd	r24, Y+1	; 0x01
}
     7b0:	2e 96       	adiw	r28, 0x0e	; 14
     7b2:	0f b6       	in	r0, 0x3f	; 63
     7b4:	f8 94       	cli
     7b6:	de bf       	out	0x3e, r29	; 62
     7b8:	0f be       	out	0x3f, r0	; 63
     7ba:	cd bf       	out	0x3d, r28	; 61
     7bc:	cf 91       	pop	r28
     7be:	df 91       	pop	r29
     7c0:	08 95       	ret

000007c2 <TMR_u8GetNumberOfOVF>:
 Input: u8 TimerId and Pointer to u16 NumberOfOVF
 Output: u8 Error or No Error
 Description: Function to Get number of OVFs updated by ISR in TMR peripheral.
*/
u8 TMR_u8GetNumberOfOVF		 ( u8 Cpy_u8TimerId, u16 *Cpy_pu16NumberOfOVF )
{
     7c2:	df 93       	push	r29
     7c4:	cf 93       	push	r28
     7c6:	00 d0       	rcall	.+0      	; 0x7c8 <TMR_u8GetNumberOfOVF+0x6>
     7c8:	00 d0       	rcall	.+0      	; 0x7ca <TMR_u8GetNumberOfOVF+0x8>
     7ca:	00 d0       	rcall	.+0      	; 0x7cc <TMR_u8GetNumberOfOVF+0xa>
     7cc:	cd b7       	in	r28, 0x3d	; 61
     7ce:	de b7       	in	r29, 0x3e	; 62
     7d0:	8a 83       	std	Y+2, r24	; 0x02
     7d2:	7c 83       	std	Y+4, r23	; 0x04
     7d4:	6b 83       	std	Y+3, r22	; 0x03
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
     7d6:	81 e0       	ldi	r24, 0x01	; 1
     7d8:	89 83       	std	Y+1, r24	; 0x01

	/* Check 1: TimertId is in the valid range, and Pointer is not equal to NULL */
	if ( ( Cpy_u8TimerId <= TMR_U8_TMR2 ) && ( Cpy_pu16NumberOfOVF != NULL ) )
     7da:	8a 81       	ldd	r24, Y+2	; 0x02
     7dc:	83 30       	cpi	r24, 0x03	; 3
     7de:	90 f5       	brcc	.+100    	; 0x844 <TMR_u8GetNumberOfOVF+0x82>
     7e0:	8b 81       	ldd	r24, Y+3	; 0x03
     7e2:	9c 81       	ldd	r25, Y+4	; 0x04
     7e4:	00 97       	sbiw	r24, 0x00	; 0
     7e6:	71 f1       	breq	.+92     	; 0x844 <TMR_u8GetNumberOfOVF+0x82>
	{
		/* Check 1.1: Required TimerId */
		switch ( Cpy_u8TimerId )
     7e8:	8a 81       	ldd	r24, Y+2	; 0x02
     7ea:	28 2f       	mov	r18, r24
     7ec:	30 e0       	ldi	r19, 0x00	; 0
     7ee:	3e 83       	std	Y+6, r19	; 0x06
     7f0:	2d 83       	std	Y+5, r18	; 0x05
     7f2:	8d 81       	ldd	r24, Y+5	; 0x05
     7f4:	9e 81       	ldd	r25, Y+6	; 0x06
     7f6:	81 30       	cpi	r24, 0x01	; 1
     7f8:	91 05       	cpc	r25, r1
     7fa:	91 f0       	breq	.+36     	; 0x820 <TMR_u8GetNumberOfOVF+0x5e>
     7fc:	2d 81       	ldd	r18, Y+5	; 0x05
     7fe:	3e 81       	ldd	r19, Y+6	; 0x06
     800:	22 30       	cpi	r18, 0x02	; 2
     802:	31 05       	cpc	r19, r1
     804:	b1 f0       	breq	.+44     	; 0x832 <TMR_u8GetNumberOfOVF+0x70>
     806:	8d 81       	ldd	r24, Y+5	; 0x05
     808:	9e 81       	ldd	r25, Y+6	; 0x06
     80a:	00 97       	sbiw	r24, 0x00	; 0
     80c:	e1 f4       	brne	.+56     	; 0x846 <TMR_u8GetNumberOfOVF+0x84>
		{
			case TMR_U8_TMR0: *Cpy_pu16NumberOfOVF = Glb_Au16OVFCounters[TMR_U8_TMR0]; break;
     80e:	80 91 6e 00 	lds	r24, 0x006E
     812:	90 91 6f 00 	lds	r25, 0x006F
     816:	eb 81       	ldd	r30, Y+3	; 0x03
     818:	fc 81       	ldd	r31, Y+4	; 0x04
     81a:	91 83       	std	Z+1, r25	; 0x01
     81c:	80 83       	st	Z, r24
     81e:	13 c0       	rjmp	.+38     	; 0x846 <TMR_u8GetNumberOfOVF+0x84>
			case TMR_U8_TMR1: *Cpy_pu16NumberOfOVF = Glb_Au16OVFCounters[TMR_U8_TMR1]; break;
     820:	80 91 70 00 	lds	r24, 0x0070
     824:	90 91 71 00 	lds	r25, 0x0071
     828:	eb 81       	ldd	r30, Y+3	; 0x03
     82a:	fc 81       	ldd	r31, Y+4	; 0x04
     82c:	91 83       	std	Z+1, r25	; 0x01
     82e:	80 83       	st	Z, r24
     830:	0a c0       	rjmp	.+20     	; 0x846 <TMR_u8GetNumberOfOVF+0x84>
			case TMR_U8_TMR2: *Cpy_pu16NumberOfOVF = Glb_Au16OVFCounters[TMR_U8_TMR2]; break;
     832:	80 91 72 00 	lds	r24, 0x0072
     836:	90 91 73 00 	lds	r25, 0x0073
     83a:	eb 81       	ldd	r30, Y+3	; 0x03
     83c:	fc 81       	ldd	r31, Y+4	; 0x04
     83e:	91 83       	std	Z+1, r25	; 0x01
     840:	80 83       	st	Z, r24
     842:	01 c0       	rjmp	.+2      	; 0x846 <TMR_u8GetNumberOfOVF+0x84>
	}
	/* Check 2: TimertId is not in the valid range, or Pointer is equal to NULL */
	else
	{
		/* Update error state = NOK, wrong TimertId or Pointer is NULL! */
		Loc_u8ErrorState = STD_TYPES_NOK;
     844:	19 82       	std	Y+1, r1	; 0x01
	}

	return Loc_u8ErrorState;
     846:	89 81       	ldd	r24, Y+1	; 0x01
}
     848:	26 96       	adiw	r28, 0x06	; 6
     84a:	0f b6       	in	r0, 0x3f	; 63
     84c:	f8 94       	cli
     84e:	de bf       	out	0x3e, r29	; 62
     850:	0f be       	out	0x3f, r0	; 63
     852:	cd bf       	out	0x3d, r28	; 61
     854:	cf 91       	pop	r28
     856:	df 91       	pop	r29
     858:	08 95       	ret

0000085a <TMR_u8GetOVFFlagStatus>:
 Input: u8 TimerId and Pointer to u8 FlagStatus
 Output: u8 Error or No Error
 Description: Function to Get status of the OVF Flag in TMR peripheral.
*/
u8 TMR_u8GetOVFFlagStatus    ( u8 Cpy_u8TimerId, u8 *Cpy_pu8FlagStatus )
{
     85a:	df 93       	push	r29
     85c:	cf 93       	push	r28
     85e:	00 d0       	rcall	.+0      	; 0x860 <__stack+0x1>
     860:	00 d0       	rcall	.+0      	; 0x862 <__stack+0x3>
     862:	00 d0       	rcall	.+0      	; 0x864 <__stack+0x5>
     864:	cd b7       	in	r28, 0x3d	; 61
     866:	de b7       	in	r29, 0x3e	; 62
     868:	8a 83       	std	Y+2, r24	; 0x02
     86a:	7c 83       	std	Y+4, r23	; 0x04
     86c:	6b 83       	std	Y+3, r22	; 0x03
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
     86e:	81 e0       	ldi	r24, 0x01	; 1
     870:	89 83       	std	Y+1, r24	; 0x01

	/* Check 1: TimertId is in the valid range, and Pointer is not equal to NULL */
	if ( ( Cpy_u8TimerId <= TMR_U8_TMR2 ) && ( Cpy_pu8FlagStatus != NULL ) )
     872:	8a 81       	ldd	r24, Y+2	; 0x02
     874:	83 30       	cpi	r24, 0x03	; 3
     876:	08 f0       	brcs	.+2      	; 0x87a <__stack+0x1b>
     878:	41 c0       	rjmp	.+130    	; 0x8fc <__stack+0x9d>
     87a:	8b 81       	ldd	r24, Y+3	; 0x03
     87c:	9c 81       	ldd	r25, Y+4	; 0x04
     87e:	00 97       	sbiw	r24, 0x00	; 0
     880:	e9 f1       	breq	.+122    	; 0x8fc <__stack+0x9d>
	{
		/* Check 1.1: Required TimerId */
		switch ( Cpy_u8TimerId )
     882:	8a 81       	ldd	r24, Y+2	; 0x02
     884:	28 2f       	mov	r18, r24
     886:	30 e0       	ldi	r19, 0x00	; 0
     888:	3e 83       	std	Y+6, r19	; 0x06
     88a:	2d 83       	std	Y+5, r18	; 0x05
     88c:	8d 81       	ldd	r24, Y+5	; 0x05
     88e:	9e 81       	ldd	r25, Y+6	; 0x06
     890:	81 30       	cpi	r24, 0x01	; 1
     892:	91 05       	cpc	r25, r1
     894:	89 f0       	breq	.+34     	; 0x8b8 <__stack+0x59>
     896:	2d 81       	ldd	r18, Y+5	; 0x05
     898:	3e 81       	ldd	r19, Y+6	; 0x06
     89a:	22 30       	cpi	r18, 0x02	; 2
     89c:	31 05       	cpc	r19, r1
     89e:	d9 f0       	breq	.+54     	; 0x8d6 <__stack+0x77>
     8a0:	8d 81       	ldd	r24, Y+5	; 0x05
     8a2:	9e 81       	ldd	r25, Y+6	; 0x06
     8a4:	00 97       	sbiw	r24, 0x00	; 0
     8a6:	59 f5       	brne	.+86     	; 0x8fe <__stack+0x9f>
		{
			case TMR_U8_TMR0: *Cpy_pu8FlagStatus = GET_BIT( TMR_U8_TIFR_REG, TMR_U8_TOV0_BIT ); break;
     8a8:	e8 e5       	ldi	r30, 0x58	; 88
     8aa:	f0 e0       	ldi	r31, 0x00	; 0
     8ac:	80 81       	ld	r24, Z
     8ae:	81 70       	andi	r24, 0x01	; 1
     8b0:	eb 81       	ldd	r30, Y+3	; 0x03
     8b2:	fc 81       	ldd	r31, Y+4	; 0x04
     8b4:	80 83       	st	Z, r24
     8b6:	23 c0       	rjmp	.+70     	; 0x8fe <__stack+0x9f>
			case TMR_U8_TMR1: *Cpy_pu8FlagStatus = GET_BIT( TMR_U8_TIFR_REG, TMR_U8_TOV1_BIT ); break;
     8b8:	e8 e5       	ldi	r30, 0x58	; 88
     8ba:	f0 e0       	ldi	r31, 0x00	; 0
     8bc:	80 81       	ld	r24, Z
     8be:	88 2f       	mov	r24, r24
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	84 70       	andi	r24, 0x04	; 4
     8c4:	90 70       	andi	r25, 0x00	; 0
     8c6:	95 95       	asr	r25
     8c8:	87 95       	ror	r24
     8ca:	95 95       	asr	r25
     8cc:	87 95       	ror	r24
     8ce:	eb 81       	ldd	r30, Y+3	; 0x03
     8d0:	fc 81       	ldd	r31, Y+4	; 0x04
     8d2:	80 83       	st	Z, r24
     8d4:	14 c0       	rjmp	.+40     	; 0x8fe <__stack+0x9f>
			case TMR_U8_TMR2: *Cpy_pu8FlagStatus = GET_BIT( TMR_U8_TIFR_REG, TMR_U8_TOV2_BIT ); break;
     8d6:	e8 e5       	ldi	r30, 0x58	; 88
     8d8:	f0 e0       	ldi	r31, 0x00	; 0
     8da:	80 81       	ld	r24, Z
     8dc:	88 2f       	mov	r24, r24
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	80 74       	andi	r24, 0x40	; 64
     8e2:	90 70       	andi	r25, 0x00	; 0
     8e4:	08 2e       	mov	r0, r24
     8e6:	89 2f       	mov	r24, r25
     8e8:	00 0c       	add	r0, r0
     8ea:	88 1f       	adc	r24, r24
     8ec:	99 0b       	sbc	r25, r25
     8ee:	00 0c       	add	r0, r0
     8f0:	88 1f       	adc	r24, r24
     8f2:	99 1f       	adc	r25, r25
     8f4:	eb 81       	ldd	r30, Y+3	; 0x03
     8f6:	fc 81       	ldd	r31, Y+4	; 0x04
     8f8:	80 83       	st	Z, r24
     8fa:	01 c0       	rjmp	.+2      	; 0x8fe <__stack+0x9f>
	}
	/* Check 2: TimertId is not in the valid range, or Pointer is equal to NULL */
	else
	{
		/* Update error state = NOK, wrong TimertId or Pointer is NULL! */
		Loc_u8ErrorState = STD_TYPES_NOK;
     8fc:	19 82       	std	Y+1, r1	; 0x01
	}

	return Loc_u8ErrorState;
     8fe:	89 81       	ldd	r24, Y+1	; 0x01
}
     900:	26 96       	adiw	r28, 0x06	; 6
     902:	0f b6       	in	r0, 0x3f	; 63
     904:	f8 94       	cli
     906:	de bf       	out	0x3e, r29	; 62
     908:	0f be       	out	0x3f, r0	; 63
     90a:	cd bf       	out	0x3d, r28	; 61
     90c:	cf 91       	pop	r28
     90e:	df 91       	pop	r29
     910:	08 95       	ret

00000912 <TMR_u8ClearOVFFlag>:
 Input: u8 TimerId
 Output: u8 Error or No Error
 Description: Function to Clear the OVF Flag in TMR peripheral.
*/
u8 TMR_u8ClearOVFFlag	     ( u8 Cpy_u8TimerId )
{
     912:	df 93       	push	r29
     914:	cf 93       	push	r28
     916:	00 d0       	rcall	.+0      	; 0x918 <TMR_u8ClearOVFFlag+0x6>
     918:	00 d0       	rcall	.+0      	; 0x91a <TMR_u8ClearOVFFlag+0x8>
     91a:	cd b7       	in	r28, 0x3d	; 61
     91c:	de b7       	in	r29, 0x3e	; 62
     91e:	8a 83       	std	Y+2, r24	; 0x02
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
     920:	81 e0       	ldi	r24, 0x01	; 1
     922:	89 83       	std	Y+1, r24	; 0x01

	/* Check 1: TimertId is in the valid range */
	if ( Cpy_u8TimerId <= TMR_U8_TMR2 )
     924:	8a 81       	ldd	r24, Y+2	; 0x02
     926:	83 30       	cpi	r24, 0x03	; 3
     928:	58 f5       	brcc	.+86     	; 0x980 <TMR_u8ClearOVFFlag+0x6e>
	{
		/* Check 1.1: Required TimerId */
		switch ( Cpy_u8TimerId )
     92a:	8a 81       	ldd	r24, Y+2	; 0x02
     92c:	28 2f       	mov	r18, r24
     92e:	30 e0       	ldi	r19, 0x00	; 0
     930:	3c 83       	std	Y+4, r19	; 0x04
     932:	2b 83       	std	Y+3, r18	; 0x03
     934:	8b 81       	ldd	r24, Y+3	; 0x03
     936:	9c 81       	ldd	r25, Y+4	; 0x04
     938:	81 30       	cpi	r24, 0x01	; 1
     93a:	91 05       	cpc	r25, r1
     93c:	89 f0       	breq	.+34     	; 0x960 <TMR_u8ClearOVFFlag+0x4e>
     93e:	2b 81       	ldd	r18, Y+3	; 0x03
     940:	3c 81       	ldd	r19, Y+4	; 0x04
     942:	22 30       	cpi	r18, 0x02	; 2
     944:	31 05       	cpc	r19, r1
     946:	a1 f0       	breq	.+40     	; 0x970 <TMR_u8ClearOVFFlag+0x5e>
     948:	8b 81       	ldd	r24, Y+3	; 0x03
     94a:	9c 81       	ldd	r25, Y+4	; 0x04
     94c:	00 97       	sbiw	r24, 0x00	; 0
     94e:	c9 f4       	brne	.+50     	; 0x982 <TMR_u8ClearOVFFlag+0x70>
		{
			case TMR_U8_TMR0: SET_BIT( TMR_U8_TIFR_REG, TMR_U8_TOV0_BIT ); break;
     950:	a8 e5       	ldi	r26, 0x58	; 88
     952:	b0 e0       	ldi	r27, 0x00	; 0
     954:	e8 e5       	ldi	r30, 0x58	; 88
     956:	f0 e0       	ldi	r31, 0x00	; 0
     958:	80 81       	ld	r24, Z
     95a:	81 60       	ori	r24, 0x01	; 1
     95c:	8c 93       	st	X, r24
     95e:	11 c0       	rjmp	.+34     	; 0x982 <TMR_u8ClearOVFFlag+0x70>
			case TMR_U8_TMR1: SET_BIT( TMR_U8_TIFR_REG, TMR_U8_TOV1_BIT ); break;
     960:	a8 e5       	ldi	r26, 0x58	; 88
     962:	b0 e0       	ldi	r27, 0x00	; 0
     964:	e8 e5       	ldi	r30, 0x58	; 88
     966:	f0 e0       	ldi	r31, 0x00	; 0
     968:	80 81       	ld	r24, Z
     96a:	84 60       	ori	r24, 0x04	; 4
     96c:	8c 93       	st	X, r24
     96e:	09 c0       	rjmp	.+18     	; 0x982 <TMR_u8ClearOVFFlag+0x70>
			case TMR_U8_TMR2: SET_BIT( TMR_U8_TIFR_REG, TMR_U8_TOV2_BIT ); break;
     970:	a8 e5       	ldi	r26, 0x58	; 88
     972:	b0 e0       	ldi	r27, 0x00	; 0
     974:	e8 e5       	ldi	r30, 0x58	; 88
     976:	f0 e0       	ldi	r31, 0x00	; 0
     978:	80 81       	ld	r24, Z
     97a:	80 64       	ori	r24, 0x40	; 64
     97c:	8c 93       	st	X, r24
     97e:	01 c0       	rjmp	.+2      	; 0x982 <TMR_u8ClearOVFFlag+0x70>
	}
	/* Check 2: TimertId is not in the valid range, or Pointer is equal to NULL */
	else
	{
		/* Update error state = NOK, wrong TimertId! */
		Loc_u8ErrorState = STD_TYPES_NOK;
     980:	19 82       	std	Y+1, r1	; 0x01
	}

	return Loc_u8ErrorState;
     982:	89 81       	ldd	r24, Y+1	; 0x01
}
     984:	0f 90       	pop	r0
     986:	0f 90       	pop	r0
     988:	0f 90       	pop	r0
     98a:	0f 90       	pop	r0
     98c:	cf 91       	pop	r28
     98e:	df 91       	pop	r29
     990:	08 95       	ret

00000992 <TMR_u8OVFSetCallBack>:
 Output: u8 Error or No Error
 Description: Function to receive an address of a function ( in APP Layer ) to be called back in ISR function of the passed Timer ( TimerId ),
  	  	  	  the address is passed through a pointer to function ( OVFInterruptAction ), and then pass this address to ISR function.
*/
u8 TMR_u8OVFSetCallBack	     ( u8 Cpy_u8TimerId, void ( *Cpy_pfOVFInterruptAction ) ( void ) )
{
     992:	df 93       	push	r29
     994:	cf 93       	push	r28
     996:	00 d0       	rcall	.+0      	; 0x998 <TMR_u8OVFSetCallBack+0x6>
     998:	00 d0       	rcall	.+0      	; 0x99a <TMR_u8OVFSetCallBack+0x8>
     99a:	cd b7       	in	r28, 0x3d	; 61
     99c:	de b7       	in	r29, 0x3e	; 62
     99e:	8a 83       	std	Y+2, r24	; 0x02
     9a0:	7c 83       	std	Y+4, r23	; 0x04
     9a2:	6b 83       	std	Y+3, r22	; 0x03
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
     9a4:	81 e0       	ldi	r24, 0x01	; 1
     9a6:	89 83       	std	Y+1, r24	; 0x01

	/* Check 1: TimertId is in the valid range, and Pointer to Function is not equal to NULL */
	if ( ( Cpy_u8TimerId <= TMR_U8_TMR2 ) && ( Cpy_pfOVFInterruptAction != NULL ) )
     9a8:	8a 81       	ldd	r24, Y+2	; 0x02
     9aa:	83 30       	cpi	r24, 0x03	; 3
     9ac:	88 f4       	brcc	.+34     	; 0x9d0 <TMR_u8OVFSetCallBack+0x3e>
     9ae:	8b 81       	ldd	r24, Y+3	; 0x03
     9b0:	9c 81       	ldd	r25, Y+4	; 0x04
     9b2:	00 97       	sbiw	r24, 0x00	; 0
     9b4:	69 f0       	breq	.+26     	; 0x9d0 <TMR_u8OVFSetCallBack+0x3e>
	{
		/* Store the passed address of function ( in APP Layer ) through pointer to function ( OVFInterruptAction ) into Global Array of Pointers to Functions ( OVFInterruptsAction ) in the passed index ( TimerId ). */
		Glb_ApfOVFInterruptsAction[Cpy_u8TimerId] = Cpy_pfOVFInterruptAction;
     9b6:	8a 81       	ldd	r24, Y+2	; 0x02
     9b8:	88 2f       	mov	r24, r24
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	88 0f       	add	r24, r24
     9be:	99 1f       	adc	r25, r25
     9c0:	fc 01       	movw	r30, r24
     9c2:	ee 59       	subi	r30, 0x9E	; 158
     9c4:	ff 4f       	sbci	r31, 0xFF	; 255
     9c6:	8b 81       	ldd	r24, Y+3	; 0x03
     9c8:	9c 81       	ldd	r25, Y+4	; 0x04
     9ca:	91 83       	std	Z+1, r25	; 0x01
     9cc:	80 83       	st	Z, r24
     9ce:	01 c0       	rjmp	.+2      	; 0x9d2 <TMR_u8OVFSetCallBack+0x40>
	}
	/* Check 2: TimertId is not in the valid range, or Pointer to Function is equal to NULL */
	else
	{
		/* Update error state = NOK, wrong TimertId or Pointer to Function is NULL! */
		Loc_u8ErrorState = STD_TYPES_NOK;
     9d0:	19 82       	std	Y+1, r1	; 0x01
	}

	return Loc_u8ErrorState;
     9d2:	89 81       	ldd	r24, Y+1	; 0x01
}
     9d4:	0f 90       	pop	r0
     9d6:	0f 90       	pop	r0
     9d8:	0f 90       	pop	r0
     9da:	0f 90       	pop	r0
     9dc:	cf 91       	pop	r28
     9de:	df 91       	pop	r29
     9e0:	08 95       	ret

000009e2 <TMR_u8COMPSetCallBack>:
 Output: u8 Error or No Error
 Description: Function to receive an address of a function ( in APP Layer ) to be called back in ISR function of the passed Timer ( TimerId ),
 	 	 	  the address is passed through a pointer to function ( COMPInterruptAction ), and then pass this address to ISR function.
*/
u8 TMR_u8COMPSetCallBack	 ( u8 Cpy_u8TimerId, u8 Cpy_u8Timer1ChannelId, void ( *Cpy_pfCOMPInterruptAction ) ( void ) )
{
     9e2:	df 93       	push	r29
     9e4:	cf 93       	push	r28
     9e6:	cd b7       	in	r28, 0x3d	; 61
     9e8:	de b7       	in	r29, 0x3e	; 62
     9ea:	27 97       	sbiw	r28, 0x07	; 7
     9ec:	0f b6       	in	r0, 0x3f	; 63
     9ee:	f8 94       	cli
     9f0:	de bf       	out	0x3e, r29	; 62
     9f2:	0f be       	out	0x3f, r0	; 63
     9f4:	cd bf       	out	0x3d, r28	; 61
     9f6:	8a 83       	std	Y+2, r24	; 0x02
     9f8:	6b 83       	std	Y+3, r22	; 0x03
     9fa:	5d 83       	std	Y+5, r21	; 0x05
     9fc:	4c 83       	std	Y+4, r20	; 0x04
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
     9fe:	81 e0       	ldi	r24, 0x01	; 1
     a00:	89 83       	std	Y+1, r24	; 0x01

	/* Check 1: TimertId and ChannelId are in the valid range, and Pointer to Function is not equal to NULL */
	if ( ( Cpy_u8TimerId <= TMR_U8_TMR2 ) && ( Cpy_u8Timer1ChannelId <= TMR_U8_TMR_1_CHANNEL_B ) && ( Cpy_pfCOMPInterruptAction != NULL ) )
     a02:	8a 81       	ldd	r24, Y+2	; 0x02
     a04:	83 30       	cpi	r24, 0x03	; 3
     a06:	58 f5       	brcc	.+86     	; 0xa5e <TMR_u8COMPSetCallBack+0x7c>
     a08:	8b 81       	ldd	r24, Y+3	; 0x03
     a0a:	83 30       	cpi	r24, 0x03	; 3
     a0c:	40 f5       	brcc	.+80     	; 0xa5e <TMR_u8COMPSetCallBack+0x7c>
     a0e:	8c 81       	ldd	r24, Y+4	; 0x04
     a10:	9d 81       	ldd	r25, Y+5	; 0x05
     a12:	00 97       	sbiw	r24, 0x00	; 0
     a14:	21 f1       	breq	.+72     	; 0xa5e <TMR_u8COMPSetCallBack+0x7c>
	{
		/* Check 1.1: Required Timer1ChannelId */
		switch ( Cpy_u8Timer1ChannelId )
     a16:	8b 81       	ldd	r24, Y+3	; 0x03
     a18:	28 2f       	mov	r18, r24
     a1a:	30 e0       	ldi	r19, 0x00	; 0
     a1c:	3f 83       	std	Y+7, r19	; 0x07
     a1e:	2e 83       	std	Y+6, r18	; 0x06
     a20:	8e 81       	ldd	r24, Y+6	; 0x06
     a22:	9f 81       	ldd	r25, Y+7	; 0x07
     a24:	81 30       	cpi	r24, 0x01	; 1
     a26:	91 05       	cpc	r25, r1
     a28:	31 f0       	breq	.+12     	; 0xa36 <TMR_u8COMPSetCallBack+0x54>
     a2a:	2e 81       	ldd	r18, Y+6	; 0x06
     a2c:	3f 81       	ldd	r19, Y+7	; 0x07
     a2e:	22 30       	cpi	r18, 0x02	; 2
     a30:	31 05       	cpc	r19, r1
     a32:	29 f0       	breq	.+10     	; 0xa3e <TMR_u8COMPSetCallBack+0x5c>
     a34:	07 c0       	rjmp	.+14     	; 0xa44 <TMR_u8COMPSetCallBack+0x62>
		{
			case TMR_U8_NO_CHANNEL	   : 										 break;
			case TMR_U8_TMR_1_CHANNEL_A: Glb_u8Timer1COMPAFlag = TMR_U8_FLAG_UP; break;
     a36:	81 e0       	ldi	r24, 0x01	; 1
     a38:	80 93 74 00 	sts	0x0074, r24
     a3c:	03 c0       	rjmp	.+6      	; 0xa44 <TMR_u8COMPSetCallBack+0x62>
			case TMR_U8_TMR_1_CHANNEL_B: Glb_u8Timer1COMPBFlag = TMR_U8_FLAG_UP; break;
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	80 93 75 00 	sts	0x0075, r24
		}

		/* Store the passed address of function ( in APP Layer ) through pointer to function ( COMPInterruptAction ) into Global Array of Pointers to Functions ( COMPInterruptsAction ) in the passed index ( TimerId ). */
		Glb_ApfCOMPInterruptsAction[Cpy_u8TimerId] = Cpy_pfCOMPInterruptAction;
     a44:	8a 81       	ldd	r24, Y+2	; 0x02
     a46:	88 2f       	mov	r24, r24
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	88 0f       	add	r24, r24
     a4c:	99 1f       	adc	r25, r25
     a4e:	fc 01       	movw	r30, r24
     a50:	e8 59       	subi	r30, 0x98	; 152
     a52:	ff 4f       	sbci	r31, 0xFF	; 255
     a54:	8c 81       	ldd	r24, Y+4	; 0x04
     a56:	9d 81       	ldd	r25, Y+5	; 0x05
     a58:	91 83       	std	Z+1, r25	; 0x01
     a5a:	80 83       	st	Z, r24
     a5c:	01 c0       	rjmp	.+2      	; 0xa60 <TMR_u8COMPSetCallBack+0x7e>
	}
	/* Check 2: TimertId or ChannelId is not in the valid range, or Pointer to Function is equal to NULL */
	else
	{
		/* Update error state = NOK, wrong TimertId, ChannelId, or Pointer to Function is NULL! */
		Loc_u8ErrorState = STD_TYPES_NOK;
     a5e:	19 82       	std	Y+1, r1	; 0x01
	}

	return Loc_u8ErrorState;
     a60:	89 81       	ldd	r24, Y+1	; 0x01
}
     a62:	27 96       	adiw	r28, 0x07	; 7
     a64:	0f b6       	in	r0, 0x3f	; 63
     a66:	f8 94       	cli
     a68:	de bf       	out	0x3e, r29	; 62
     a6a:	0f be       	out	0x3f, r0	; 63
     a6c:	cd bf       	out	0x3d, r28	; 61
     a6e:	cf 91       	pop	r28
     a70:	df 91       	pop	r29
     a72:	08 95       	ret

00000a74 <TMR_u8GetCounterValue>:
 Input: u8 TimerId and Pointer to u16 CounterValue
 Output: u8 Error or No Error
 Description: Function to Get Counter Value from TCNTn Register.
*/
u8 TMR_u8GetCounterValue     ( u8 Cpy_u8TimerId, u16 *Cpy_pu16CounterValue )
{
     a74:	df 93       	push	r29
     a76:	cf 93       	push	r28
     a78:	00 d0       	rcall	.+0      	; 0xa7a <TMR_u8GetCounterValue+0x6>
     a7a:	00 d0       	rcall	.+0      	; 0xa7c <TMR_u8GetCounterValue+0x8>
     a7c:	00 d0       	rcall	.+0      	; 0xa7e <TMR_u8GetCounterValue+0xa>
     a7e:	cd b7       	in	r28, 0x3d	; 61
     a80:	de b7       	in	r29, 0x3e	; 62
     a82:	8a 83       	std	Y+2, r24	; 0x02
     a84:	7c 83       	std	Y+4, r23	; 0x04
     a86:	6b 83       	std	Y+3, r22	; 0x03
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
     a88:	81 e0       	ldi	r24, 0x01	; 1
     a8a:	89 83       	std	Y+1, r24	; 0x01

	/* Check 1: TimertId is in the valid range, and Pointer is not equal to NULL  */
	if ( ( Cpy_u8TimerId <= TMR_U8_TMR2 ) && ( Cpy_pu16CounterValue != NULL ) )
     a8c:	8a 81       	ldd	r24, Y+2	; 0x02
     a8e:	83 30       	cpi	r24, 0x03	; 3
     a90:	a0 f5       	brcc	.+104    	; 0xafa <TMR_u8GetCounterValue+0x86>
     a92:	8b 81       	ldd	r24, Y+3	; 0x03
     a94:	9c 81       	ldd	r25, Y+4	; 0x04
     a96:	00 97       	sbiw	r24, 0x00	; 0
     a98:	81 f1       	breq	.+96     	; 0xafa <TMR_u8GetCounterValue+0x86>
	{
		/* Check 1.1: Required TimerId */
		switch ( Cpy_u8TimerId )
     a9a:	8a 81       	ldd	r24, Y+2	; 0x02
     a9c:	28 2f       	mov	r18, r24
     a9e:	30 e0       	ldi	r19, 0x00	; 0
     aa0:	3e 83       	std	Y+6, r19	; 0x06
     aa2:	2d 83       	std	Y+5, r18	; 0x05
     aa4:	8d 81       	ldd	r24, Y+5	; 0x05
     aa6:	9e 81       	ldd	r25, Y+6	; 0x06
     aa8:	81 30       	cpi	r24, 0x01	; 1
     aaa:	91 05       	cpc	r25, r1
     aac:	99 f0       	breq	.+38     	; 0xad4 <TMR_u8GetCounterValue+0x60>
     aae:	2d 81       	ldd	r18, Y+5	; 0x05
     ab0:	3e 81       	ldd	r19, Y+6	; 0x06
     ab2:	22 30       	cpi	r18, 0x02	; 2
     ab4:	31 05       	cpc	r19, r1
     ab6:	b9 f0       	breq	.+46     	; 0xae6 <TMR_u8GetCounterValue+0x72>
     ab8:	8d 81       	ldd	r24, Y+5	; 0x05
     aba:	9e 81       	ldd	r25, Y+6	; 0x06
     abc:	00 97       	sbiw	r24, 0x00	; 0
     abe:	f1 f4       	brne	.+60     	; 0xafc <TMR_u8GetCounterValue+0x88>
		{
			case TMR_U8_TMR0: *Cpy_pu16CounterValue = ( u16 ) TMR_U8_TCNT0_REG; break;
     ac0:	e2 e5       	ldi	r30, 0x52	; 82
     ac2:	f0 e0       	ldi	r31, 0x00	; 0
     ac4:	80 81       	ld	r24, Z
     ac6:	88 2f       	mov	r24, r24
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	eb 81       	ldd	r30, Y+3	; 0x03
     acc:	fc 81       	ldd	r31, Y+4	; 0x04
     ace:	91 83       	std	Z+1, r25	; 0x01
     ad0:	80 83       	st	Z, r24
     ad2:	14 c0       	rjmp	.+40     	; 0xafc <TMR_u8GetCounterValue+0x88>
			case TMR_U8_TMR1: *Cpy_pu16CounterValue = TMR_U16_TCNT1_REG; 		break;
     ad4:	ec e4       	ldi	r30, 0x4C	; 76
     ad6:	f0 e0       	ldi	r31, 0x00	; 0
     ad8:	80 81       	ld	r24, Z
     ada:	91 81       	ldd	r25, Z+1	; 0x01
     adc:	eb 81       	ldd	r30, Y+3	; 0x03
     ade:	fc 81       	ldd	r31, Y+4	; 0x04
     ae0:	91 83       	std	Z+1, r25	; 0x01
     ae2:	80 83       	st	Z, r24
     ae4:	0b c0       	rjmp	.+22     	; 0xafc <TMR_u8GetCounterValue+0x88>
			case TMR_U8_TMR2: *Cpy_pu16CounterValue = ( u16 ) TMR_U8_TCNT2_REG; break;
     ae6:	e4 e4       	ldi	r30, 0x44	; 68
     ae8:	f0 e0       	ldi	r31, 0x00	; 0
     aea:	80 81       	ld	r24, Z
     aec:	88 2f       	mov	r24, r24
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	eb 81       	ldd	r30, Y+3	; 0x03
     af2:	fc 81       	ldd	r31, Y+4	; 0x04
     af4:	91 83       	std	Z+1, r25	; 0x01
     af6:	80 83       	st	Z, r24
     af8:	01 c0       	rjmp	.+2      	; 0xafc <TMR_u8GetCounterValue+0x88>
	}
	/* Check 2: TimertId is not in the valid range, or Pointer is equal to NULL  */
	else
	{
		/* Update error state = NOK, wrong TimertId or Pointer is NULL!! */
		Loc_u8ErrorState = STD_TYPES_NOK;
     afa:	19 82       	std	Y+1, r1	; 0x01
	}

	return Loc_u8ErrorState;
     afc:	89 81       	ldd	r24, Y+1	; 0x01
}
     afe:	26 96       	adiw	r28, 0x06	; 6
     b00:	0f b6       	in	r0, 0x3f	; 63
     b02:	f8 94       	cli
     b04:	de bf       	out	0x3e, r29	; 62
     b06:	0f be       	out	0x3f, r0	; 63
     b08:	cd bf       	out	0x3d, r28	; 61
     b0a:	cf 91       	pop	r28
     b0c:	df 91       	pop	r29
     b0e:	08 95       	ret

00000b10 <TMR_u8SetCompareMatchValue>:
 Input: u8 TimerId, u8 Timer1ChannelId, and u16 CompareMatchValue
 Output: u8 Error or No Error
 Description: Function to Set Compare Match Value in OCRn Register.
*/
u8 TMR_u8SetCompareMatchValue( u8 Cpy_u8TimerId, u8 Cpy_u8Timer1ChannelId, u16 Cpy_u16CompareMatchValue )
{
     b10:	df 93       	push	r29
     b12:	cf 93       	push	r28
     b14:	cd b7       	in	r28, 0x3d	; 61
     b16:	de b7       	in	r29, 0x3e	; 62
     b18:	29 97       	sbiw	r28, 0x09	; 9
     b1a:	0f b6       	in	r0, 0x3f	; 63
     b1c:	f8 94       	cli
     b1e:	de bf       	out	0x3e, r29	; 62
     b20:	0f be       	out	0x3f, r0	; 63
     b22:	cd bf       	out	0x3d, r28	; 61
     b24:	8a 83       	std	Y+2, r24	; 0x02
     b26:	6b 83       	std	Y+3, r22	; 0x03
     b28:	5d 83       	std	Y+5, r21	; 0x05
     b2a:	4c 83       	std	Y+4, r20	; 0x04
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	89 83       	std	Y+1, r24	; 0x01

	/* Check 1: TimertId and Timer1ChannelId are in the valid range */
	if ( ( Cpy_u8TimerId <= TMR_U8_TMR2 ) && ( Cpy_u8Timer1ChannelId <= TMR_U8_TMR_1_CHANNEL_B ) )
     b30:	8a 81       	ldd	r24, Y+2	; 0x02
     b32:	83 30       	cpi	r24, 0x03	; 3
     b34:	08 f0       	brcs	.+2      	; 0xb38 <TMR_u8SetCompareMatchValue+0x28>
     b36:	3e c0       	rjmp	.+124    	; 0xbb4 <TMR_u8SetCompareMatchValue+0xa4>
     b38:	8b 81       	ldd	r24, Y+3	; 0x03
     b3a:	83 30       	cpi	r24, 0x03	; 3
     b3c:	d8 f5       	brcc	.+118    	; 0xbb4 <TMR_u8SetCompareMatchValue+0xa4>
	{
		/* Check 1.1: Required TimerId */
		switch ( Cpy_u8TimerId )
     b3e:	8a 81       	ldd	r24, Y+2	; 0x02
     b40:	28 2f       	mov	r18, r24
     b42:	30 e0       	ldi	r19, 0x00	; 0
     b44:	39 87       	std	Y+9, r19	; 0x09
     b46:	28 87       	std	Y+8, r18	; 0x08
     b48:	88 85       	ldd	r24, Y+8	; 0x08
     b4a:	99 85       	ldd	r25, Y+9	; 0x09
     b4c:	81 30       	cpi	r24, 0x01	; 1
     b4e:	91 05       	cpc	r25, r1
     b50:	71 f0       	breq	.+28     	; 0xb6e <TMR_u8SetCompareMatchValue+0x5e>
     b52:	28 85       	ldd	r18, Y+8	; 0x08
     b54:	39 85       	ldd	r19, Y+9	; 0x09
     b56:	22 30       	cpi	r18, 0x02	; 2
     b58:	31 05       	cpc	r19, r1
     b5a:	39 f1       	breq	.+78     	; 0xbaa <TMR_u8SetCompareMatchValue+0x9a>
     b5c:	88 85       	ldd	r24, Y+8	; 0x08
     b5e:	99 85       	ldd	r25, Y+9	; 0x09
     b60:	00 97       	sbiw	r24, 0x00	; 0
     b62:	49 f5       	brne	.+82     	; 0xbb6 <TMR_u8SetCompareMatchValue+0xa6>
		{
			case TMR_U8_TMR0: TMR_U8_OCR0_REG = ( u8 ) Cpy_u16CompareMatchValue; break;
     b64:	ec e5       	ldi	r30, 0x5C	; 92
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	8c 81       	ldd	r24, Y+4	; 0x04
     b6a:	80 83       	st	Z, r24
     b6c:	24 c0       	rjmp	.+72     	; 0xbb6 <TMR_u8SetCompareMatchValue+0xa6>

			case TMR_U8_TMR1:
				/* Check 1.1.1: Required Timer1ChannelId */
				switch ( Cpy_u8Timer1ChannelId )
     b6e:	8b 81       	ldd	r24, Y+3	; 0x03
     b70:	28 2f       	mov	r18, r24
     b72:	30 e0       	ldi	r19, 0x00	; 0
     b74:	3f 83       	std	Y+7, r19	; 0x07
     b76:	2e 83       	std	Y+6, r18	; 0x06
     b78:	8e 81       	ldd	r24, Y+6	; 0x06
     b7a:	9f 81       	ldd	r25, Y+7	; 0x07
     b7c:	81 30       	cpi	r24, 0x01	; 1
     b7e:	91 05       	cpc	r25, r1
     b80:	31 f0       	breq	.+12     	; 0xb8e <TMR_u8SetCompareMatchValue+0x7e>
     b82:	2e 81       	ldd	r18, Y+6	; 0x06
     b84:	3f 81       	ldd	r19, Y+7	; 0x07
     b86:	22 30       	cpi	r18, 0x02	; 2
     b88:	31 05       	cpc	r19, r1
     b8a:	41 f0       	breq	.+16     	; 0xb9c <TMR_u8SetCompareMatchValue+0x8c>
     b8c:	14 c0       	rjmp	.+40     	; 0xbb6 <TMR_u8SetCompareMatchValue+0xa6>
				{
					case TMR_U8_NO_CHANNEL	   : 										       break;
					case TMR_U8_TMR_1_CHANNEL_A: TMR_U16_OCR1A_REG = Cpy_u16CompareMatchValue; break;
     b8e:	ea e4       	ldi	r30, 0x4A	; 74
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	8c 81       	ldd	r24, Y+4	; 0x04
     b94:	9d 81       	ldd	r25, Y+5	; 0x05
     b96:	91 83       	std	Z+1, r25	; 0x01
     b98:	80 83       	st	Z, r24
     b9a:	0d c0       	rjmp	.+26     	; 0xbb6 <TMR_u8SetCompareMatchValue+0xa6>
					case TMR_U8_TMR_1_CHANNEL_B: TMR_U16_OCR1A_REG = Cpy_u16CompareMatchValue; break;
     b9c:	ea e4       	ldi	r30, 0x4A	; 74
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	8c 81       	ldd	r24, Y+4	; 0x04
     ba2:	9d 81       	ldd	r25, Y+5	; 0x05
     ba4:	91 83       	std	Z+1, r25	; 0x01
     ba6:	80 83       	st	Z, r24
     ba8:	06 c0       	rjmp	.+12     	; 0xbb6 <TMR_u8SetCompareMatchValue+0xa6>
				}
			break;

			case TMR_U8_TMR2: TMR_U8_OCR2_REG = ( u8 ) Cpy_u16CompareMatchValue; break;
     baa:	e3 e4       	ldi	r30, 0x43	; 67
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	8c 81       	ldd	r24, Y+4	; 0x04
     bb0:	80 83       	st	Z, r24
     bb2:	01 c0       	rjmp	.+2      	; 0xbb6 <TMR_u8SetCompareMatchValue+0xa6>
	}
	/* Check 2: TimertId or Timer1ChannelId is not in the valid range */
	else
	{
		/* Update error state = NOK, wrong TimertId or ChannelId! */
		Loc_u8ErrorState = STD_TYPES_NOK;
     bb4:	19 82       	std	Y+1, r1	; 0x01
	}

	return Loc_u8ErrorState;
     bb6:	89 81       	ldd	r24, Y+1	; 0x01
}
     bb8:	29 96       	adiw	r28, 0x09	; 9
     bba:	0f b6       	in	r0, 0x3f	; 63
     bbc:	f8 94       	cli
     bbe:	de bf       	out	0x3e, r29	; 62
     bc0:	0f be       	out	0x3f, r0	; 63
     bc2:	cd bf       	out	0x3d, r28	; 61
     bc4:	cf 91       	pop	r28
     bc6:	df 91       	pop	r29
     bc8:	08 95       	ret

00000bca <TMR_vdSetInputCaptureValue>:
 Input: u16 InputCaptureValue
 Output: void
 Description: Function to Set Input Capture Value in ICR1 Register ( in TMR1 only ).
*/
vd TMR_vdSetInputCaptureValue( u16 Cpy_u16InputCaptureValue )
{
     bca:	df 93       	push	r29
     bcc:	cf 93       	push	r28
     bce:	00 d0       	rcall	.+0      	; 0xbd0 <TMR_vdSetInputCaptureValue+0x6>
     bd0:	cd b7       	in	r28, 0x3d	; 61
     bd2:	de b7       	in	r29, 0x3e	; 62
     bd4:	9a 83       	std	Y+2, r25	; 0x02
     bd6:	89 83       	std	Y+1, r24	; 0x01
	TMR_U16_ICR1_REG = Cpy_u16InputCaptureValue;
     bd8:	e6 e4       	ldi	r30, 0x46	; 70
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	89 81       	ldd	r24, Y+1	; 0x01
     bde:	9a 81       	ldd	r25, Y+2	; 0x02
     be0:	91 83       	std	Z+1, r25	; 0x01
     be2:	80 83       	st	Z, r24
}
     be4:	0f 90       	pop	r0
     be6:	0f 90       	pop	r0
     be8:	cf 91       	pop	r28
     bea:	df 91       	pop	r29
     bec:	08 95       	ret

00000bee <__vector_4>:
void __vector_4( void )		__attribute__((signal));
void __vector_5( void )		__attribute__((signal));

/* ISR function implementation of TMR2 COMP */
void __vector_4( void )
{
     bee:	1f 92       	push	r1
     bf0:	0f 92       	push	r0
     bf2:	0f b6       	in	r0, 0x3f	; 63
     bf4:	0f 92       	push	r0
     bf6:	11 24       	eor	r1, r1
     bf8:	2f 93       	push	r18
     bfa:	3f 93       	push	r19
     bfc:	4f 93       	push	r20
     bfe:	5f 93       	push	r21
     c00:	6f 93       	push	r22
     c02:	7f 93       	push	r23
     c04:	8f 93       	push	r24
     c06:	9f 93       	push	r25
     c08:	af 93       	push	r26
     c0a:	bf 93       	push	r27
     c0c:	ef 93       	push	r30
     c0e:	ff 93       	push	r31
     c10:	df 93       	push	r29
     c12:	cf 93       	push	r28
     c14:	cd b7       	in	r28, 0x3d	; 61
     c16:	de b7       	in	r29, 0x3e	; 62
	/* Static Counter, in case the desired time to be counted; is more than Timer2 counting register ( TCNT2 = 8 bits ), i.e.: to count the number of Overflows  */
	static u16 Loc_u16CounterCOMP = 0;

	/* Increment the COMP Counter after every Overflow in Timer2 counting register */
	Loc_u16CounterCOMP++;
     c18:	80 91 76 00 	lds	r24, 0x0076
     c1c:	90 91 77 00 	lds	r25, 0x0077
     c20:	01 96       	adiw	r24, 0x01	; 1
     c22:	90 93 77 00 	sts	0x0077, r25
     c26:	80 93 76 00 	sts	0x0076, r24

	/* Check 1: The COMP Counter reached the desired number of Overflows  */
	if ( Loc_u16CounterCOMP == TMR_U16_TMR_2_NUM_OF_OVERFLOWS )
     c2a:	80 91 76 00 	lds	r24, 0x0076
     c2e:	90 91 77 00 	lds	r25, 0x0077
     c32:	81 30       	cpi	r24, 0x01	; 1
     c34:	91 05       	cpc	r25, r1
     c36:	79 f4       	brne	.+30     	; 0xc56 <__vector_4+0x68>
	{
		/* Reset the COMP Counter to 0 */
		Loc_u16CounterCOMP = 0;
     c38:	10 92 77 00 	sts	0x0077, r1
     c3c:	10 92 76 00 	sts	0x0076, r1

		/* Check 1.1: TMR2 index of the Global Array is not equal to NULL */
		if ( Glb_ApfCOMPInterruptsAction[TMR_U8_TMR2] != NULL )
     c40:	80 91 6c 00 	lds	r24, 0x006C
     c44:	90 91 6d 00 	lds	r25, 0x006D
     c48:	00 97       	sbiw	r24, 0x00	; 0
     c4a:	29 f0       	breq	.+10     	; 0xc56 <__vector_4+0x68>
		{
			/* Call Back the function ( in APP Layer ), which its address is stored in the Global Array of Pointers to Functions ( COMPInterruptsAction ) */
			Glb_ApfCOMPInterruptsAction[TMR_U8_TMR2]();
     c4c:	e0 91 6c 00 	lds	r30, 0x006C
     c50:	f0 91 6d 00 	lds	r31, 0x006D
     c54:	09 95       	icall
		}
	}
}
     c56:	cf 91       	pop	r28
     c58:	df 91       	pop	r29
     c5a:	ff 91       	pop	r31
     c5c:	ef 91       	pop	r30
     c5e:	bf 91       	pop	r27
     c60:	af 91       	pop	r26
     c62:	9f 91       	pop	r25
     c64:	8f 91       	pop	r24
     c66:	7f 91       	pop	r23
     c68:	6f 91       	pop	r22
     c6a:	5f 91       	pop	r21
     c6c:	4f 91       	pop	r20
     c6e:	3f 91       	pop	r19
     c70:	2f 91       	pop	r18
     c72:	0f 90       	pop	r0
     c74:	0f be       	out	0x3f, r0	; 63
     c76:	0f 90       	pop	r0
     c78:	1f 90       	pop	r1
     c7a:	18 95       	reti

00000c7c <__vector_5>:

/* ISR function implementation of TMR2 OVF */
void __vector_5( void )
{
     c7c:	1f 92       	push	r1
     c7e:	0f 92       	push	r0
     c80:	0f b6       	in	r0, 0x3f	; 63
     c82:	0f 92       	push	r0
     c84:	11 24       	eor	r1, r1
     c86:	2f 93       	push	r18
     c88:	3f 93       	push	r19
     c8a:	4f 93       	push	r20
     c8c:	5f 93       	push	r21
     c8e:	6f 93       	push	r22
     c90:	7f 93       	push	r23
     c92:	8f 93       	push	r24
     c94:	9f 93       	push	r25
     c96:	af 93       	push	r26
     c98:	bf 93       	push	r27
     c9a:	ef 93       	push	r30
     c9c:	ff 93       	push	r31
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	/* Increment the OVF Counter after every Overflow in Timer2 counting register */
	Glb_Au16OVFCounters[TMR_U8_TMR2]++;
     ca6:	80 91 72 00 	lds	r24, 0x0072
     caa:	90 91 73 00 	lds	r25, 0x0073
     cae:	01 96       	adiw	r24, 0x01	; 1
     cb0:	90 93 73 00 	sts	0x0073, r25
     cb4:	80 93 72 00 	sts	0x0072, r24

	/* Check 1: The OVF Counter reached the desired number of Overflows  */
	if ( Glb_Au16OVFCounters[TMR_U8_TMR2] == TMR_U16_TMR_2_NUM_OF_OVERFLOWS )
     cb8:	80 91 72 00 	lds	r24, 0x0072
     cbc:	90 91 73 00 	lds	r25, 0x0073
     cc0:	81 30       	cpi	r24, 0x01	; 1
     cc2:	91 05       	cpc	r25, r1
     cc4:	91 f4       	brne	.+36     	; 0xcea <__vector_5+0x6e>
	{
		/* Reset Preload Value */
		TMR_U8_TCNT2_REG = TMR_U8_TMR_2_PRELOAD_VALUE;
     cc6:	e4 e4       	ldi	r30, 0x44	; 68
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	10 82       	st	Z, r1

		/* Reset the OVF Counter to 0 */
		Glb_Au16OVFCounters[TMR_U8_TMR2] = 0;
     ccc:	10 92 73 00 	sts	0x0073, r1
     cd0:	10 92 72 00 	sts	0x0072, r1

		/* Check 1.1: TMR2 index of the Global Array is not equal to NULL */
		if ( Glb_ApfOVFInterruptsAction[TMR_U8_TMR2] != NULL )
     cd4:	80 91 66 00 	lds	r24, 0x0066
     cd8:	90 91 67 00 	lds	r25, 0x0067
     cdc:	00 97       	sbiw	r24, 0x00	; 0
     cde:	29 f0       	breq	.+10     	; 0xcea <__vector_5+0x6e>
		{
			/* Call Back the function ( in APP Layer ), which its address is stored in the Global Array of Pointers to Functions ( OVFInterruptsAction ) */
			Glb_ApfOVFInterruptsAction[TMR_U8_TMR2]();
     ce0:	e0 91 66 00 	lds	r30, 0x0066
     ce4:	f0 91 67 00 	lds	r31, 0x0067
     ce8:	09 95       	icall
		}
	}
}
     cea:	cf 91       	pop	r28
     cec:	df 91       	pop	r29
     cee:	ff 91       	pop	r31
     cf0:	ef 91       	pop	r30
     cf2:	bf 91       	pop	r27
     cf4:	af 91       	pop	r26
     cf6:	9f 91       	pop	r25
     cf8:	8f 91       	pop	r24
     cfa:	7f 91       	pop	r23
     cfc:	6f 91       	pop	r22
     cfe:	5f 91       	pop	r21
     d00:	4f 91       	pop	r20
     d02:	3f 91       	pop	r19
     d04:	2f 91       	pop	r18
     d06:	0f 90       	pop	r0
     d08:	0f be       	out	0x3f, r0	; 63
     d0a:	0f 90       	pop	r0
     d0c:	1f 90       	pop	r1
     d0e:	18 95       	reti

00000d10 <__vector_6>:
void __vector_8( void )		__attribute__((signal));
void __vector_9( void )		__attribute__((signal));

/* ISR function implementation of TMR1 CAPT */
void __vector_6( void )
{
     d10:	1f 92       	push	r1
     d12:	0f 92       	push	r0
     d14:	0f b6       	in	r0, 0x3f	; 63
     d16:	0f 92       	push	r0
     d18:	11 24       	eor	r1, r1
     d1a:	df 93       	push	r29
     d1c:	cf 93       	push	r28
     d1e:	cd b7       	in	r28, 0x3d	; 61
     d20:	de b7       	in	r29, 0x3e	; 62

}
     d22:	cf 91       	pop	r28
     d24:	df 91       	pop	r29
     d26:	0f 90       	pop	r0
     d28:	0f be       	out	0x3f, r0	; 63
     d2a:	0f 90       	pop	r0
     d2c:	1f 90       	pop	r1
     d2e:	18 95       	reti

00000d30 <__vector_7>:

/* ISR function implementation of TMR1 COMPA */
void __vector_7( void )
{
     d30:	1f 92       	push	r1
     d32:	0f 92       	push	r0
     d34:	0f b6       	in	r0, 0x3f	; 63
     d36:	0f 92       	push	r0
     d38:	11 24       	eor	r1, r1
     d3a:	2f 93       	push	r18
     d3c:	3f 93       	push	r19
     d3e:	4f 93       	push	r20
     d40:	5f 93       	push	r21
     d42:	6f 93       	push	r22
     d44:	7f 93       	push	r23
     d46:	8f 93       	push	r24
     d48:	9f 93       	push	r25
     d4a:	af 93       	push	r26
     d4c:	bf 93       	push	r27
     d4e:	ef 93       	push	r30
     d50:	ff 93       	push	r31
     d52:	df 93       	push	r29
     d54:	cf 93       	push	r28
     d56:	cd b7       	in	r28, 0x3d	; 61
     d58:	de b7       	in	r29, 0x3e	; 62
	/* Static Counter, in case the desired time to be counted; is more than Timer1 counting register ( TCNT1 = 16 bits ), i.e.: to count the number of Overflows  */
	static u16 Loc_u16CounterCOMP = 0;

	/* Increment the COMP Counter after every Overflow in Timer1 counting register */
	Loc_u16CounterCOMP++;
     d5a:	80 91 78 00 	lds	r24, 0x0078
     d5e:	90 91 79 00 	lds	r25, 0x0079
     d62:	01 96       	adiw	r24, 0x01	; 1
     d64:	90 93 79 00 	sts	0x0079, r25
     d68:	80 93 78 00 	sts	0x0078, r24

	/* Check 1: The COMP Counter reached the desired number of Overflows  */
	if ( Loc_u16CounterCOMP == TMR_U16_TMR_1_NUM_OF_OVERFLOWS )
     d6c:	80 91 78 00 	lds	r24, 0x0078
     d70:	90 91 79 00 	lds	r25, 0x0079
     d74:	81 30       	cpi	r24, 0x01	; 1
     d76:	91 05       	cpc	r25, r1
     d78:	a9 f4       	brne	.+42     	; 0xda4 <__vector_7+0x74>
	{
		/* Reset the COMP Counter to 0 */
		Loc_u16CounterCOMP = 0;
     d7a:	10 92 79 00 	sts	0x0079, r1
     d7e:	10 92 78 00 	sts	0x0078, r1

		/* Check 1.1: TMR1 index of the Global Array is not equal to NULL, and Channel A COMPFlag is raised */
		if ( ( Glb_ApfCOMPInterruptsAction[TMR_U8_TMR1] != NULL ) && ( Glb_u8Timer1COMPAFlag != TMR_U8_FLAG_DOWN ) )
     d82:	80 91 6a 00 	lds	r24, 0x006A
     d86:	90 91 6b 00 	lds	r25, 0x006B
     d8a:	00 97       	sbiw	r24, 0x00	; 0
     d8c:	59 f0       	breq	.+22     	; 0xda4 <__vector_7+0x74>
     d8e:	80 91 74 00 	lds	r24, 0x0074
     d92:	88 23       	and	r24, r24
     d94:	39 f0       	breq	.+14     	; 0xda4 <__vector_7+0x74>
		{
			/* Reset Channel A COMPFlag to 0 */
			Glb_u8Timer1COMPAFlag = TMR_U8_FLAG_DOWN;
     d96:	10 92 74 00 	sts	0x0074, r1

			/* Call Back the function ( in APP Layer ), which its address is stored in the Global Array of Pointers to Functions ( COMPInterruptsAction ) */
			Glb_ApfCOMPInterruptsAction[TMR_U8_TMR1]();
     d9a:	e0 91 6a 00 	lds	r30, 0x006A
     d9e:	f0 91 6b 00 	lds	r31, 0x006B
     da2:	09 95       	icall
		}
	}
}
     da4:	cf 91       	pop	r28
     da6:	df 91       	pop	r29
     da8:	ff 91       	pop	r31
     daa:	ef 91       	pop	r30
     dac:	bf 91       	pop	r27
     dae:	af 91       	pop	r26
     db0:	9f 91       	pop	r25
     db2:	8f 91       	pop	r24
     db4:	7f 91       	pop	r23
     db6:	6f 91       	pop	r22
     db8:	5f 91       	pop	r21
     dba:	4f 91       	pop	r20
     dbc:	3f 91       	pop	r19
     dbe:	2f 91       	pop	r18
     dc0:	0f 90       	pop	r0
     dc2:	0f be       	out	0x3f, r0	; 63
     dc4:	0f 90       	pop	r0
     dc6:	1f 90       	pop	r1
     dc8:	18 95       	reti

00000dca <__vector_8>:

/* ISR function implementation of TMR1 COMPB */
void __vector_8( void )
{
     dca:	1f 92       	push	r1
     dcc:	0f 92       	push	r0
     dce:	0f b6       	in	r0, 0x3f	; 63
     dd0:	0f 92       	push	r0
     dd2:	11 24       	eor	r1, r1
     dd4:	2f 93       	push	r18
     dd6:	3f 93       	push	r19
     dd8:	4f 93       	push	r20
     dda:	5f 93       	push	r21
     ddc:	6f 93       	push	r22
     dde:	7f 93       	push	r23
     de0:	8f 93       	push	r24
     de2:	9f 93       	push	r25
     de4:	af 93       	push	r26
     de6:	bf 93       	push	r27
     de8:	ef 93       	push	r30
     dea:	ff 93       	push	r31
     dec:	df 93       	push	r29
     dee:	cf 93       	push	r28
     df0:	cd b7       	in	r28, 0x3d	; 61
     df2:	de b7       	in	r29, 0x3e	; 62
	/* Static Counter, in case the desired time to be counted; is more than Timer1 counting register ( TCNT1 = 16 bits ), i.e.: to count the number of Overflows  */
	static u16 Loc_u16CounterCOMP = 0;

	/* Increment the COMP Counter after every Overflow in Timer1 counting register */
	Loc_u16CounterCOMP++;
     df4:	80 91 7a 00 	lds	r24, 0x007A
     df8:	90 91 7b 00 	lds	r25, 0x007B
     dfc:	01 96       	adiw	r24, 0x01	; 1
     dfe:	90 93 7b 00 	sts	0x007B, r25
     e02:	80 93 7a 00 	sts	0x007A, r24

	/* Check 1: The COMP Counter reached the desired number of Overflows  */
	if ( Loc_u16CounterCOMP == TMR_U16_TMR_1_NUM_OF_OVERFLOWS )
     e06:	80 91 7a 00 	lds	r24, 0x007A
     e0a:	90 91 7b 00 	lds	r25, 0x007B
     e0e:	81 30       	cpi	r24, 0x01	; 1
     e10:	91 05       	cpc	r25, r1
     e12:	a9 f4       	brne	.+42     	; 0xe3e <__vector_8+0x74>
	{
		/* Reset the COMP Counter to 0 */
		Loc_u16CounterCOMP = 0;
     e14:	10 92 7b 00 	sts	0x007B, r1
     e18:	10 92 7a 00 	sts	0x007A, r1

		/* Check 1.1: TMR1 index of the Global Array is not equal to NULL, and Channel B COMPFlag is raised */
		if ( ( Glb_ApfCOMPInterruptsAction[TMR_U8_TMR1] != NULL ) && ( Glb_u8Timer1COMPBFlag != TMR_U8_FLAG_DOWN ) )
     e1c:	80 91 6a 00 	lds	r24, 0x006A
     e20:	90 91 6b 00 	lds	r25, 0x006B
     e24:	00 97       	sbiw	r24, 0x00	; 0
     e26:	59 f0       	breq	.+22     	; 0xe3e <__vector_8+0x74>
     e28:	80 91 75 00 	lds	r24, 0x0075
     e2c:	88 23       	and	r24, r24
     e2e:	39 f0       	breq	.+14     	; 0xe3e <__vector_8+0x74>
		{
			/* Reset Channel B COMPFlag to 0 */
			Glb_u8Timer1COMPBFlag = TMR_U8_FLAG_DOWN;
     e30:	10 92 75 00 	sts	0x0075, r1

			/* Call Back the function ( in APP Layer ), which its address is stored in the Global Array of Pointers to Functions ( COMPInterruptsAction ) */
			Glb_ApfCOMPInterruptsAction[TMR_U8_TMR1]();
     e34:	e0 91 6a 00 	lds	r30, 0x006A
     e38:	f0 91 6b 00 	lds	r31, 0x006B
     e3c:	09 95       	icall
		}
	}
}
     e3e:	cf 91       	pop	r28
     e40:	df 91       	pop	r29
     e42:	ff 91       	pop	r31
     e44:	ef 91       	pop	r30
     e46:	bf 91       	pop	r27
     e48:	af 91       	pop	r26
     e4a:	9f 91       	pop	r25
     e4c:	8f 91       	pop	r24
     e4e:	7f 91       	pop	r23
     e50:	6f 91       	pop	r22
     e52:	5f 91       	pop	r21
     e54:	4f 91       	pop	r20
     e56:	3f 91       	pop	r19
     e58:	2f 91       	pop	r18
     e5a:	0f 90       	pop	r0
     e5c:	0f be       	out	0x3f, r0	; 63
     e5e:	0f 90       	pop	r0
     e60:	1f 90       	pop	r1
     e62:	18 95       	reti

00000e64 <__vector_9>:

/* ISR function implementation of TMR1 OVF */
void __vector_9( void )
{
     e64:	1f 92       	push	r1
     e66:	0f 92       	push	r0
     e68:	0f b6       	in	r0, 0x3f	; 63
     e6a:	0f 92       	push	r0
     e6c:	11 24       	eor	r1, r1
     e6e:	2f 93       	push	r18
     e70:	3f 93       	push	r19
     e72:	4f 93       	push	r20
     e74:	5f 93       	push	r21
     e76:	6f 93       	push	r22
     e78:	7f 93       	push	r23
     e7a:	8f 93       	push	r24
     e7c:	9f 93       	push	r25
     e7e:	af 93       	push	r26
     e80:	bf 93       	push	r27
     e82:	ef 93       	push	r30
     e84:	ff 93       	push	r31
     e86:	df 93       	push	r29
     e88:	cf 93       	push	r28
     e8a:	cd b7       	in	r28, 0x3d	; 61
     e8c:	de b7       	in	r29, 0x3e	; 62
	/* Increment the OVF Counter after every Overflow in Timer1 counting register */
	Glb_Au16OVFCounters[TMR_U8_TMR1]++;
     e8e:	80 91 70 00 	lds	r24, 0x0070
     e92:	90 91 71 00 	lds	r25, 0x0071
     e96:	01 96       	adiw	r24, 0x01	; 1
     e98:	90 93 71 00 	sts	0x0071, r25
     e9c:	80 93 70 00 	sts	0x0070, r24

	/* Check 1: The OVF Counter reached the desired number of Overflows  */
	if ( Glb_Au16OVFCounters[TMR_U8_TMR1] == TMR_U16_TMR_1_NUM_OF_OVERFLOWS )
     ea0:	80 91 70 00 	lds	r24, 0x0070
     ea4:	90 91 71 00 	lds	r25, 0x0071
     ea8:	81 30       	cpi	r24, 0x01	; 1
     eaa:	91 05       	cpc	r25, r1
     eac:	99 f4       	brne	.+38     	; 0xed4 <__vector_9+0x70>
	{
		/* Reset Preload Value */
		TMR_U16_TCNT1_REG = TMR_U16_TMR_1_PRELOAD_VALUE;
     eae:	ec e4       	ldi	r30, 0x4C	; 76
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	11 82       	std	Z+1, r1	; 0x01
     eb4:	10 82       	st	Z, r1

		/* Reset the OVF Counter to 0 */
		Glb_Au16OVFCounters[TMR_U8_TMR1] = 0;
     eb6:	10 92 71 00 	sts	0x0071, r1
     eba:	10 92 70 00 	sts	0x0070, r1

		/* Check 1.1: TMR1 index of the Global Array is not equal to NULL */
		if ( Glb_ApfOVFInterruptsAction[TMR_U8_TMR1] != NULL )
     ebe:	80 91 64 00 	lds	r24, 0x0064
     ec2:	90 91 65 00 	lds	r25, 0x0065
     ec6:	00 97       	sbiw	r24, 0x00	; 0
     ec8:	29 f0       	breq	.+10     	; 0xed4 <__vector_9+0x70>
		{
			/* Call Back the function ( in APP Layer ), which its address is stored in the Global Array of Pointers to Functions ( OVFInterruptsAction ) */
			Glb_ApfOVFInterruptsAction[TMR_U8_TMR1]();
     eca:	e0 91 64 00 	lds	r30, 0x0064
     ece:	f0 91 65 00 	lds	r31, 0x0065
     ed2:	09 95       	icall
		}
	}
}
     ed4:	cf 91       	pop	r28
     ed6:	df 91       	pop	r29
     ed8:	ff 91       	pop	r31
     eda:	ef 91       	pop	r30
     edc:	bf 91       	pop	r27
     ede:	af 91       	pop	r26
     ee0:	9f 91       	pop	r25
     ee2:	8f 91       	pop	r24
     ee4:	7f 91       	pop	r23
     ee6:	6f 91       	pop	r22
     ee8:	5f 91       	pop	r21
     eea:	4f 91       	pop	r20
     eec:	3f 91       	pop	r19
     eee:	2f 91       	pop	r18
     ef0:	0f 90       	pop	r0
     ef2:	0f be       	out	0x3f, r0	; 63
     ef4:	0f 90       	pop	r0
     ef6:	1f 90       	pop	r1
     ef8:	18 95       	reti

00000efa <__vector_10>:
void __vector_10( void )	__attribute__((signal));
void __vector_11( void )	__attribute__((signal));

/* ISR function implementation of TMR0 COMP */
void __vector_10( void )
{
     efa:	1f 92       	push	r1
     efc:	0f 92       	push	r0
     efe:	0f b6       	in	r0, 0x3f	; 63
     f00:	0f 92       	push	r0
     f02:	11 24       	eor	r1, r1
     f04:	2f 93       	push	r18
     f06:	3f 93       	push	r19
     f08:	4f 93       	push	r20
     f0a:	5f 93       	push	r21
     f0c:	6f 93       	push	r22
     f0e:	7f 93       	push	r23
     f10:	8f 93       	push	r24
     f12:	9f 93       	push	r25
     f14:	af 93       	push	r26
     f16:	bf 93       	push	r27
     f18:	ef 93       	push	r30
     f1a:	ff 93       	push	r31
     f1c:	df 93       	push	r29
     f1e:	cf 93       	push	r28
     f20:	cd b7       	in	r28, 0x3d	; 61
     f22:	de b7       	in	r29, 0x3e	; 62
	/* Static Counter, in case the desired time to be counted; is more than Timer0 counting register ( TCNT0 = 8 bits ), i.e.: to count the number of Overflows  */
	static u16 Loc_u16CounterCOMP = 0;

	/* Increment the COMP Counter after every Overflow in Timer0 counting register */
	Loc_u16CounterCOMP++;
     f24:	80 91 7c 00 	lds	r24, 0x007C
     f28:	90 91 7d 00 	lds	r25, 0x007D
     f2c:	01 96       	adiw	r24, 0x01	; 1
     f2e:	90 93 7d 00 	sts	0x007D, r25
     f32:	80 93 7c 00 	sts	0x007C, r24

	/* Check 1: The COMP Counter reached the desired number of Overflows  */
	if ( Loc_u16CounterCOMP == TMR_U16_TMR_0_NUM_OF_OVERFLOWS )
     f36:	80 91 7c 00 	lds	r24, 0x007C
     f3a:	90 91 7d 00 	lds	r25, 0x007D
     f3e:	2c e4       	ldi	r18, 0x4C	; 76
     f40:	8c 34       	cpi	r24, 0x4C	; 76
     f42:	92 07       	cpc	r25, r18
     f44:	79 f4       	brne	.+30     	; 0xf64 <__vector_10+0x6a>
	{
		/* Reset the COMP Counter to 0 */
		Loc_u16CounterCOMP = 0;
     f46:	10 92 7d 00 	sts	0x007D, r1
     f4a:	10 92 7c 00 	sts	0x007C, r1

		/* Check 1.1: TMR0 index of the Global Array is not equal to NULL */
		if ( Glb_ApfCOMPInterruptsAction[TMR_U8_TMR0] != NULL )
     f4e:	80 91 68 00 	lds	r24, 0x0068
     f52:	90 91 69 00 	lds	r25, 0x0069
     f56:	00 97       	sbiw	r24, 0x00	; 0
     f58:	29 f0       	breq	.+10     	; 0xf64 <__vector_10+0x6a>
		{
			/* Call Back the function ( in APP Layer ), which its address is stored in the Global Array of Pointers to Functions ( COMPInterruptsAction ) */
			Glb_ApfCOMPInterruptsAction[TMR_U8_TMR0]();
     f5a:	e0 91 68 00 	lds	r30, 0x0068
     f5e:	f0 91 69 00 	lds	r31, 0x0069
     f62:	09 95       	icall
		}
	}
}
     f64:	cf 91       	pop	r28
     f66:	df 91       	pop	r29
     f68:	ff 91       	pop	r31
     f6a:	ef 91       	pop	r30
     f6c:	bf 91       	pop	r27
     f6e:	af 91       	pop	r26
     f70:	9f 91       	pop	r25
     f72:	8f 91       	pop	r24
     f74:	7f 91       	pop	r23
     f76:	6f 91       	pop	r22
     f78:	5f 91       	pop	r21
     f7a:	4f 91       	pop	r20
     f7c:	3f 91       	pop	r19
     f7e:	2f 91       	pop	r18
     f80:	0f 90       	pop	r0
     f82:	0f be       	out	0x3f, r0	; 63
     f84:	0f 90       	pop	r0
     f86:	1f 90       	pop	r1
     f88:	18 95       	reti

00000f8a <__vector_11>:

/* ISR function implementation of TMR0 OVF */
void __vector_11( void )
{
     f8a:	1f 92       	push	r1
     f8c:	0f 92       	push	r0
     f8e:	0f b6       	in	r0, 0x3f	; 63
     f90:	0f 92       	push	r0
     f92:	11 24       	eor	r1, r1
     f94:	2f 93       	push	r18
     f96:	3f 93       	push	r19
     f98:	4f 93       	push	r20
     f9a:	5f 93       	push	r21
     f9c:	6f 93       	push	r22
     f9e:	7f 93       	push	r23
     fa0:	8f 93       	push	r24
     fa2:	9f 93       	push	r25
     fa4:	af 93       	push	r26
     fa6:	bf 93       	push	r27
     fa8:	ef 93       	push	r30
     faa:	ff 93       	push	r31
     fac:	df 93       	push	r29
     fae:	cf 93       	push	r28
     fb0:	cd b7       	in	r28, 0x3d	; 61
     fb2:	de b7       	in	r29, 0x3e	; 62
	/* Increment the OVF Counter after every Overflow in Timer0 counting register */
	Glb_Au16OVFCounters[TMR_U8_TMR0]++;
     fb4:	80 91 6e 00 	lds	r24, 0x006E
     fb8:	90 91 6f 00 	lds	r25, 0x006F
     fbc:	01 96       	adiw	r24, 0x01	; 1
     fbe:	90 93 6f 00 	sts	0x006F, r25
     fc2:	80 93 6e 00 	sts	0x006E, r24

	/* Check 1: The OVF Counter reached the desired number of Overflows  */
	if ( Glb_Au16OVFCounters[TMR_U8_TMR0] >= TMR_U16_TMR_0_NUM_OF_OVERFLOWS )
     fc6:	80 91 6e 00 	lds	r24, 0x006E
     fca:	90 91 6f 00 	lds	r25, 0x006F
     fce:	2c e4       	ldi	r18, 0x4C	; 76
     fd0:	8c 34       	cpi	r24, 0x4C	; 76
     fd2:	92 07       	cpc	r25, r18
     fd4:	98 f0       	brcs	.+38     	; 0xffc <__vector_11+0x72>
	{
		/* Reset Preload Value */
		TMR_U8_TCNT0_REG = TMR_U8_TMR_0_PRELOAD_VALUE;
     fd6:	e2 e5       	ldi	r30, 0x52	; 82
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 ec       	ldi	r24, 0xC0	; 192
     fdc:	80 83       	st	Z, r24

		/* Reset the OVF Counter to 0 */
		Glb_Au16OVFCounters[TMR_U8_TMR0] = 0;
     fde:	10 92 6f 00 	sts	0x006F, r1
     fe2:	10 92 6e 00 	sts	0x006E, r1

		/* Check 1.1: TMR0 index of the Global Array is not equal to NULL */
		if ( Glb_ApfOVFInterruptsAction[TMR_U8_TMR0] != NULL )
     fe6:	80 91 62 00 	lds	r24, 0x0062
     fea:	90 91 63 00 	lds	r25, 0x0063
     fee:	00 97       	sbiw	r24, 0x00	; 0
     ff0:	29 f0       	breq	.+10     	; 0xffc <__vector_11+0x72>
		{
			/* Call Back the function ( in APP Layer ), which its address is stored in the Global Array of Pointers to Functions ( OVFInterruptsAction ) */
			Glb_ApfOVFInterruptsAction[TMR_U8_TMR0]();
     ff2:	e0 91 62 00 	lds	r30, 0x0062
     ff6:	f0 91 63 00 	lds	r31, 0x0063
     ffa:	09 95       	icall
		}
	}
}
     ffc:	cf 91       	pop	r28
     ffe:	df 91       	pop	r29
    1000:	ff 91       	pop	r31
    1002:	ef 91       	pop	r30
    1004:	bf 91       	pop	r27
    1006:	af 91       	pop	r26
    1008:	9f 91       	pop	r25
    100a:	8f 91       	pop	r24
    100c:	7f 91       	pop	r23
    100e:	6f 91       	pop	r22
    1010:	5f 91       	pop	r21
    1012:	4f 91       	pop	r20
    1014:	3f 91       	pop	r19
    1016:	2f 91       	pop	r18
    1018:	0f 90       	pop	r0
    101a:	0f be       	out	0x3f, r0	; 63
    101c:	0f 90       	pop	r0
    101e:	1f 90       	pop	r1
    1020:	18 95       	reti

00001022 <GLI_vdEnableGIE>:
 Input: void
 Output: void
 Description: Function to set I bit in SREG, to enable the Global Interrupt Enable (GIE).
*/
vd GLI_vdEnableGIE ( void )
{
    1022:	df 93       	push	r29
    1024:	cf 93       	push	r28
    1026:	cd b7       	in	r28, 0x3d	; 61
    1028:	de b7       	in	r29, 0x3e	; 62
	SET_BIT( GLI_U8_SREG_REG, GLI_U8_I_BIT );
    102a:	af e5       	ldi	r26, 0x5F	; 95
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	ef e5       	ldi	r30, 0x5F	; 95
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	80 68       	ori	r24, 0x80	; 128
    1036:	8c 93       	st	X, r24
}
    1038:	cf 91       	pop	r28
    103a:	df 91       	pop	r29
    103c:	08 95       	ret

0000103e <GLI_vdDisableGIE>:
 Input: void
 Output: void
 Description: Function to clear I bit in SREG, to disable the Global Interrupt Enable (GIE).
*/
vd GLI_vdDisableGIE( void )
{
    103e:	df 93       	push	r29
    1040:	cf 93       	push	r28
    1042:	cd b7       	in	r28, 0x3d	; 61
    1044:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT( GLI_U8_SREG_REG, GLI_U8_I_BIT );
    1046:	af e5       	ldi	r26, 0x5F	; 95
    1048:	b0 e0       	ldi	r27, 0x00	; 0
    104a:	ef e5       	ldi	r30, 0x5F	; 95
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	8f 77       	andi	r24, 0x7F	; 127
    1052:	8c 93       	st	X, r24
}
    1054:	cf 91       	pop	r28
    1056:	df 91       	pop	r29
    1058:	08 95       	ret

0000105a <EXI_u8EnablePIE>:
 Output: u8 Error or No Error
 Description: Function to enable and configure Peripheral Interrupt Enable (PIE), by setting relevant bit for each interrupt in GICR register,
 	 	 	  then configuring Sense Control in MCUCR (case interrupt 0 or 1) or MCUCSR (case interrupt 2) registers.
*/
u8 EXI_u8EnablePIE  ( u8 Cpy_u8InterruptId, u8 Cpy_u8SenseControl )
{
    105a:	df 93       	push	r29
    105c:	cf 93       	push	r28
    105e:	cd b7       	in	r28, 0x3d	; 61
    1060:	de b7       	in	r29, 0x3e	; 62
    1062:	2b 97       	sbiw	r28, 0x0b	; 11
    1064:	0f b6       	in	r0, 0x3f	; 63
    1066:	f8 94       	cli
    1068:	de bf       	out	0x3e, r29	; 62
    106a:	0f be       	out	0x3f, r0	; 63
    106c:	cd bf       	out	0x3d, r28	; 61
    106e:	8a 83       	std	Y+2, r24	; 0x02
    1070:	6b 83       	std	Y+3, r22	; 0x03
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	89 83       	std	Y+1, r24	; 0x01
	
	/* Check 1: InterruptId and the Sense Control are in the valid range */
	if ( ( Cpy_u8InterruptId <= EXI_U8_INT2 ) && ( Cpy_u8SenseControl <= EXI_U8_SENSE_RISING_EDGE ) )
    1076:	8a 81       	ldd	r24, Y+2	; 0x02
    1078:	83 30       	cpi	r24, 0x03	; 3
    107a:	08 f0       	brcs	.+2      	; 0x107e <EXI_u8EnablePIE+0x24>
    107c:	05 c1       	rjmp	.+522    	; 0x1288 <EXI_u8EnablePIE+0x22e>
    107e:	8b 81       	ldd	r24, Y+3	; 0x03
    1080:	84 30       	cpi	r24, 0x04	; 4
    1082:	08 f0       	brcs	.+2      	; 0x1086 <EXI_u8EnablePIE+0x2c>
    1084:	01 c1       	rjmp	.+514    	; 0x1288 <EXI_u8EnablePIE+0x22e>
	{
		/* Check 1.1: Required InterruptId */
		switch ( Cpy_u8InterruptId )
    1086:	8a 81       	ldd	r24, Y+2	; 0x02
    1088:	28 2f       	mov	r18, r24
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	3b 87       	std	Y+11, r19	; 0x0b
    108e:	2a 87       	std	Y+10, r18	; 0x0a
    1090:	8a 85       	ldd	r24, Y+10	; 0x0a
    1092:	9b 85       	ldd	r25, Y+11	; 0x0b
    1094:	81 30       	cpi	r24, 0x01	; 1
    1096:	91 05       	cpc	r25, r1
    1098:	09 f4       	brne	.+2      	; 0x109c <EXI_u8EnablePIE+0x42>
    109a:	6d c0       	rjmp	.+218    	; 0x1176 <EXI_u8EnablePIE+0x11c>
    109c:	2a 85       	ldd	r18, Y+10	; 0x0a
    109e:	3b 85       	ldd	r19, Y+11	; 0x0b
    10a0:	22 30       	cpi	r18, 0x02	; 2
    10a2:	31 05       	cpc	r19, r1
    10a4:	09 f4       	brne	.+2      	; 0x10a8 <EXI_u8EnablePIE+0x4e>
    10a6:	c9 c0       	rjmp	.+402    	; 0x123a <EXI_u8EnablePIE+0x1e0>
    10a8:	8a 85       	ldd	r24, Y+10	; 0x0a
    10aa:	9b 85       	ldd	r25, Y+11	; 0x0b
    10ac:	00 97       	sbiw	r24, 0x00	; 0
    10ae:	09 f0       	breq	.+2      	; 0x10b2 <EXI_u8EnablePIE+0x58>
    10b0:	ec c0       	rjmp	.+472    	; 0x128a <EXI_u8EnablePIE+0x230>
		{
			case EXI_U8_INT0:
				/* Enable Interrupt 0 */
				SET_BIT( EXI_U8_GICR_REG, EXI_U8_INT0_BIT );
    10b2:	ab e5       	ldi	r26, 0x5B	; 91
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	eb e5       	ldi	r30, 0x5B	; 91
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	80 64       	ori	r24, 0x40	; 64
    10be:	8c 93       	st	X, r24

				/* Check 1.1.1: Required SenseControl */
				switch ( Cpy_u8SenseControl )
    10c0:	8b 81       	ldd	r24, Y+3	; 0x03
    10c2:	28 2f       	mov	r18, r24
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	39 87       	std	Y+9, r19	; 0x09
    10c8:	28 87       	std	Y+8, r18	; 0x08
    10ca:	88 85       	ldd	r24, Y+8	; 0x08
    10cc:	99 85       	ldd	r25, Y+9	; 0x09
    10ce:	81 30       	cpi	r24, 0x01	; 1
    10d0:	91 05       	cpc	r25, r1
    10d2:	21 f1       	breq	.+72     	; 0x111c <EXI_u8EnablePIE+0xc2>
    10d4:	28 85       	ldd	r18, Y+8	; 0x08
    10d6:	39 85       	ldd	r19, Y+9	; 0x09
    10d8:	22 30       	cpi	r18, 0x02	; 2
    10da:	31 05       	cpc	r19, r1
    10dc:	2c f4       	brge	.+10     	; 0x10e8 <EXI_u8EnablePIE+0x8e>
    10de:	88 85       	ldd	r24, Y+8	; 0x08
    10e0:	99 85       	ldd	r25, Y+9	; 0x09
    10e2:	00 97       	sbiw	r24, 0x00	; 0
    10e4:	61 f0       	breq	.+24     	; 0x10fe <EXI_u8EnablePIE+0xa4>
    10e6:	d1 c0       	rjmp	.+418    	; 0x128a <EXI_u8EnablePIE+0x230>
    10e8:	28 85       	ldd	r18, Y+8	; 0x08
    10ea:	39 85       	ldd	r19, Y+9	; 0x09
    10ec:	22 30       	cpi	r18, 0x02	; 2
    10ee:	31 05       	cpc	r19, r1
    10f0:	21 f1       	breq	.+72     	; 0x113a <EXI_u8EnablePIE+0xe0>
    10f2:	88 85       	ldd	r24, Y+8	; 0x08
    10f4:	99 85       	ldd	r25, Y+9	; 0x09
    10f6:	83 30       	cpi	r24, 0x03	; 3
    10f8:	91 05       	cpc	r25, r1
    10fa:	71 f1       	breq	.+92     	; 0x1158 <EXI_u8EnablePIE+0xfe>
    10fc:	c6 c0       	rjmp	.+396    	; 0x128a <EXI_u8EnablePIE+0x230>
				{
					case EXI_U8_SENSE_LOW_LEVEL		: CLR_BIT( EXI_U8_MCUCR_REG, EXI_U8_ISC00_BIT ); CLR_BIT( EXI_U8_MCUCR_REG, EXI_U8_ISC01_BIT ); break;
    10fe:	a5 e5       	ldi	r26, 0x55	; 85
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	e5 e5       	ldi	r30, 0x55	; 85
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	8e 7f       	andi	r24, 0xFE	; 254
    110a:	8c 93       	st	X, r24
    110c:	a5 e5       	ldi	r26, 0x55	; 85
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e5 e5       	ldi	r30, 0x55	; 85
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	8d 7f       	andi	r24, 0xFD	; 253
    1118:	8c 93       	st	X, r24
    111a:	b7 c0       	rjmp	.+366    	; 0x128a <EXI_u8EnablePIE+0x230>
					case EXI_U8_SENSE_LOGICAL_CHANGE: SET_BIT( EXI_U8_MCUCR_REG, EXI_U8_ISC00_BIT ); CLR_BIT( EXI_U8_MCUCR_REG, EXI_U8_ISC01_BIT ); break;
    111c:	a5 e5       	ldi	r26, 0x55	; 85
    111e:	b0 e0       	ldi	r27, 0x00	; 0
    1120:	e5 e5       	ldi	r30, 0x55	; 85
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	81 60       	ori	r24, 0x01	; 1
    1128:	8c 93       	st	X, r24
    112a:	a5 e5       	ldi	r26, 0x55	; 85
    112c:	b0 e0       	ldi	r27, 0x00	; 0
    112e:	e5 e5       	ldi	r30, 0x55	; 85
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	8d 7f       	andi	r24, 0xFD	; 253
    1136:	8c 93       	st	X, r24
    1138:	a8 c0       	rjmp	.+336    	; 0x128a <EXI_u8EnablePIE+0x230>
					case EXI_U8_SENSE_FALLING_EDGE	: CLR_BIT( EXI_U8_MCUCR_REG, EXI_U8_ISC00_BIT ); SET_BIT( EXI_U8_MCUCR_REG, EXI_U8_ISC01_BIT ); break;
    113a:	a5 e5       	ldi	r26, 0x55	; 85
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	e5 e5       	ldi	r30, 0x55	; 85
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	8e 7f       	andi	r24, 0xFE	; 254
    1146:	8c 93       	st	X, r24
    1148:	a5 e5       	ldi	r26, 0x55	; 85
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	e5 e5       	ldi	r30, 0x55	; 85
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	82 60       	ori	r24, 0x02	; 2
    1154:	8c 93       	st	X, r24
    1156:	99 c0       	rjmp	.+306    	; 0x128a <EXI_u8EnablePIE+0x230>
					case EXI_U8_SENSE_RISING_EDGE	: SET_BIT( EXI_U8_MCUCR_REG, EXI_U8_ISC00_BIT ); SET_BIT( EXI_U8_MCUCR_REG, EXI_U8_ISC01_BIT ); break;
    1158:	a5 e5       	ldi	r26, 0x55	; 85
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	e5 e5       	ldi	r30, 0x55	; 85
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	81 60       	ori	r24, 0x01	; 1
    1164:	8c 93       	st	X, r24
    1166:	a5 e5       	ldi	r26, 0x55	; 85
    1168:	b0 e0       	ldi	r27, 0x00	; 0
    116a:	e5 e5       	ldi	r30, 0x55	; 85
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	82 60       	ori	r24, 0x02	; 2
    1172:	8c 93       	st	X, r24
    1174:	8a c0       	rjmp	.+276    	; 0x128a <EXI_u8EnablePIE+0x230>
				}
			break;

			case EXI_U8_INT1:
				/* Enable Interrupt 1 */
				SET_BIT( EXI_U8_GICR_REG, EXI_U8_INT1_BIT );
    1176:	ab e5       	ldi	r26, 0x5B	; 91
    1178:	b0 e0       	ldi	r27, 0x00	; 0
    117a:	eb e5       	ldi	r30, 0x5B	; 91
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	80 81       	ld	r24, Z
    1180:	80 68       	ori	r24, 0x80	; 128
    1182:	8c 93       	st	X, r24

				/* Check 1.1.2: Required SenseControl */
				switch( Cpy_u8SenseControl)
    1184:	8b 81       	ldd	r24, Y+3	; 0x03
    1186:	28 2f       	mov	r18, r24
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	3f 83       	std	Y+7, r19	; 0x07
    118c:	2e 83       	std	Y+6, r18	; 0x06
    118e:	8e 81       	ldd	r24, Y+6	; 0x06
    1190:	9f 81       	ldd	r25, Y+7	; 0x07
    1192:	81 30       	cpi	r24, 0x01	; 1
    1194:	91 05       	cpc	r25, r1
    1196:	21 f1       	breq	.+72     	; 0x11e0 <EXI_u8EnablePIE+0x186>
    1198:	2e 81       	ldd	r18, Y+6	; 0x06
    119a:	3f 81       	ldd	r19, Y+7	; 0x07
    119c:	22 30       	cpi	r18, 0x02	; 2
    119e:	31 05       	cpc	r19, r1
    11a0:	2c f4       	brge	.+10     	; 0x11ac <EXI_u8EnablePIE+0x152>
    11a2:	8e 81       	ldd	r24, Y+6	; 0x06
    11a4:	9f 81       	ldd	r25, Y+7	; 0x07
    11a6:	00 97       	sbiw	r24, 0x00	; 0
    11a8:	61 f0       	breq	.+24     	; 0x11c2 <EXI_u8EnablePIE+0x168>
    11aa:	6f c0       	rjmp	.+222    	; 0x128a <EXI_u8EnablePIE+0x230>
    11ac:	2e 81       	ldd	r18, Y+6	; 0x06
    11ae:	3f 81       	ldd	r19, Y+7	; 0x07
    11b0:	22 30       	cpi	r18, 0x02	; 2
    11b2:	31 05       	cpc	r19, r1
    11b4:	21 f1       	breq	.+72     	; 0x11fe <EXI_u8EnablePIE+0x1a4>
    11b6:	8e 81       	ldd	r24, Y+6	; 0x06
    11b8:	9f 81       	ldd	r25, Y+7	; 0x07
    11ba:	83 30       	cpi	r24, 0x03	; 3
    11bc:	91 05       	cpc	r25, r1
    11be:	71 f1       	breq	.+92     	; 0x121c <EXI_u8EnablePIE+0x1c2>
    11c0:	64 c0       	rjmp	.+200    	; 0x128a <EXI_u8EnablePIE+0x230>
				{
					case EXI_U8_SENSE_LOW_LEVEL		: CLR_BIT( EXI_U8_MCUCR_REG, EXI_U8_ISC10_BIT ); CLR_BIT( EXI_U8_MCUCR_REG, EXI_U8_ISC11_BIT ); break;
    11c2:	a5 e5       	ldi	r26, 0x55	; 85
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	e5 e5       	ldi	r30, 0x55	; 85
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	8b 7f       	andi	r24, 0xFB	; 251
    11ce:	8c 93       	st	X, r24
    11d0:	a5 e5       	ldi	r26, 0x55	; 85
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	e5 e5       	ldi	r30, 0x55	; 85
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	87 7f       	andi	r24, 0xF7	; 247
    11dc:	8c 93       	st	X, r24
    11de:	55 c0       	rjmp	.+170    	; 0x128a <EXI_u8EnablePIE+0x230>
					case EXI_U8_SENSE_LOGICAL_CHANGE: SET_BIT( EXI_U8_MCUCR_REG, EXI_U8_ISC10_BIT ); CLR_BIT( EXI_U8_MCUCR_REG, EXI_U8_ISC11_BIT ); break;
    11e0:	a5 e5       	ldi	r26, 0x55	; 85
    11e2:	b0 e0       	ldi	r27, 0x00	; 0
    11e4:	e5 e5       	ldi	r30, 0x55	; 85
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	80 81       	ld	r24, Z
    11ea:	84 60       	ori	r24, 0x04	; 4
    11ec:	8c 93       	st	X, r24
    11ee:	a5 e5       	ldi	r26, 0x55	; 85
    11f0:	b0 e0       	ldi	r27, 0x00	; 0
    11f2:	e5 e5       	ldi	r30, 0x55	; 85
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	87 7f       	andi	r24, 0xF7	; 247
    11fa:	8c 93       	st	X, r24
    11fc:	46 c0       	rjmp	.+140    	; 0x128a <EXI_u8EnablePIE+0x230>
					case EXI_U8_SENSE_FALLING_EDGE	: CLR_BIT( EXI_U8_MCUCR_REG, EXI_U8_ISC10_BIT ); SET_BIT( EXI_U8_MCUCR_REG, EXI_U8_ISC11_BIT ); break;
    11fe:	a5 e5       	ldi	r26, 0x55	; 85
    1200:	b0 e0       	ldi	r27, 0x00	; 0
    1202:	e5 e5       	ldi	r30, 0x55	; 85
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	8b 7f       	andi	r24, 0xFB	; 251
    120a:	8c 93       	st	X, r24
    120c:	a5 e5       	ldi	r26, 0x55	; 85
    120e:	b0 e0       	ldi	r27, 0x00	; 0
    1210:	e5 e5       	ldi	r30, 0x55	; 85
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	88 60       	ori	r24, 0x08	; 8
    1218:	8c 93       	st	X, r24
    121a:	37 c0       	rjmp	.+110    	; 0x128a <EXI_u8EnablePIE+0x230>
					case EXI_U8_SENSE_RISING_EDGE	: SET_BIT( EXI_U8_MCUCR_REG, EXI_U8_ISC10_BIT ); SET_BIT( EXI_U8_MCUCR_REG, EXI_U8_ISC11_BIT ); break;
    121c:	a5 e5       	ldi	r26, 0x55	; 85
    121e:	b0 e0       	ldi	r27, 0x00	; 0
    1220:	e5 e5       	ldi	r30, 0x55	; 85
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	84 60       	ori	r24, 0x04	; 4
    1228:	8c 93       	st	X, r24
    122a:	a5 e5       	ldi	r26, 0x55	; 85
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	e5 e5       	ldi	r30, 0x55	; 85
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	88 60       	ori	r24, 0x08	; 8
    1236:	8c 93       	st	X, r24
    1238:	28 c0       	rjmp	.+80     	; 0x128a <EXI_u8EnablePIE+0x230>
				}
			break;

			case EXI_U8_INT2:
				/* Enable Interrupt 2 */
				SET_BIT( EXI_U8_GICR_REG, EXI_U8_INT2_BIT );
    123a:	ab e5       	ldi	r26, 0x5B	; 91
    123c:	b0 e0       	ldi	r27, 0x00	; 0
    123e:	eb e5       	ldi	r30, 0x5B	; 91
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	80 62       	ori	r24, 0x20	; 32
    1246:	8c 93       	st	X, r24

				/* Check 1.1.3: Required SenseControl */
				switch( Cpy_u8SenseControl )
    1248:	8b 81       	ldd	r24, Y+3	; 0x03
    124a:	28 2f       	mov	r18, r24
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	3d 83       	std	Y+5, r19	; 0x05
    1250:	2c 83       	std	Y+4, r18	; 0x04
    1252:	8c 81       	ldd	r24, Y+4	; 0x04
    1254:	9d 81       	ldd	r25, Y+5	; 0x05
    1256:	82 30       	cpi	r24, 0x02	; 2
    1258:	91 05       	cpc	r25, r1
    125a:	31 f0       	breq	.+12     	; 0x1268 <EXI_u8EnablePIE+0x20e>
    125c:	2c 81       	ldd	r18, Y+4	; 0x04
    125e:	3d 81       	ldd	r19, Y+5	; 0x05
    1260:	23 30       	cpi	r18, 0x03	; 3
    1262:	31 05       	cpc	r19, r1
    1264:	49 f0       	breq	.+18     	; 0x1278 <EXI_u8EnablePIE+0x21e>
    1266:	11 c0       	rjmp	.+34     	; 0x128a <EXI_u8EnablePIE+0x230>
				{
					case EXI_U8_SENSE_FALLING_EDGE: CLR_BIT( EXI_U8_MCUCSR_REG, EXI_U8_ISC2_BIT ); break;
    1268:	a4 e5       	ldi	r26, 0x54	; 84
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	e4 e5       	ldi	r30, 0x54	; 84
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	8f 7b       	andi	r24, 0xBF	; 191
    1274:	8c 93       	st	X, r24
    1276:	09 c0       	rjmp	.+18     	; 0x128a <EXI_u8EnablePIE+0x230>
					case EXI_U8_SENSE_RISING_EDGE :	SET_BIT( EXI_U8_MCUCSR_REG, EXI_U8_ISC2_BIT ); break;
    1278:	a4 e5       	ldi	r26, 0x54	; 84
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	e4 e5       	ldi	r30, 0x54	; 84
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	80 64       	ori	r24, 0x40	; 64
    1284:	8c 93       	st	X, r24
    1286:	01 c0       	rjmp	.+2      	; 0x128a <EXI_u8EnablePIE+0x230>
	}
	/* Check 2: InterruptId or the Sense Control is not in the valid range */
	else
	{
		/* Update error state = NOK, wrong InterruptId or Sense Control! */
		Loc_u8ErrorState = STD_TYPES_NOK;
    1288:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return Loc_u8ErrorState;
    128a:	89 81       	ldd	r24, Y+1	; 0x01
}
    128c:	2b 96       	adiw	r28, 0x0b	; 11
    128e:	0f b6       	in	r0, 0x3f	; 63
    1290:	f8 94       	cli
    1292:	de bf       	out	0x3e, r29	; 62
    1294:	0f be       	out	0x3f, r0	; 63
    1296:	cd bf       	out	0x3d, r28	; 61
    1298:	cf 91       	pop	r28
    129a:	df 91       	pop	r29
    129c:	08 95       	ret

0000129e <EXI_u8DisablePIE>:
 Input: u8 InterruptId
 Output: u8 Error or No Error
 Description: Function to disable Peripheral Interrupt Enable (PIE), by clearing relevant bit for each interrupt in GICR register.
*/
u8 EXI_u8DisablePIE ( u8 Cpy_u8InterruptId )
{
    129e:	df 93       	push	r29
    12a0:	cf 93       	push	r28
    12a2:	00 d0       	rcall	.+0      	; 0x12a4 <EXI_u8DisablePIE+0x6>
    12a4:	00 d0       	rcall	.+0      	; 0x12a6 <EXI_u8DisablePIE+0x8>
    12a6:	cd b7       	in	r28, 0x3d	; 61
    12a8:	de b7       	in	r29, 0x3e	; 62
    12aa:	8a 83       	std	Y+2, r24	; 0x02
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	89 83       	std	Y+1, r24	; 0x01
	
	/* Check 1: InterruptId is in the valid range */
	if ( Cpy_u8InterruptId <= EXI_U8_INT2 )
    12b0:	8a 81       	ldd	r24, Y+2	; 0x02
    12b2:	83 30       	cpi	r24, 0x03	; 3
    12b4:	58 f5       	brcc	.+86     	; 0x130c <EXI_u8DisablePIE+0x6e>
	{
		/* Check 1.1: Required InterruptId */
		switch ( Cpy_u8InterruptId )
    12b6:	8a 81       	ldd	r24, Y+2	; 0x02
    12b8:	28 2f       	mov	r18, r24
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	3c 83       	std	Y+4, r19	; 0x04
    12be:	2b 83       	std	Y+3, r18	; 0x03
    12c0:	8b 81       	ldd	r24, Y+3	; 0x03
    12c2:	9c 81       	ldd	r25, Y+4	; 0x04
    12c4:	81 30       	cpi	r24, 0x01	; 1
    12c6:	91 05       	cpc	r25, r1
    12c8:	89 f0       	breq	.+34     	; 0x12ec <EXI_u8DisablePIE+0x4e>
    12ca:	2b 81       	ldd	r18, Y+3	; 0x03
    12cc:	3c 81       	ldd	r19, Y+4	; 0x04
    12ce:	22 30       	cpi	r18, 0x02	; 2
    12d0:	31 05       	cpc	r19, r1
    12d2:	a1 f0       	breq	.+40     	; 0x12fc <EXI_u8DisablePIE+0x5e>
    12d4:	8b 81       	ldd	r24, Y+3	; 0x03
    12d6:	9c 81       	ldd	r25, Y+4	; 0x04
    12d8:	00 97       	sbiw	r24, 0x00	; 0
    12da:	c9 f4       	brne	.+50     	; 0x130e <EXI_u8DisablePIE+0x70>
		{
			case EXI_U8_INT0: CLR_BIT( EXI_U8_GICR_REG, EXI_U8_INT0_BIT ); break;
    12dc:	ab e5       	ldi	r26, 0x5B	; 91
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	eb e5       	ldi	r30, 0x5B	; 91
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	8f 7b       	andi	r24, 0xBF	; 191
    12e8:	8c 93       	st	X, r24
    12ea:	11 c0       	rjmp	.+34     	; 0x130e <EXI_u8DisablePIE+0x70>
			case EXI_U8_INT1: CLR_BIT( EXI_U8_GICR_REG, EXI_U8_INT1_BIT ); break;
    12ec:	ab e5       	ldi	r26, 0x5B	; 91
    12ee:	b0 e0       	ldi	r27, 0x00	; 0
    12f0:	eb e5       	ldi	r30, 0x5B	; 91
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	8f 77       	andi	r24, 0x7F	; 127
    12f8:	8c 93       	st	X, r24
    12fa:	09 c0       	rjmp	.+18     	; 0x130e <EXI_u8DisablePIE+0x70>
			case EXI_U8_INT2: CLR_BIT( EXI_U8_GICR_REG, EXI_U8_INT2_BIT ); break;
    12fc:	ab e5       	ldi	r26, 0x5B	; 91
    12fe:	b0 e0       	ldi	r27, 0x00	; 0
    1300:	eb e5       	ldi	r30, 0x5B	; 91
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 81       	ld	r24, Z
    1306:	8f 7d       	andi	r24, 0xDF	; 223
    1308:	8c 93       	st	X, r24
    130a:	01 c0       	rjmp	.+2      	; 0x130e <EXI_u8DisablePIE+0x70>
	}
	/* Check 2: InterruptId is not in the valid range */
	else
	{
		/* Update error state = NOK, wrong InterruptId! */
		Loc_u8ErrorState = STD_TYPES_NOK;
    130c:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return Loc_u8ErrorState;
    130e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1310:	0f 90       	pop	r0
    1312:	0f 90       	pop	r0
    1314:	0f 90       	pop	r0
    1316:	0f 90       	pop	r0
    1318:	cf 91       	pop	r28
    131a:	df 91       	pop	r29
    131c:	08 95       	ret

0000131e <EXI_u8SetCallBack>:
 Output: u8 Error or No Error
 Description: Function to receive an address of a function ( in APP Layer ) to be called back in ISR function of the passed Interrupt ( InterruptId ),
 	 	 	  the address is passed through a pointer to function ( InterruptAction ), and then pass this address to ISR function.
*/
u8 EXI_u8SetCallBack( u8 Cpy_u8InterruptId, void ( *Cpy_pfInterruptAction ) ( void ) )
{
    131e:	df 93       	push	r29
    1320:	cf 93       	push	r28
    1322:	00 d0       	rcall	.+0      	; 0x1324 <EXI_u8SetCallBack+0x6>
    1324:	00 d0       	rcall	.+0      	; 0x1326 <EXI_u8SetCallBack+0x8>
    1326:	cd b7       	in	r28, 0x3d	; 61
    1328:	de b7       	in	r29, 0x3e	; 62
    132a:	8a 83       	std	Y+2, r24	; 0x02
    132c:	7c 83       	std	Y+4, r23	; 0x04
    132e:	6b 83       	std	Y+3, r22	; 0x03
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	89 83       	std	Y+1, r24	; 0x01

	/* Check 1: InterruptId is in the valid range, and Pointer to Function is not equal to NULL */
	if( ( Cpy_u8InterruptId <= EXI_U8_INT2 ) && ( Cpy_pfInterruptAction != NULL ) )
    1334:	8a 81       	ldd	r24, Y+2	; 0x02
    1336:	83 30       	cpi	r24, 0x03	; 3
    1338:	88 f4       	brcc	.+34     	; 0x135c <EXI_u8SetCallBack+0x3e>
    133a:	8b 81       	ldd	r24, Y+3	; 0x03
    133c:	9c 81       	ldd	r25, Y+4	; 0x04
    133e:	00 97       	sbiw	r24, 0x00	; 0
    1340:	69 f0       	breq	.+26     	; 0x135c <EXI_u8SetCallBack+0x3e>
	{
		/* Store the passed address of function ( in APP Layer ) through pointer to function ( InterruptAction ) into Global Array of Pointers to Functions ( InterruptsAction ) in the passed index ( InterruptId ). */
		Glb_ApfInterrupstAction[Cpy_u8InterruptId] = Cpy_pfInterruptAction;
    1342:	8a 81       	ldd	r24, Y+2	; 0x02
    1344:	88 2f       	mov	r24, r24
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	88 0f       	add	r24, r24
    134a:	99 1f       	adc	r25, r25
    134c:	fc 01       	movw	r30, r24
    134e:	e2 58       	subi	r30, 0x82	; 130
    1350:	ff 4f       	sbci	r31, 0xFF	; 255
    1352:	8b 81       	ldd	r24, Y+3	; 0x03
    1354:	9c 81       	ldd	r25, Y+4	; 0x04
    1356:	91 83       	std	Z+1, r25	; 0x01
    1358:	80 83       	st	Z, r24
    135a:	01 c0       	rjmp	.+2      	; 0x135e <EXI_u8SetCallBack+0x40>
	}
	/* Check 2: InterruptId is not in the valid range, or Pointer to Function is equal to NULL */
	else
	{
		/* Update error state = NOK, wrong InterruptId, or Pointer to Function is NULL! */
		Loc_u8ErrorState = STD_TYPES_NOK;
    135c:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return Loc_u8ErrorState;
    135e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1360:	0f 90       	pop	r0
    1362:	0f 90       	pop	r0
    1364:	0f 90       	pop	r0
    1366:	0f 90       	pop	r0
    1368:	cf 91       	pop	r28
    136a:	df 91       	pop	r29
    136c:	08 95       	ret

0000136e <__vector_1>:
void __vector_3( void )		__attribute__((signal));


/* ISR function implementation of INT0 */
void __vector_1( void )
{
    136e:	1f 92       	push	r1
    1370:	0f 92       	push	r0
    1372:	0f b6       	in	r0, 0x3f	; 63
    1374:	0f 92       	push	r0
    1376:	11 24       	eor	r1, r1
    1378:	2f 93       	push	r18
    137a:	3f 93       	push	r19
    137c:	4f 93       	push	r20
    137e:	5f 93       	push	r21
    1380:	6f 93       	push	r22
    1382:	7f 93       	push	r23
    1384:	8f 93       	push	r24
    1386:	9f 93       	push	r25
    1388:	af 93       	push	r26
    138a:	bf 93       	push	r27
    138c:	ef 93       	push	r30
    138e:	ff 93       	push	r31
    1390:	df 93       	push	r29
    1392:	cf 93       	push	r28
    1394:	cd b7       	in	r28, 0x3d	; 61
    1396:	de b7       	in	r29, 0x3e	; 62
	/* Check: INT0 index of the Global Array is not equal to NULL */
	if ( Glb_ApfInterrupstAction[EXI_U8_INT0] != NULL )
    1398:	80 91 7e 00 	lds	r24, 0x007E
    139c:	90 91 7f 00 	lds	r25, 0x007F
    13a0:	00 97       	sbiw	r24, 0x00	; 0
    13a2:	29 f0       	breq	.+10     	; 0x13ae <__vector_1+0x40>
	{
		/* Call Back the function ( in APP Layer ), which its address is stored in the Global Array of Pointers to Functions ( InterruptsAction ) */
		Glb_ApfInterrupstAction[EXI_U8_INT0]();
    13a4:	e0 91 7e 00 	lds	r30, 0x007E
    13a8:	f0 91 7f 00 	lds	r31, 0x007F
    13ac:	09 95       	icall
	}	
}
    13ae:	cf 91       	pop	r28
    13b0:	df 91       	pop	r29
    13b2:	ff 91       	pop	r31
    13b4:	ef 91       	pop	r30
    13b6:	bf 91       	pop	r27
    13b8:	af 91       	pop	r26
    13ba:	9f 91       	pop	r25
    13bc:	8f 91       	pop	r24
    13be:	7f 91       	pop	r23
    13c0:	6f 91       	pop	r22
    13c2:	5f 91       	pop	r21
    13c4:	4f 91       	pop	r20
    13c6:	3f 91       	pop	r19
    13c8:	2f 91       	pop	r18
    13ca:	0f 90       	pop	r0
    13cc:	0f be       	out	0x3f, r0	; 63
    13ce:	0f 90       	pop	r0
    13d0:	1f 90       	pop	r1
    13d2:	18 95       	reti

000013d4 <__vector_2>:

/* ISR function implementation of INT1 */
void __vector_2( void )
{
    13d4:	1f 92       	push	r1
    13d6:	0f 92       	push	r0
    13d8:	0f b6       	in	r0, 0x3f	; 63
    13da:	0f 92       	push	r0
    13dc:	11 24       	eor	r1, r1
    13de:	2f 93       	push	r18
    13e0:	3f 93       	push	r19
    13e2:	4f 93       	push	r20
    13e4:	5f 93       	push	r21
    13e6:	6f 93       	push	r22
    13e8:	7f 93       	push	r23
    13ea:	8f 93       	push	r24
    13ec:	9f 93       	push	r25
    13ee:	af 93       	push	r26
    13f0:	bf 93       	push	r27
    13f2:	ef 93       	push	r30
    13f4:	ff 93       	push	r31
    13f6:	df 93       	push	r29
    13f8:	cf 93       	push	r28
    13fa:	cd b7       	in	r28, 0x3d	; 61
    13fc:	de b7       	in	r29, 0x3e	; 62
	/* Check: INT1 index of the Global Array is not equal to NULL */
	if( Glb_ApfInterrupstAction[EXI_U8_INT1] != NULL )
    13fe:	80 91 80 00 	lds	r24, 0x0080
    1402:	90 91 81 00 	lds	r25, 0x0081
    1406:	00 97       	sbiw	r24, 0x00	; 0
    1408:	29 f0       	breq	.+10     	; 0x1414 <__vector_2+0x40>
	{
		/* Call Back the function ( in APP Layer ), which its address is stored in the Global Array of Pointers to Functions ( InterruptsAction ) */
		Glb_ApfInterrupstAction[EXI_U8_INT1]();
    140a:	e0 91 80 00 	lds	r30, 0x0080
    140e:	f0 91 81 00 	lds	r31, 0x0081
    1412:	09 95       	icall
	}	
}
    1414:	cf 91       	pop	r28
    1416:	df 91       	pop	r29
    1418:	ff 91       	pop	r31
    141a:	ef 91       	pop	r30
    141c:	bf 91       	pop	r27
    141e:	af 91       	pop	r26
    1420:	9f 91       	pop	r25
    1422:	8f 91       	pop	r24
    1424:	7f 91       	pop	r23
    1426:	6f 91       	pop	r22
    1428:	5f 91       	pop	r21
    142a:	4f 91       	pop	r20
    142c:	3f 91       	pop	r19
    142e:	2f 91       	pop	r18
    1430:	0f 90       	pop	r0
    1432:	0f be       	out	0x3f, r0	; 63
    1434:	0f 90       	pop	r0
    1436:	1f 90       	pop	r1
    1438:	18 95       	reti

0000143a <__vector_3>:

/* ISR function implementation of INT2 */
void __vector_3( void )
{
    143a:	1f 92       	push	r1
    143c:	0f 92       	push	r0
    143e:	0f b6       	in	r0, 0x3f	; 63
    1440:	0f 92       	push	r0
    1442:	11 24       	eor	r1, r1
    1444:	2f 93       	push	r18
    1446:	3f 93       	push	r19
    1448:	4f 93       	push	r20
    144a:	5f 93       	push	r21
    144c:	6f 93       	push	r22
    144e:	7f 93       	push	r23
    1450:	8f 93       	push	r24
    1452:	9f 93       	push	r25
    1454:	af 93       	push	r26
    1456:	bf 93       	push	r27
    1458:	ef 93       	push	r30
    145a:	ff 93       	push	r31
    145c:	df 93       	push	r29
    145e:	cf 93       	push	r28
    1460:	cd b7       	in	r28, 0x3d	; 61
    1462:	de b7       	in	r29, 0x3e	; 62
	/* Check: INT2 index of the Global Array is not equal to NULL */
	if( Glb_ApfInterrupstAction[EXI_U8_INT2] != NULL )
    1464:	80 91 82 00 	lds	r24, 0x0082
    1468:	90 91 83 00 	lds	r25, 0x0083
    146c:	00 97       	sbiw	r24, 0x00	; 0
    146e:	29 f0       	breq	.+10     	; 0x147a <__vector_3+0x40>
	{
		/* Call Back the function ( in APP Layer ), which its address is stored in the Global Array of Pointers to Functions ( InterruptsAction ) */
		Glb_ApfInterrupstAction[EXI_U8_INT2]();
    1470:	e0 91 82 00 	lds	r30, 0x0082
    1474:	f0 91 83 00 	lds	r31, 0x0083
    1478:	09 95       	icall
	}	
}
    147a:	cf 91       	pop	r28
    147c:	df 91       	pop	r29
    147e:	ff 91       	pop	r31
    1480:	ef 91       	pop	r30
    1482:	bf 91       	pop	r27
    1484:	af 91       	pop	r26
    1486:	9f 91       	pop	r25
    1488:	8f 91       	pop	r24
    148a:	7f 91       	pop	r23
    148c:	6f 91       	pop	r22
    148e:	5f 91       	pop	r21
    1490:	4f 91       	pop	r20
    1492:	3f 91       	pop	r19
    1494:	2f 91       	pop	r18
    1496:	0f 90       	pop	r0
    1498:	0f be       	out	0x3f, r0	; 63
    149a:	0f 90       	pop	r0
    149c:	1f 90       	pop	r1
    149e:	18 95       	reti

000014a0 <DIO_vdInitialization>:
 Input: void
 Output: void
 Description: Function to Initialize DIO peripheral.
*/
vd DIO_vdInitialization  ( void )
{
    14a0:	df 93       	push	r29
    14a2:	cf 93       	push	r28
    14a4:	cd b7       	in	r28, 0x3d	; 61
    14a6:	de b7       	in	r29, 0x3e	; 62
	/* Set Initial Port Direction */
	/* PORTA */
	DIO_U8_DDRA_REG = DIO_U8_CONC( DIO_U8_PA7_INITIAL_DIRECTION, DIO_U8_PA6_INITIAL_DIRECTION, DIO_U8_PA5_INITIAL_DIRECTION, DIO_U8_PA4_INITIAL_DIRECTION, DIO_U8_PA3_INITIAL_DIRECTION, DIO_U8_PA2_INITIAL_DIRECTION, DIO_U8_PA1_INITIAL_DIRECTION, DIO_U8_PA0_INITIAL_DIRECTION );
    14a8:	ea e3       	ldi	r30, 0x3A	; 58
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	87 e0       	ldi	r24, 0x07	; 7
    14ae:	80 83       	st	Z, r24
	/* PORTB */
	DIO_U8_DDRB_REG = DIO_U8_CONC( DIO_U8_PB7_INITIAL_DIRECTION, DIO_U8_PB6_INITIAL_DIRECTION, DIO_U8_PB5_INITIAL_DIRECTION, DIO_U8_PB4_INITIAL_DIRECTION, DIO_U8_PB3_INITIAL_DIRECTION, DIO_U8_PB2_INITIAL_DIRECTION, DIO_U8_PB1_INITIAL_DIRECTION, DIO_U8_PB0_INITIAL_DIRECTION );
    14b0:	e7 e3       	ldi	r30, 0x37	; 55
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	87 e0       	ldi	r24, 0x07	; 7
    14b6:	80 83       	st	Z, r24
	/* PORTC */
	DIO_U8_DDRC_REG = DIO_U8_CONC( DIO_U8_PC7_INITIAL_DIRECTION, DIO_U8_PC6_INITIAL_DIRECTION, DIO_U8_PC5_INITIAL_DIRECTION, DIO_U8_PC4_INITIAL_DIRECTION, DIO_U8_PC3_INITIAL_DIRECTION, DIO_U8_PC2_INITIAL_DIRECTION, DIO_U8_PC1_INITIAL_DIRECTION, DIO_U8_PC0_INITIAL_DIRECTION );
    14b8:	e4 e3       	ldi	r30, 0x34	; 52
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	10 82       	st	Z, r1
	/* PORTD */
	DIO_U8_DDRD_REG = DIO_U8_CONC( DIO_U8_PD7_INITIAL_DIRECTION, DIO_U8_PD6_INITIAL_DIRECTION, DIO_U8_PD5_INITIAL_DIRECTION, DIO_U8_PD4_INITIAL_DIRECTION, DIO_U8_PD3_INITIAL_DIRECTION, DIO_U8_PD2_INITIAL_DIRECTION, DIO_U8_PD1_INITIAL_DIRECTION, DIO_U8_PD0_INITIAL_DIRECTION );
    14be:	e1 e3       	ldi	r30, 0x31	; 49
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	10 82       	st	Z, r1
	
	/* Set Initial Port Value */
	/* PORTA */
	DIO_U8_PORTA_REG = DIO_U8_CONC( DIO_U8_PA7_INITIAL_VALUE, DIO_U8_PA6_INITIAL_VALUE, DIO_U8_PA5_INITIAL_VALUE, DIO_U8_PA4_INITIAL_VALUE, DIO_U8_PA3_INITIAL_VALUE, DIO_U8_PA2_INITIAL_VALUE, DIO_U8_PA1_INITIAL_VALUE, DIO_U8_PA0_INITIAL_VALUE );
    14c4:	eb e3       	ldi	r30, 0x3B	; 59
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	80 83       	st	Z, r24
	/* PORTB */
	DIO_U8_PORTB_REG = DIO_U8_CONC( DIO_U8_PB7_INITIAL_VALUE, DIO_U8_PB6_INITIAL_VALUE, DIO_U8_PB5_INITIAL_VALUE, DIO_U8_PB4_INITIAL_VALUE, DIO_U8_PB3_INITIAL_VALUE, DIO_U8_PB2_INITIAL_VALUE, DIO_U8_PB1_INITIAL_VALUE, DIO_U8_PB0_INITIAL_VALUE );
    14cc:	e8 e3       	ldi	r30, 0x38	; 56
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	84 e0       	ldi	r24, 0x04	; 4
    14d2:	80 83       	st	Z, r24
	/* PORTC */
	DIO_U8_PORTC_REG = DIO_U8_CONC( DIO_U8_PC7_INITIAL_VALUE, DIO_U8_PC6_INITIAL_VALUE, DIO_U8_PC5_INITIAL_VALUE, DIO_U8_PC4_INITIAL_VALUE, DIO_U8_PC3_INITIAL_VALUE, DIO_U8_PC2_INITIAL_VALUE, DIO_U8_PC1_INITIAL_VALUE, DIO_U8_PC0_INITIAL_VALUE );
    14d4:	e5 e3       	ldi	r30, 0x35	; 53
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	10 82       	st	Z, r1
	/* PORTD */
	DIO_U8_PORTD_REG = DIO_U8_CONC( DIO_U8_PD7_INITIAL_VALUE, DIO_U8_PD6_INITIAL_VALUE, DIO_U8_PD5_INITIAL_VALUE, DIO_U8_PD4_INITIAL_VALUE, DIO_U8_PD3_INITIAL_VALUE, DIO_U8_PD2_INITIAL_VALUE, DIO_U8_PD1_INITIAL_VALUE, DIO_U8_PD0_INITIAL_VALUE );
    14da:	e2 e3       	ldi	r30, 0x32	; 50
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	84 e0       	ldi	r24, 0x04	; 4
    14e0:	80 83       	st	Z, r24
}
    14e2:	cf 91       	pop	r28
    14e4:	df 91       	pop	r29
    14e6:	08 95       	ret

000014e8 <DIO_u8SetPinDirection>:
 Input:  u8 PortId, u8 PinId, and u8 PinDirection
 Output: u8 Error or No Error
 Description: Function to set Pin direction.
*/
u8 DIO_u8SetPinDirection ( u8 Cpy_u8PortId, u8 Cpy_u8PinId, u8 Cpy_u8PinDirection )
{
    14e8:	df 93       	push	r29
    14ea:	cf 93       	push	r28
    14ec:	cd b7       	in	r28, 0x3d	; 61
    14ee:	de b7       	in	r29, 0x3e	; 62
    14f0:	28 97       	sbiw	r28, 0x08	; 8
    14f2:	0f b6       	in	r0, 0x3f	; 63
    14f4:	f8 94       	cli
    14f6:	de bf       	out	0x3e, r29	; 62
    14f8:	0f be       	out	0x3f, r0	; 63
    14fa:	cd bf       	out	0x3d, r28	; 61
    14fc:	8a 83       	std	Y+2, r24	; 0x02
    14fe:	6b 83       	std	Y+3, r22	; 0x03
    1500:	4c 83       	std	Y+4, r20	; 0x04
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	89 83       	std	Y+1, r24	; 0x01
	
	/* Check 1: PortId and PinId are in the valid range */
	if ( ( Cpy_u8PortId <= DIO_U8_PORTD ) && ( Cpy_u8PinId <= DIO_U8_PIN7 ) )
    1506:	8a 81       	ldd	r24, Y+2	; 0x02
    1508:	84 30       	cpi	r24, 0x04	; 4
    150a:	08 f0       	brcs	.+2      	; 0x150e <DIO_u8SetPinDirection+0x26>
    150c:	f1 c0       	rjmp	.+482    	; 0x16f0 <DIO_u8SetPinDirection+0x208>
    150e:	8b 81       	ldd	r24, Y+3	; 0x03
    1510:	88 30       	cpi	r24, 0x08	; 8
    1512:	08 f0       	brcs	.+2      	; 0x1516 <DIO_u8SetPinDirection+0x2e>
    1514:	ed c0       	rjmp	.+474    	; 0x16f0 <DIO_u8SetPinDirection+0x208>
	{
		/* Check 1.1: PinDirection is in the valid range */
		if ( Cpy_u8PinDirection == DIO_U8_PIN_INPUT )
    1516:	8c 81       	ldd	r24, Y+4	; 0x04
    1518:	88 23       	and	r24, r24
    151a:	09 f0       	breq	.+2      	; 0x151e <DIO_u8SetPinDirection+0x36>
    151c:	74 c0       	rjmp	.+232    	; 0x1606 <DIO_u8SetPinDirection+0x11e>
		{
			/* Check 1.1.1: Required PortId */
			switch ( Cpy_u8PortId )
    151e:	8a 81       	ldd	r24, Y+2	; 0x02
    1520:	28 2f       	mov	r18, r24
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	38 87       	std	Y+8, r19	; 0x08
    1526:	2f 83       	std	Y+7, r18	; 0x07
    1528:	8f 81       	ldd	r24, Y+7	; 0x07
    152a:	98 85       	ldd	r25, Y+8	; 0x08
    152c:	81 30       	cpi	r24, 0x01	; 1
    152e:	91 05       	cpc	r25, r1
    1530:	59 f1       	breq	.+86     	; 0x1588 <DIO_u8SetPinDirection+0xa0>
    1532:	2f 81       	ldd	r18, Y+7	; 0x07
    1534:	38 85       	ldd	r19, Y+8	; 0x08
    1536:	22 30       	cpi	r18, 0x02	; 2
    1538:	31 05       	cpc	r19, r1
    153a:	2c f4       	brge	.+10     	; 0x1546 <DIO_u8SetPinDirection+0x5e>
    153c:	8f 81       	ldd	r24, Y+7	; 0x07
    153e:	98 85       	ldd	r25, Y+8	; 0x08
    1540:	00 97       	sbiw	r24, 0x00	; 0
    1542:	69 f0       	breq	.+26     	; 0x155e <DIO_u8SetPinDirection+0x76>
    1544:	d6 c0       	rjmp	.+428    	; 0x16f2 <DIO_u8SetPinDirection+0x20a>
    1546:	2f 81       	ldd	r18, Y+7	; 0x07
    1548:	38 85       	ldd	r19, Y+8	; 0x08
    154a:	22 30       	cpi	r18, 0x02	; 2
    154c:	31 05       	cpc	r19, r1
    154e:	89 f1       	breq	.+98     	; 0x15b2 <DIO_u8SetPinDirection+0xca>
    1550:	8f 81       	ldd	r24, Y+7	; 0x07
    1552:	98 85       	ldd	r25, Y+8	; 0x08
    1554:	83 30       	cpi	r24, 0x03	; 3
    1556:	91 05       	cpc	r25, r1
    1558:	09 f4       	brne	.+2      	; 0x155c <DIO_u8SetPinDirection+0x74>
    155a:	40 c0       	rjmp	.+128    	; 0x15dc <DIO_u8SetPinDirection+0xf4>
    155c:	ca c0       	rjmp	.+404    	; 0x16f2 <DIO_u8SetPinDirection+0x20a>
			{
				case DIO_U8_PORTA: CLR_BIT( DIO_U8_DDRA_REG, Cpy_u8PinId ); break;
    155e:	aa e3       	ldi	r26, 0x3A	; 58
    1560:	b0 e0       	ldi	r27, 0x00	; 0
    1562:	ea e3       	ldi	r30, 0x3A	; 58
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	48 2f       	mov	r20, r24
    156a:	8b 81       	ldd	r24, Y+3	; 0x03
    156c:	28 2f       	mov	r18, r24
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	02 2e       	mov	r0, r18
    1576:	02 c0       	rjmp	.+4      	; 0x157c <DIO_u8SetPinDirection+0x94>
    1578:	88 0f       	add	r24, r24
    157a:	99 1f       	adc	r25, r25
    157c:	0a 94       	dec	r0
    157e:	e2 f7       	brpl	.-8      	; 0x1578 <DIO_u8SetPinDirection+0x90>
    1580:	80 95       	com	r24
    1582:	84 23       	and	r24, r20
    1584:	8c 93       	st	X, r24
    1586:	b5 c0       	rjmp	.+362    	; 0x16f2 <DIO_u8SetPinDirection+0x20a>
				case DIO_U8_PORTB: CLR_BIT( DIO_U8_DDRB_REG, Cpy_u8PinId ); break;
    1588:	a7 e3       	ldi	r26, 0x37	; 55
    158a:	b0 e0       	ldi	r27, 0x00	; 0
    158c:	e7 e3       	ldi	r30, 0x37	; 55
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	80 81       	ld	r24, Z
    1592:	48 2f       	mov	r20, r24
    1594:	8b 81       	ldd	r24, Y+3	; 0x03
    1596:	28 2f       	mov	r18, r24
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	02 2e       	mov	r0, r18
    15a0:	02 c0       	rjmp	.+4      	; 0x15a6 <DIO_u8SetPinDirection+0xbe>
    15a2:	88 0f       	add	r24, r24
    15a4:	99 1f       	adc	r25, r25
    15a6:	0a 94       	dec	r0
    15a8:	e2 f7       	brpl	.-8      	; 0x15a2 <DIO_u8SetPinDirection+0xba>
    15aa:	80 95       	com	r24
    15ac:	84 23       	and	r24, r20
    15ae:	8c 93       	st	X, r24
    15b0:	a0 c0       	rjmp	.+320    	; 0x16f2 <DIO_u8SetPinDirection+0x20a>
				case DIO_U8_PORTC: CLR_BIT( DIO_U8_DDRC_REG, Cpy_u8PinId ); break;
    15b2:	a4 e3       	ldi	r26, 0x34	; 52
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	e4 e3       	ldi	r30, 0x34	; 52
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	80 81       	ld	r24, Z
    15bc:	48 2f       	mov	r20, r24
    15be:	8b 81       	ldd	r24, Y+3	; 0x03
    15c0:	28 2f       	mov	r18, r24
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	02 2e       	mov	r0, r18
    15ca:	02 c0       	rjmp	.+4      	; 0x15d0 <DIO_u8SetPinDirection+0xe8>
    15cc:	88 0f       	add	r24, r24
    15ce:	99 1f       	adc	r25, r25
    15d0:	0a 94       	dec	r0
    15d2:	e2 f7       	brpl	.-8      	; 0x15cc <DIO_u8SetPinDirection+0xe4>
    15d4:	80 95       	com	r24
    15d6:	84 23       	and	r24, r20
    15d8:	8c 93       	st	X, r24
    15da:	8b c0       	rjmp	.+278    	; 0x16f2 <DIO_u8SetPinDirection+0x20a>
				case DIO_U8_PORTD: CLR_BIT( DIO_U8_DDRD_REG, Cpy_u8PinId ); break;
    15dc:	a1 e3       	ldi	r26, 0x31	; 49
    15de:	b0 e0       	ldi	r27, 0x00	; 0
    15e0:	e1 e3       	ldi	r30, 0x31	; 49
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	80 81       	ld	r24, Z
    15e6:	48 2f       	mov	r20, r24
    15e8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ea:	28 2f       	mov	r18, r24
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	02 2e       	mov	r0, r18
    15f4:	02 c0       	rjmp	.+4      	; 0x15fa <DIO_u8SetPinDirection+0x112>
    15f6:	88 0f       	add	r24, r24
    15f8:	99 1f       	adc	r25, r25
    15fa:	0a 94       	dec	r0
    15fc:	e2 f7       	brpl	.-8      	; 0x15f6 <DIO_u8SetPinDirection+0x10e>
    15fe:	80 95       	com	r24
    1600:	84 23       	and	r24, r20
    1602:	8c 93       	st	X, r24
    1604:	76 c0       	rjmp	.+236    	; 0x16f2 <DIO_u8SetPinDirection+0x20a>
			}
		}
		/* Check 1.2: PinDirection is in the valid range */
		else if ( Cpy_u8PinDirection == DIO_U8_PIN_OUTPUT )
    1606:	8c 81       	ldd	r24, Y+4	; 0x04
    1608:	81 30       	cpi	r24, 0x01	; 1
    160a:	09 f0       	breq	.+2      	; 0x160e <DIO_u8SetPinDirection+0x126>
    160c:	6f c0       	rjmp	.+222    	; 0x16ec <DIO_u8SetPinDirection+0x204>
		{
			/* Check 1.2.1: Required PortId */
			switch ( Cpy_u8PortId )
    160e:	8a 81       	ldd	r24, Y+2	; 0x02
    1610:	28 2f       	mov	r18, r24
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	3e 83       	std	Y+6, r19	; 0x06
    1616:	2d 83       	std	Y+5, r18	; 0x05
    1618:	8d 81       	ldd	r24, Y+5	; 0x05
    161a:	9e 81       	ldd	r25, Y+6	; 0x06
    161c:	81 30       	cpi	r24, 0x01	; 1
    161e:	91 05       	cpc	r25, r1
    1620:	49 f1       	breq	.+82     	; 0x1674 <DIO_u8SetPinDirection+0x18c>
    1622:	2d 81       	ldd	r18, Y+5	; 0x05
    1624:	3e 81       	ldd	r19, Y+6	; 0x06
    1626:	22 30       	cpi	r18, 0x02	; 2
    1628:	31 05       	cpc	r19, r1
    162a:	2c f4       	brge	.+10     	; 0x1636 <DIO_u8SetPinDirection+0x14e>
    162c:	8d 81       	ldd	r24, Y+5	; 0x05
    162e:	9e 81       	ldd	r25, Y+6	; 0x06
    1630:	00 97       	sbiw	r24, 0x00	; 0
    1632:	61 f0       	breq	.+24     	; 0x164c <DIO_u8SetPinDirection+0x164>
    1634:	5e c0       	rjmp	.+188    	; 0x16f2 <DIO_u8SetPinDirection+0x20a>
    1636:	2d 81       	ldd	r18, Y+5	; 0x05
    1638:	3e 81       	ldd	r19, Y+6	; 0x06
    163a:	22 30       	cpi	r18, 0x02	; 2
    163c:	31 05       	cpc	r19, r1
    163e:	71 f1       	breq	.+92     	; 0x169c <DIO_u8SetPinDirection+0x1b4>
    1640:	8d 81       	ldd	r24, Y+5	; 0x05
    1642:	9e 81       	ldd	r25, Y+6	; 0x06
    1644:	83 30       	cpi	r24, 0x03	; 3
    1646:	91 05       	cpc	r25, r1
    1648:	e9 f1       	breq	.+122    	; 0x16c4 <DIO_u8SetPinDirection+0x1dc>
    164a:	53 c0       	rjmp	.+166    	; 0x16f2 <DIO_u8SetPinDirection+0x20a>
			{
				case DIO_U8_PORTA: SET_BIT( DIO_U8_DDRA_REG, Cpy_u8PinId ); break;
    164c:	aa e3       	ldi	r26, 0x3A	; 58
    164e:	b0 e0       	ldi	r27, 0x00	; 0
    1650:	ea e3       	ldi	r30, 0x3A	; 58
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	48 2f       	mov	r20, r24
    1658:	8b 81       	ldd	r24, Y+3	; 0x03
    165a:	28 2f       	mov	r18, r24
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	02 2e       	mov	r0, r18
    1664:	02 c0       	rjmp	.+4      	; 0x166a <DIO_u8SetPinDirection+0x182>
    1666:	88 0f       	add	r24, r24
    1668:	99 1f       	adc	r25, r25
    166a:	0a 94       	dec	r0
    166c:	e2 f7       	brpl	.-8      	; 0x1666 <DIO_u8SetPinDirection+0x17e>
    166e:	84 2b       	or	r24, r20
    1670:	8c 93       	st	X, r24
    1672:	3f c0       	rjmp	.+126    	; 0x16f2 <DIO_u8SetPinDirection+0x20a>
				case DIO_U8_PORTB: SET_BIT( DIO_U8_DDRB_REG, Cpy_u8PinId ); break;
    1674:	a7 e3       	ldi	r26, 0x37	; 55
    1676:	b0 e0       	ldi	r27, 0x00	; 0
    1678:	e7 e3       	ldi	r30, 0x37	; 55
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	80 81       	ld	r24, Z
    167e:	48 2f       	mov	r20, r24
    1680:	8b 81       	ldd	r24, Y+3	; 0x03
    1682:	28 2f       	mov	r18, r24
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	02 2e       	mov	r0, r18
    168c:	02 c0       	rjmp	.+4      	; 0x1692 <DIO_u8SetPinDirection+0x1aa>
    168e:	88 0f       	add	r24, r24
    1690:	99 1f       	adc	r25, r25
    1692:	0a 94       	dec	r0
    1694:	e2 f7       	brpl	.-8      	; 0x168e <DIO_u8SetPinDirection+0x1a6>
    1696:	84 2b       	or	r24, r20
    1698:	8c 93       	st	X, r24
    169a:	2b c0       	rjmp	.+86     	; 0x16f2 <DIO_u8SetPinDirection+0x20a>
				case DIO_U8_PORTC: SET_BIT( DIO_U8_DDRC_REG, Cpy_u8PinId ); break;
    169c:	a4 e3       	ldi	r26, 0x34	; 52
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	e4 e3       	ldi	r30, 0x34	; 52
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
    16a6:	48 2f       	mov	r20, r24
    16a8:	8b 81       	ldd	r24, Y+3	; 0x03
    16aa:	28 2f       	mov	r18, r24
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	81 e0       	ldi	r24, 0x01	; 1
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	02 2e       	mov	r0, r18
    16b4:	02 c0       	rjmp	.+4      	; 0x16ba <DIO_u8SetPinDirection+0x1d2>
    16b6:	88 0f       	add	r24, r24
    16b8:	99 1f       	adc	r25, r25
    16ba:	0a 94       	dec	r0
    16bc:	e2 f7       	brpl	.-8      	; 0x16b6 <DIO_u8SetPinDirection+0x1ce>
    16be:	84 2b       	or	r24, r20
    16c0:	8c 93       	st	X, r24
    16c2:	17 c0       	rjmp	.+46     	; 0x16f2 <DIO_u8SetPinDirection+0x20a>
				case DIO_U8_PORTD: SET_BIT( DIO_U8_DDRD_REG, Cpy_u8PinId ); break;
    16c4:	a1 e3       	ldi	r26, 0x31	; 49
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	e1 e3       	ldi	r30, 0x31	; 49
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	48 2f       	mov	r20, r24
    16d0:	8b 81       	ldd	r24, Y+3	; 0x03
    16d2:	28 2f       	mov	r18, r24
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	02 2e       	mov	r0, r18
    16dc:	02 c0       	rjmp	.+4      	; 0x16e2 <DIO_u8SetPinDirection+0x1fa>
    16de:	88 0f       	add	r24, r24
    16e0:	99 1f       	adc	r25, r25
    16e2:	0a 94       	dec	r0
    16e4:	e2 f7       	brpl	.-8      	; 0x16de <DIO_u8SetPinDirection+0x1f6>
    16e6:	84 2b       	or	r24, r20
    16e8:	8c 93       	st	X, r24
    16ea:	03 c0       	rjmp	.+6      	; 0x16f2 <DIO_u8SetPinDirection+0x20a>
		}
		/* Check 1.3: PinDirection is not in the valid range */
		else
		{
			/* Update error state = NOK, wrong PinDirection! */
			Loc_u8ErrorState = STD_TYPES_NOK;
    16ec:	19 82       	std	Y+1, r1	; 0x01
    16ee:	01 c0       	rjmp	.+2      	; 0x16f2 <DIO_u8SetPinDirection+0x20a>
	}
	/* Check 2: PortId or PinId is not in the valid range */
	else
	{
		/* Update error state = NOK, wrong PortId or PinId! */
		Loc_u8ErrorState = STD_TYPES_NOK;
    16f0:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return Loc_u8ErrorState;
    16f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    16f4:	28 96       	adiw	r28, 0x08	; 8
    16f6:	0f b6       	in	r0, 0x3f	; 63
    16f8:	f8 94       	cli
    16fa:	de bf       	out	0x3e, r29	; 62
    16fc:	0f be       	out	0x3f, r0	; 63
    16fe:	cd bf       	out	0x3d, r28	; 61
    1700:	cf 91       	pop	r28
    1702:	df 91       	pop	r29
    1704:	08 95       	ret

00001706 <DIO_u8SetPinValue>:
 Input:  u8 PortId, u8 PinId, and u8 PinValue
 Output: u8 Error or No Error
 Description: Function to set Pin value.
*/
u8 DIO_u8SetPinValue     ( u8 Cpy_u8PortId, u8 Cpy_u8PinId, u8 Cpy_u8PinValue )
{
    1706:	df 93       	push	r29
    1708:	cf 93       	push	r28
    170a:	cd b7       	in	r28, 0x3d	; 61
    170c:	de b7       	in	r29, 0x3e	; 62
    170e:	28 97       	sbiw	r28, 0x08	; 8
    1710:	0f b6       	in	r0, 0x3f	; 63
    1712:	f8 94       	cli
    1714:	de bf       	out	0x3e, r29	; 62
    1716:	0f be       	out	0x3f, r0	; 63
    1718:	cd bf       	out	0x3d, r28	; 61
    171a:	8a 83       	std	Y+2, r24	; 0x02
    171c:	6b 83       	std	Y+3, r22	; 0x03
    171e:	4c 83       	std	Y+4, r20	; 0x04
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	89 83       	std	Y+1, r24	; 0x01
	
	/* Check 1: PortId and PinId are in the valid range */
	if ( ( Cpy_u8PortId <= DIO_U8_PORTD ) && ( Cpy_u8PinId <= DIO_U8_PIN7 ) )
    1724:	8a 81       	ldd	r24, Y+2	; 0x02
    1726:	84 30       	cpi	r24, 0x04	; 4
    1728:	08 f0       	brcs	.+2      	; 0x172c <DIO_u8SetPinValue+0x26>
    172a:	f1 c0       	rjmp	.+482    	; 0x190e <DIO_u8SetPinValue+0x208>
    172c:	8b 81       	ldd	r24, Y+3	; 0x03
    172e:	88 30       	cpi	r24, 0x08	; 8
    1730:	08 f0       	brcs	.+2      	; 0x1734 <DIO_u8SetPinValue+0x2e>
    1732:	ed c0       	rjmp	.+474    	; 0x190e <DIO_u8SetPinValue+0x208>
	{
		/* Check 1.1: PinValue is in the valid range */
		if ( Cpy_u8PinValue == DIO_U8_PIN_LOW )
    1734:	8c 81       	ldd	r24, Y+4	; 0x04
    1736:	88 23       	and	r24, r24
    1738:	09 f0       	breq	.+2      	; 0x173c <DIO_u8SetPinValue+0x36>
    173a:	74 c0       	rjmp	.+232    	; 0x1824 <DIO_u8SetPinValue+0x11e>
		{
			/* Check 1.1.1: Required PortId */
			switch ( Cpy_u8PortId )
    173c:	8a 81       	ldd	r24, Y+2	; 0x02
    173e:	28 2f       	mov	r18, r24
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	38 87       	std	Y+8, r19	; 0x08
    1744:	2f 83       	std	Y+7, r18	; 0x07
    1746:	8f 81       	ldd	r24, Y+7	; 0x07
    1748:	98 85       	ldd	r25, Y+8	; 0x08
    174a:	81 30       	cpi	r24, 0x01	; 1
    174c:	91 05       	cpc	r25, r1
    174e:	59 f1       	breq	.+86     	; 0x17a6 <DIO_u8SetPinValue+0xa0>
    1750:	2f 81       	ldd	r18, Y+7	; 0x07
    1752:	38 85       	ldd	r19, Y+8	; 0x08
    1754:	22 30       	cpi	r18, 0x02	; 2
    1756:	31 05       	cpc	r19, r1
    1758:	2c f4       	brge	.+10     	; 0x1764 <DIO_u8SetPinValue+0x5e>
    175a:	8f 81       	ldd	r24, Y+7	; 0x07
    175c:	98 85       	ldd	r25, Y+8	; 0x08
    175e:	00 97       	sbiw	r24, 0x00	; 0
    1760:	69 f0       	breq	.+26     	; 0x177c <DIO_u8SetPinValue+0x76>
    1762:	d6 c0       	rjmp	.+428    	; 0x1910 <DIO_u8SetPinValue+0x20a>
    1764:	2f 81       	ldd	r18, Y+7	; 0x07
    1766:	38 85       	ldd	r19, Y+8	; 0x08
    1768:	22 30       	cpi	r18, 0x02	; 2
    176a:	31 05       	cpc	r19, r1
    176c:	89 f1       	breq	.+98     	; 0x17d0 <DIO_u8SetPinValue+0xca>
    176e:	8f 81       	ldd	r24, Y+7	; 0x07
    1770:	98 85       	ldd	r25, Y+8	; 0x08
    1772:	83 30       	cpi	r24, 0x03	; 3
    1774:	91 05       	cpc	r25, r1
    1776:	09 f4       	brne	.+2      	; 0x177a <DIO_u8SetPinValue+0x74>
    1778:	40 c0       	rjmp	.+128    	; 0x17fa <DIO_u8SetPinValue+0xf4>
    177a:	ca c0       	rjmp	.+404    	; 0x1910 <DIO_u8SetPinValue+0x20a>
			{
				case DIO_U8_PORTA: CLR_BIT( DIO_U8_PORTA_REG, Cpy_u8PinId ); break;
    177c:	ab e3       	ldi	r26, 0x3B	; 59
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	eb e3       	ldi	r30, 0x3B	; 59
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	48 2f       	mov	r20, r24
    1788:	8b 81       	ldd	r24, Y+3	; 0x03
    178a:	28 2f       	mov	r18, r24
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	02 2e       	mov	r0, r18
    1794:	02 c0       	rjmp	.+4      	; 0x179a <DIO_u8SetPinValue+0x94>
    1796:	88 0f       	add	r24, r24
    1798:	99 1f       	adc	r25, r25
    179a:	0a 94       	dec	r0
    179c:	e2 f7       	brpl	.-8      	; 0x1796 <DIO_u8SetPinValue+0x90>
    179e:	80 95       	com	r24
    17a0:	84 23       	and	r24, r20
    17a2:	8c 93       	st	X, r24
    17a4:	b5 c0       	rjmp	.+362    	; 0x1910 <DIO_u8SetPinValue+0x20a>
				case DIO_U8_PORTB: CLR_BIT( DIO_U8_PORTB_REG, Cpy_u8PinId ); break;
    17a6:	a8 e3       	ldi	r26, 0x38	; 56
    17a8:	b0 e0       	ldi	r27, 0x00	; 0
    17aa:	e8 e3       	ldi	r30, 0x38	; 56
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	48 2f       	mov	r20, r24
    17b2:	8b 81       	ldd	r24, Y+3	; 0x03
    17b4:	28 2f       	mov	r18, r24
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	02 2e       	mov	r0, r18
    17be:	02 c0       	rjmp	.+4      	; 0x17c4 <DIO_u8SetPinValue+0xbe>
    17c0:	88 0f       	add	r24, r24
    17c2:	99 1f       	adc	r25, r25
    17c4:	0a 94       	dec	r0
    17c6:	e2 f7       	brpl	.-8      	; 0x17c0 <DIO_u8SetPinValue+0xba>
    17c8:	80 95       	com	r24
    17ca:	84 23       	and	r24, r20
    17cc:	8c 93       	st	X, r24
    17ce:	a0 c0       	rjmp	.+320    	; 0x1910 <DIO_u8SetPinValue+0x20a>
				case DIO_U8_PORTC: CLR_BIT( DIO_U8_PORTC_REG, Cpy_u8PinId ); break;
    17d0:	a5 e3       	ldi	r26, 0x35	; 53
    17d2:	b0 e0       	ldi	r27, 0x00	; 0
    17d4:	e5 e3       	ldi	r30, 0x35	; 53
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	80 81       	ld	r24, Z
    17da:	48 2f       	mov	r20, r24
    17dc:	8b 81       	ldd	r24, Y+3	; 0x03
    17de:	28 2f       	mov	r18, r24
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	02 2e       	mov	r0, r18
    17e8:	02 c0       	rjmp	.+4      	; 0x17ee <DIO_u8SetPinValue+0xe8>
    17ea:	88 0f       	add	r24, r24
    17ec:	99 1f       	adc	r25, r25
    17ee:	0a 94       	dec	r0
    17f0:	e2 f7       	brpl	.-8      	; 0x17ea <DIO_u8SetPinValue+0xe4>
    17f2:	80 95       	com	r24
    17f4:	84 23       	and	r24, r20
    17f6:	8c 93       	st	X, r24
    17f8:	8b c0       	rjmp	.+278    	; 0x1910 <DIO_u8SetPinValue+0x20a>
				case DIO_U8_PORTD: CLR_BIT( DIO_U8_PORTD_REG, Cpy_u8PinId ); break;
    17fa:	a2 e3       	ldi	r26, 0x32	; 50
    17fc:	b0 e0       	ldi	r27, 0x00	; 0
    17fe:	e2 e3       	ldi	r30, 0x32	; 50
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	80 81       	ld	r24, Z
    1804:	48 2f       	mov	r20, r24
    1806:	8b 81       	ldd	r24, Y+3	; 0x03
    1808:	28 2f       	mov	r18, r24
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	02 2e       	mov	r0, r18
    1812:	02 c0       	rjmp	.+4      	; 0x1818 <DIO_u8SetPinValue+0x112>
    1814:	88 0f       	add	r24, r24
    1816:	99 1f       	adc	r25, r25
    1818:	0a 94       	dec	r0
    181a:	e2 f7       	brpl	.-8      	; 0x1814 <DIO_u8SetPinValue+0x10e>
    181c:	80 95       	com	r24
    181e:	84 23       	and	r24, r20
    1820:	8c 93       	st	X, r24
    1822:	76 c0       	rjmp	.+236    	; 0x1910 <DIO_u8SetPinValue+0x20a>
			}
		}
		/* Check 1.2: PinValue is in the valid range */
		else if ( Cpy_u8PinValue == DIO_U8_PIN_HIGH )
    1824:	8c 81       	ldd	r24, Y+4	; 0x04
    1826:	81 30       	cpi	r24, 0x01	; 1
    1828:	09 f0       	breq	.+2      	; 0x182c <DIO_u8SetPinValue+0x126>
    182a:	6f c0       	rjmp	.+222    	; 0x190a <DIO_u8SetPinValue+0x204>
		{
			/* Check 1.2.1: Required PortId */
			switch( Cpy_u8PortId )
    182c:	8a 81       	ldd	r24, Y+2	; 0x02
    182e:	28 2f       	mov	r18, r24
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	3e 83       	std	Y+6, r19	; 0x06
    1834:	2d 83       	std	Y+5, r18	; 0x05
    1836:	8d 81       	ldd	r24, Y+5	; 0x05
    1838:	9e 81       	ldd	r25, Y+6	; 0x06
    183a:	81 30       	cpi	r24, 0x01	; 1
    183c:	91 05       	cpc	r25, r1
    183e:	49 f1       	breq	.+82     	; 0x1892 <DIO_u8SetPinValue+0x18c>
    1840:	2d 81       	ldd	r18, Y+5	; 0x05
    1842:	3e 81       	ldd	r19, Y+6	; 0x06
    1844:	22 30       	cpi	r18, 0x02	; 2
    1846:	31 05       	cpc	r19, r1
    1848:	2c f4       	brge	.+10     	; 0x1854 <DIO_u8SetPinValue+0x14e>
    184a:	8d 81       	ldd	r24, Y+5	; 0x05
    184c:	9e 81       	ldd	r25, Y+6	; 0x06
    184e:	00 97       	sbiw	r24, 0x00	; 0
    1850:	61 f0       	breq	.+24     	; 0x186a <DIO_u8SetPinValue+0x164>
    1852:	5e c0       	rjmp	.+188    	; 0x1910 <DIO_u8SetPinValue+0x20a>
    1854:	2d 81       	ldd	r18, Y+5	; 0x05
    1856:	3e 81       	ldd	r19, Y+6	; 0x06
    1858:	22 30       	cpi	r18, 0x02	; 2
    185a:	31 05       	cpc	r19, r1
    185c:	71 f1       	breq	.+92     	; 0x18ba <DIO_u8SetPinValue+0x1b4>
    185e:	8d 81       	ldd	r24, Y+5	; 0x05
    1860:	9e 81       	ldd	r25, Y+6	; 0x06
    1862:	83 30       	cpi	r24, 0x03	; 3
    1864:	91 05       	cpc	r25, r1
    1866:	e9 f1       	breq	.+122    	; 0x18e2 <DIO_u8SetPinValue+0x1dc>
    1868:	53 c0       	rjmp	.+166    	; 0x1910 <DIO_u8SetPinValue+0x20a>
			{
				case DIO_U8_PORTA: SET_BIT( DIO_U8_PORTA_REG, Cpy_u8PinId ); break;
    186a:	ab e3       	ldi	r26, 0x3B	; 59
    186c:	b0 e0       	ldi	r27, 0x00	; 0
    186e:	eb e3       	ldi	r30, 0x3B	; 59
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	80 81       	ld	r24, Z
    1874:	48 2f       	mov	r20, r24
    1876:	8b 81       	ldd	r24, Y+3	; 0x03
    1878:	28 2f       	mov	r18, r24
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	02 2e       	mov	r0, r18
    1882:	02 c0       	rjmp	.+4      	; 0x1888 <DIO_u8SetPinValue+0x182>
    1884:	88 0f       	add	r24, r24
    1886:	99 1f       	adc	r25, r25
    1888:	0a 94       	dec	r0
    188a:	e2 f7       	brpl	.-8      	; 0x1884 <DIO_u8SetPinValue+0x17e>
    188c:	84 2b       	or	r24, r20
    188e:	8c 93       	st	X, r24
    1890:	3f c0       	rjmp	.+126    	; 0x1910 <DIO_u8SetPinValue+0x20a>
				case DIO_U8_PORTB: SET_BIT( DIO_U8_PORTB_REG, Cpy_u8PinId ); break;
    1892:	a8 e3       	ldi	r26, 0x38	; 56
    1894:	b0 e0       	ldi	r27, 0x00	; 0
    1896:	e8 e3       	ldi	r30, 0x38	; 56
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	48 2f       	mov	r20, r24
    189e:	8b 81       	ldd	r24, Y+3	; 0x03
    18a0:	28 2f       	mov	r18, r24
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	02 2e       	mov	r0, r18
    18aa:	02 c0       	rjmp	.+4      	; 0x18b0 <DIO_u8SetPinValue+0x1aa>
    18ac:	88 0f       	add	r24, r24
    18ae:	99 1f       	adc	r25, r25
    18b0:	0a 94       	dec	r0
    18b2:	e2 f7       	brpl	.-8      	; 0x18ac <DIO_u8SetPinValue+0x1a6>
    18b4:	84 2b       	or	r24, r20
    18b6:	8c 93       	st	X, r24
    18b8:	2b c0       	rjmp	.+86     	; 0x1910 <DIO_u8SetPinValue+0x20a>
				case DIO_U8_PORTC: SET_BIT( DIO_U8_PORTC_REG, Cpy_u8PinId ); break;
    18ba:	a5 e3       	ldi	r26, 0x35	; 53
    18bc:	b0 e0       	ldi	r27, 0x00	; 0
    18be:	e5 e3       	ldi	r30, 0x35	; 53
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	80 81       	ld	r24, Z
    18c4:	48 2f       	mov	r20, r24
    18c6:	8b 81       	ldd	r24, Y+3	; 0x03
    18c8:	28 2f       	mov	r18, r24
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	02 2e       	mov	r0, r18
    18d2:	02 c0       	rjmp	.+4      	; 0x18d8 <DIO_u8SetPinValue+0x1d2>
    18d4:	88 0f       	add	r24, r24
    18d6:	99 1f       	adc	r25, r25
    18d8:	0a 94       	dec	r0
    18da:	e2 f7       	brpl	.-8      	; 0x18d4 <DIO_u8SetPinValue+0x1ce>
    18dc:	84 2b       	or	r24, r20
    18de:	8c 93       	st	X, r24
    18e0:	17 c0       	rjmp	.+46     	; 0x1910 <DIO_u8SetPinValue+0x20a>
				case DIO_U8_PORTD: SET_BIT( DIO_U8_PORTD_REG, Cpy_u8PinId ); break;
    18e2:	a2 e3       	ldi	r26, 0x32	; 50
    18e4:	b0 e0       	ldi	r27, 0x00	; 0
    18e6:	e2 e3       	ldi	r30, 0x32	; 50
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	80 81       	ld	r24, Z
    18ec:	48 2f       	mov	r20, r24
    18ee:	8b 81       	ldd	r24, Y+3	; 0x03
    18f0:	28 2f       	mov	r18, r24
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	81 e0       	ldi	r24, 0x01	; 1
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	02 2e       	mov	r0, r18
    18fa:	02 c0       	rjmp	.+4      	; 0x1900 <DIO_u8SetPinValue+0x1fa>
    18fc:	88 0f       	add	r24, r24
    18fe:	99 1f       	adc	r25, r25
    1900:	0a 94       	dec	r0
    1902:	e2 f7       	brpl	.-8      	; 0x18fc <DIO_u8SetPinValue+0x1f6>
    1904:	84 2b       	or	r24, r20
    1906:	8c 93       	st	X, r24
    1908:	03 c0       	rjmp	.+6      	; 0x1910 <DIO_u8SetPinValue+0x20a>
		}
		/* Check 1.3: PinValue is not in the valid range */
		else
		{
			/* Update error state = NOK, wrong PinValue! */
			Loc_u8ErrorState = STD_TYPES_NOK;
    190a:	19 82       	std	Y+1, r1	; 0x01
    190c:	01 c0       	rjmp	.+2      	; 0x1910 <DIO_u8SetPinValue+0x20a>
	}
	/* Check 2: PortId or PinId is not in the valid range */
	else
	{
		/* Update error state = NOK, wrong PortId or PinId! */
		Loc_u8ErrorState = STD_TYPES_NOK;
    190e:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return Loc_u8ErrorState;
    1910:	89 81       	ldd	r24, Y+1	; 0x01
}
    1912:	28 96       	adiw	r28, 0x08	; 8
    1914:	0f b6       	in	r0, 0x3f	; 63
    1916:	f8 94       	cli
    1918:	de bf       	out	0x3e, r29	; 62
    191a:	0f be       	out	0x3f, r0	; 63
    191c:	cd bf       	out	0x3d, r28	; 61
    191e:	cf 91       	pop	r28
    1920:	df 91       	pop	r29
    1922:	08 95       	ret

00001924 <DIO_u8GetPinValue>:
 Input: u8 PortId, u8 PinId, and Pointer to u8 ReturnedPinValue
 Output: u8 Error or No Error
 Description: Function to get Pin value.
*/
u8 DIO_u8GetPinValue 	 ( u8 Cpy_u8PortId, u8 Cpy_u8PinId, u8 *Cpy_pu8ReturnedPinValue )
{
    1924:	df 93       	push	r29
    1926:	cf 93       	push	r28
    1928:	cd b7       	in	r28, 0x3d	; 61
    192a:	de b7       	in	r29, 0x3e	; 62
    192c:	28 97       	sbiw	r28, 0x08	; 8
    192e:	0f b6       	in	r0, 0x3f	; 63
    1930:	f8 94       	cli
    1932:	de bf       	out	0x3e, r29	; 62
    1934:	0f be       	out	0x3f, r0	; 63
    1936:	cd bf       	out	0x3d, r28	; 61
    1938:	8b 83       	std	Y+3, r24	; 0x03
    193a:	6c 83       	std	Y+4, r22	; 0x04
    193c:	5e 83       	std	Y+6, r21	; 0x06
    193e:	4d 83       	std	Y+5, r20	; 0x05
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	8a 83       	std	Y+2, r24	; 0x02
	
	/* Check 1: PortId and PinId are in the valid range, and Pointer is not equal to NULL */
	if ( ( Cpy_u8PortId <= DIO_U8_PORTD ) && ( Cpy_u8PinId <= DIO_U8_PIN7 ) && ( Cpy_pu8ReturnedPinValue != NULL ) )
    1944:	8b 81       	ldd	r24, Y+3	; 0x03
    1946:	84 30       	cpi	r24, 0x04	; 4
    1948:	08 f0       	brcs	.+2      	; 0x194c <DIO_u8GetPinValue+0x28>
    194a:	d0 c0       	rjmp	.+416    	; 0x1aec <DIO_u8GetPinValue+0x1c8>
    194c:	8c 81       	ldd	r24, Y+4	; 0x04
    194e:	88 30       	cpi	r24, 0x08	; 8
    1950:	08 f0       	brcs	.+2      	; 0x1954 <DIO_u8GetPinValue+0x30>
    1952:	cc c0       	rjmp	.+408    	; 0x1aec <DIO_u8GetPinValue+0x1c8>
    1954:	8d 81       	ldd	r24, Y+5	; 0x05
    1956:	9e 81       	ldd	r25, Y+6	; 0x06
    1958:	00 97       	sbiw	r24, 0x00	; 0
    195a:	09 f4       	brne	.+2      	; 0x195e <DIO_u8GetPinValue+0x3a>
    195c:	c7 c0       	rjmp	.+398    	; 0x1aec <DIO_u8GetPinValue+0x1c8>
	{
		/* Define local variable to put the value of PIN register in it, incase DIO_u8_PIN_LOW or DIO_u8_PIN_HIGH values are changed */
		u8 Loc_u8PinValue;
	
		/* Check 1.1: Required PortId */
		switch ( Cpy_u8PortId )
    195e:	8b 81       	ldd	r24, Y+3	; 0x03
    1960:	28 2f       	mov	r18, r24
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	38 87       	std	Y+8, r19	; 0x08
    1966:	2f 83       	std	Y+7, r18	; 0x07
    1968:	4f 81       	ldd	r20, Y+7	; 0x07
    196a:	58 85       	ldd	r21, Y+8	; 0x08
    196c:	41 30       	cpi	r20, 0x01	; 1
    196e:	51 05       	cpc	r21, r1
    1970:	09 f4       	brne	.+2      	; 0x1974 <DIO_u8GetPinValue+0x50>
    1972:	41 c0       	rjmp	.+130    	; 0x19f6 <DIO_u8GetPinValue+0xd2>
    1974:	8f 81       	ldd	r24, Y+7	; 0x07
    1976:	98 85       	ldd	r25, Y+8	; 0x08
    1978:	82 30       	cpi	r24, 0x02	; 2
    197a:	91 05       	cpc	r25, r1
    197c:	34 f4       	brge	.+12     	; 0x198a <DIO_u8GetPinValue+0x66>
    197e:	2f 81       	ldd	r18, Y+7	; 0x07
    1980:	38 85       	ldd	r19, Y+8	; 0x08
    1982:	21 15       	cp	r18, r1
    1984:	31 05       	cpc	r19, r1
    1986:	71 f0       	breq	.+28     	; 0x19a4 <DIO_u8GetPinValue+0x80>
    1988:	b2 c0       	rjmp	.+356    	; 0x1aee <DIO_u8GetPinValue+0x1ca>
    198a:	4f 81       	ldd	r20, Y+7	; 0x07
    198c:	58 85       	ldd	r21, Y+8	; 0x08
    198e:	42 30       	cpi	r20, 0x02	; 2
    1990:	51 05       	cpc	r21, r1
    1992:	09 f4       	brne	.+2      	; 0x1996 <DIO_u8GetPinValue+0x72>
    1994:	59 c0       	rjmp	.+178    	; 0x1a48 <DIO_u8GetPinValue+0x124>
    1996:	8f 81       	ldd	r24, Y+7	; 0x07
    1998:	98 85       	ldd	r25, Y+8	; 0x08
    199a:	83 30       	cpi	r24, 0x03	; 3
    199c:	91 05       	cpc	r25, r1
    199e:	09 f4       	brne	.+2      	; 0x19a2 <DIO_u8GetPinValue+0x7e>
    19a0:	7c c0       	rjmp	.+248    	; 0x1a9a <DIO_u8GetPinValue+0x176>
    19a2:	a5 c0       	rjmp	.+330    	; 0x1aee <DIO_u8GetPinValue+0x1ca>
		{
			case DIO_U8_PORTA:
			
				Loc_u8PinValue = GET_BIT( DIO_U8_PINA_REG, Cpy_u8PinId );
    19a4:	e9 e3       	ldi	r30, 0x39	; 57
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	80 81       	ld	r24, Z
    19aa:	48 2f       	mov	r20, r24
    19ac:	50 e0       	ldi	r21, 0x00	; 0
    19ae:	8c 81       	ldd	r24, Y+4	; 0x04
    19b0:	28 2f       	mov	r18, r24
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	02 c0       	rjmp	.+4      	; 0x19be <DIO_u8GetPinValue+0x9a>
    19ba:	88 0f       	add	r24, r24
    19bc:	99 1f       	adc	r25, r25
    19be:	2a 95       	dec	r18
    19c0:	e2 f7       	brpl	.-8      	; 0x19ba <DIO_u8GetPinValue+0x96>
    19c2:	9a 01       	movw	r18, r20
    19c4:	28 23       	and	r18, r24
    19c6:	39 23       	and	r19, r25
    19c8:	8c 81       	ldd	r24, Y+4	; 0x04
    19ca:	88 2f       	mov	r24, r24
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	a9 01       	movw	r20, r18
    19d0:	02 c0       	rjmp	.+4      	; 0x19d6 <DIO_u8GetPinValue+0xb2>
    19d2:	55 95       	asr	r21
    19d4:	47 95       	ror	r20
    19d6:	8a 95       	dec	r24
    19d8:	e2 f7       	brpl	.-8      	; 0x19d2 <DIO_u8GetPinValue+0xae>
    19da:	ca 01       	movw	r24, r20
    19dc:	89 83       	std	Y+1, r24	; 0x01
				
				/* Check 1.1.1: PinValue is Low */
				if ( Loc_u8PinValue == 0 )
    19de:	89 81       	ldd	r24, Y+1	; 0x01
    19e0:	88 23       	and	r24, r24
    19e2:	21 f4       	brne	.+8      	; 0x19ec <DIO_u8GetPinValue+0xc8>
				{
					*Cpy_pu8ReturnedPinValue = DIO_U8_PIN_LOW;
    19e4:	ed 81       	ldd	r30, Y+5	; 0x05
    19e6:	fe 81       	ldd	r31, Y+6	; 0x06
    19e8:	10 82       	st	Z, r1
    19ea:	81 c0       	rjmp	.+258    	; 0x1aee <DIO_u8GetPinValue+0x1ca>
				}
				/* Check 1.1.2: PinValue is High */
				else
				{
					*Cpy_pu8ReturnedPinValue = DIO_U8_PIN_HIGH;
    19ec:	ed 81       	ldd	r30, Y+5	; 0x05
    19ee:	fe 81       	ldd	r31, Y+6	; 0x06
    19f0:	81 e0       	ldi	r24, 0x01	; 1
    19f2:	80 83       	st	Z, r24
    19f4:	7c c0       	rjmp	.+248    	; 0x1aee <DIO_u8GetPinValue+0x1ca>
				}					
			break;
			
			case DIO_U8_PORTB:
			
				Loc_u8PinValue = GET_BIT( DIO_U8_PINB_REG, Cpy_u8PinId );
    19f6:	e6 e3       	ldi	r30, 0x36	; 54
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	80 81       	ld	r24, Z
    19fc:	48 2f       	mov	r20, r24
    19fe:	50 e0       	ldi	r21, 0x00	; 0
    1a00:	8c 81       	ldd	r24, Y+4	; 0x04
    1a02:	28 2f       	mov	r18, r24
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	02 c0       	rjmp	.+4      	; 0x1a10 <DIO_u8GetPinValue+0xec>
    1a0c:	88 0f       	add	r24, r24
    1a0e:	99 1f       	adc	r25, r25
    1a10:	2a 95       	dec	r18
    1a12:	e2 f7       	brpl	.-8      	; 0x1a0c <DIO_u8GetPinValue+0xe8>
    1a14:	9a 01       	movw	r18, r20
    1a16:	28 23       	and	r18, r24
    1a18:	39 23       	and	r19, r25
    1a1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a1c:	88 2f       	mov	r24, r24
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	a9 01       	movw	r20, r18
    1a22:	02 c0       	rjmp	.+4      	; 0x1a28 <DIO_u8GetPinValue+0x104>
    1a24:	55 95       	asr	r21
    1a26:	47 95       	ror	r20
    1a28:	8a 95       	dec	r24
    1a2a:	e2 f7       	brpl	.-8      	; 0x1a24 <DIO_u8GetPinValue+0x100>
    1a2c:	ca 01       	movw	r24, r20
    1a2e:	89 83       	std	Y+1, r24	; 0x01

				/* Check 1.1.3: PinValue is Low */
				if ( Loc_u8PinValue == 0 )
    1a30:	89 81       	ldd	r24, Y+1	; 0x01
    1a32:	88 23       	and	r24, r24
    1a34:	21 f4       	brne	.+8      	; 0x1a3e <DIO_u8GetPinValue+0x11a>
				{
					*Cpy_pu8ReturnedPinValue = DIO_U8_PIN_LOW;
    1a36:	ed 81       	ldd	r30, Y+5	; 0x05
    1a38:	fe 81       	ldd	r31, Y+6	; 0x06
    1a3a:	10 82       	st	Z, r1
    1a3c:	58 c0       	rjmp	.+176    	; 0x1aee <DIO_u8GetPinValue+0x1ca>
				}
				/* Check 1.1.4: PinValue is High */
				else
				{
					*Cpy_pu8ReturnedPinValue = DIO_U8_PIN_HIGH;
    1a3e:	ed 81       	ldd	r30, Y+5	; 0x05
    1a40:	fe 81       	ldd	r31, Y+6	; 0x06
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	80 83       	st	Z, r24
    1a46:	53 c0       	rjmp	.+166    	; 0x1aee <DIO_u8GetPinValue+0x1ca>
				}					
			break;
				
			case DIO_U8_PORTC:

				Loc_u8PinValue = GET_BIT( DIO_U8_PINC_REG, Cpy_u8PinId );
    1a48:	e3 e3       	ldi	r30, 0x33	; 51
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	80 81       	ld	r24, Z
    1a4e:	48 2f       	mov	r20, r24
    1a50:	50 e0       	ldi	r21, 0x00	; 0
    1a52:	8c 81       	ldd	r24, Y+4	; 0x04
    1a54:	28 2f       	mov	r18, r24
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	02 c0       	rjmp	.+4      	; 0x1a62 <DIO_u8GetPinValue+0x13e>
    1a5e:	88 0f       	add	r24, r24
    1a60:	99 1f       	adc	r25, r25
    1a62:	2a 95       	dec	r18
    1a64:	e2 f7       	brpl	.-8      	; 0x1a5e <DIO_u8GetPinValue+0x13a>
    1a66:	9a 01       	movw	r18, r20
    1a68:	28 23       	and	r18, r24
    1a6a:	39 23       	and	r19, r25
    1a6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a6e:	88 2f       	mov	r24, r24
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	a9 01       	movw	r20, r18
    1a74:	02 c0       	rjmp	.+4      	; 0x1a7a <DIO_u8GetPinValue+0x156>
    1a76:	55 95       	asr	r21
    1a78:	47 95       	ror	r20
    1a7a:	8a 95       	dec	r24
    1a7c:	e2 f7       	brpl	.-8      	; 0x1a76 <DIO_u8GetPinValue+0x152>
    1a7e:	ca 01       	movw	r24, r20
    1a80:	89 83       	std	Y+1, r24	; 0x01
				
				/* Check 1.1.5: PinValue is Low */
				if ( Loc_u8PinValue == 0 )
    1a82:	89 81       	ldd	r24, Y+1	; 0x01
    1a84:	88 23       	and	r24, r24
    1a86:	21 f4       	brne	.+8      	; 0x1a90 <DIO_u8GetPinValue+0x16c>
				{
					*Cpy_pu8ReturnedPinValue = DIO_U8_PIN_LOW;
    1a88:	ed 81       	ldd	r30, Y+5	; 0x05
    1a8a:	fe 81       	ldd	r31, Y+6	; 0x06
    1a8c:	10 82       	st	Z, r1
    1a8e:	2f c0       	rjmp	.+94     	; 0x1aee <DIO_u8GetPinValue+0x1ca>
				}
				/* Check 1.1.6: PinValue is High */
				else
				{
					*Cpy_pu8ReturnedPinValue = DIO_U8_PIN_HIGH;
    1a90:	ed 81       	ldd	r30, Y+5	; 0x05
    1a92:	fe 81       	ldd	r31, Y+6	; 0x06
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	80 83       	st	Z, r24
    1a98:	2a c0       	rjmp	.+84     	; 0x1aee <DIO_u8GetPinValue+0x1ca>
				}	
			break;
								
			case DIO_U8_PORTD:

				Loc_u8PinValue = GET_BIT( DIO_U8_PIND_REG, Cpy_u8PinId );
    1a9a:	e0 e3       	ldi	r30, 0x30	; 48
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	80 81       	ld	r24, Z
    1aa0:	48 2f       	mov	r20, r24
    1aa2:	50 e0       	ldi	r21, 0x00	; 0
    1aa4:	8c 81       	ldd	r24, Y+4	; 0x04
    1aa6:	28 2f       	mov	r18, r24
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	02 c0       	rjmp	.+4      	; 0x1ab4 <DIO_u8GetPinValue+0x190>
    1ab0:	88 0f       	add	r24, r24
    1ab2:	99 1f       	adc	r25, r25
    1ab4:	2a 95       	dec	r18
    1ab6:	e2 f7       	brpl	.-8      	; 0x1ab0 <DIO_u8GetPinValue+0x18c>
    1ab8:	9a 01       	movw	r18, r20
    1aba:	28 23       	and	r18, r24
    1abc:	39 23       	and	r19, r25
    1abe:	8c 81       	ldd	r24, Y+4	; 0x04
    1ac0:	88 2f       	mov	r24, r24
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	a9 01       	movw	r20, r18
    1ac6:	02 c0       	rjmp	.+4      	; 0x1acc <DIO_u8GetPinValue+0x1a8>
    1ac8:	55 95       	asr	r21
    1aca:	47 95       	ror	r20
    1acc:	8a 95       	dec	r24
    1ace:	e2 f7       	brpl	.-8      	; 0x1ac8 <DIO_u8GetPinValue+0x1a4>
    1ad0:	ca 01       	movw	r24, r20
    1ad2:	89 83       	std	Y+1, r24	; 0x01

				/* Check 1.1.7: PinValue is Low */
				if ( Loc_u8PinValue == 0 )
    1ad4:	89 81       	ldd	r24, Y+1	; 0x01
    1ad6:	88 23       	and	r24, r24
    1ad8:	21 f4       	brne	.+8      	; 0x1ae2 <DIO_u8GetPinValue+0x1be>
				{
					*Cpy_pu8ReturnedPinValue = DIO_U8_PIN_LOW;
    1ada:	ed 81       	ldd	r30, Y+5	; 0x05
    1adc:	fe 81       	ldd	r31, Y+6	; 0x06
    1ade:	10 82       	st	Z, r1
    1ae0:	06 c0       	rjmp	.+12     	; 0x1aee <DIO_u8GetPinValue+0x1ca>
				}
				/* Check 1.1.8: PinValue is High */
				else
				{
					*Cpy_pu8ReturnedPinValue = DIO_U8_PIN_HIGH;
    1ae2:	ed 81       	ldd	r30, Y+5	; 0x05
    1ae4:	fe 81       	ldd	r31, Y+6	; 0x06
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	80 83       	st	Z, r24
    1aea:	01 c0       	rjmp	.+2      	; 0x1aee <DIO_u8GetPinValue+0x1ca>
	}
	/* Check 2: PortId or PinId is not in the valid range, or Pointer is equal to NULL */
	else
	{
		/* Update error state = NOK, wrong PortId, PinId, or Pointer is NULL! */
		Loc_u8ErrorState = STD_TYPES_NOK;
    1aec:	1a 82       	std	Y+2, r1	; 0x02
	}

	return Loc_u8ErrorState;
    1aee:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1af0:	28 96       	adiw	r28, 0x08	; 8
    1af2:	0f b6       	in	r0, 0x3f	; 63
    1af4:	f8 94       	cli
    1af6:	de bf       	out	0x3e, r29	; 62
    1af8:	0f be       	out	0x3f, r0	; 63
    1afa:	cd bf       	out	0x3d, r28	; 61
    1afc:	cf 91       	pop	r28
    1afe:	df 91       	pop	r29
    1b00:	08 95       	ret

00001b02 <DIO_u8TogglePinValue>:
 Input: u8 PortId and u8 PinId
 Output: u8 Error or No Error
 Description: Function to toggle Pin value.
*/
u8 DIO_u8TogglePinValue  ( u8 Cpy_u8PortId, u8 Cpy_u8PinId )
{
    1b02:	df 93       	push	r29
    1b04:	cf 93       	push	r28
    1b06:	00 d0       	rcall	.+0      	; 0x1b08 <DIO_u8TogglePinValue+0x6>
    1b08:	00 d0       	rcall	.+0      	; 0x1b0a <DIO_u8TogglePinValue+0x8>
    1b0a:	0f 92       	push	r0
    1b0c:	cd b7       	in	r28, 0x3d	; 61
    1b0e:	de b7       	in	r29, 0x3e	; 62
    1b10:	8a 83       	std	Y+2, r24	; 0x02
    1b12:	6b 83       	std	Y+3, r22	; 0x03
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
    1b14:	81 e0       	ldi	r24, 0x01	; 1
    1b16:	89 83       	std	Y+1, r24	; 0x01
	
	/* Check 1: PortId and PinId are in the valid range */
	if ( ( Cpy_u8PortId <= DIO_U8_PORTD ) && ( Cpy_u8PinId <= DIO_U8_PIN7 ) )
    1b18:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1a:	84 30       	cpi	r24, 0x04	; 4
    1b1c:	08 f0       	brcs	.+2      	; 0x1b20 <DIO_u8TogglePinValue+0x1e>
    1b1e:	73 c0       	rjmp	.+230    	; 0x1c06 <DIO_u8TogglePinValue+0x104>
    1b20:	8b 81       	ldd	r24, Y+3	; 0x03
    1b22:	88 30       	cpi	r24, 0x08	; 8
    1b24:	08 f0       	brcs	.+2      	; 0x1b28 <DIO_u8TogglePinValue+0x26>
    1b26:	6f c0       	rjmp	.+222    	; 0x1c06 <DIO_u8TogglePinValue+0x104>
	{
		/* Check 1.1: Required PortId */
		switch ( Cpy_u8PortId )
    1b28:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2a:	28 2f       	mov	r18, r24
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	3d 83       	std	Y+5, r19	; 0x05
    1b30:	2c 83       	std	Y+4, r18	; 0x04
    1b32:	8c 81       	ldd	r24, Y+4	; 0x04
    1b34:	9d 81       	ldd	r25, Y+5	; 0x05
    1b36:	81 30       	cpi	r24, 0x01	; 1
    1b38:	91 05       	cpc	r25, r1
    1b3a:	49 f1       	breq	.+82     	; 0x1b8e <DIO_u8TogglePinValue+0x8c>
    1b3c:	2c 81       	ldd	r18, Y+4	; 0x04
    1b3e:	3d 81       	ldd	r19, Y+5	; 0x05
    1b40:	22 30       	cpi	r18, 0x02	; 2
    1b42:	31 05       	cpc	r19, r1
    1b44:	2c f4       	brge	.+10     	; 0x1b50 <DIO_u8TogglePinValue+0x4e>
    1b46:	8c 81       	ldd	r24, Y+4	; 0x04
    1b48:	9d 81       	ldd	r25, Y+5	; 0x05
    1b4a:	00 97       	sbiw	r24, 0x00	; 0
    1b4c:	61 f0       	breq	.+24     	; 0x1b66 <DIO_u8TogglePinValue+0x64>
    1b4e:	5c c0       	rjmp	.+184    	; 0x1c08 <DIO_u8TogglePinValue+0x106>
    1b50:	2c 81       	ldd	r18, Y+4	; 0x04
    1b52:	3d 81       	ldd	r19, Y+5	; 0x05
    1b54:	22 30       	cpi	r18, 0x02	; 2
    1b56:	31 05       	cpc	r19, r1
    1b58:	71 f1       	breq	.+92     	; 0x1bb6 <DIO_u8TogglePinValue+0xb4>
    1b5a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b5c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b5e:	83 30       	cpi	r24, 0x03	; 3
    1b60:	91 05       	cpc	r25, r1
    1b62:	e9 f1       	breq	.+122    	; 0x1bde <DIO_u8TogglePinValue+0xdc>
    1b64:	51 c0       	rjmp	.+162    	; 0x1c08 <DIO_u8TogglePinValue+0x106>
		{
			case DIO_U8_PORTA: TOG_BIT( DIO_U8_PORTA_REG, Cpy_u8PinId ); break;
    1b66:	ab e3       	ldi	r26, 0x3B	; 59
    1b68:	b0 e0       	ldi	r27, 0x00	; 0
    1b6a:	eb e3       	ldi	r30, 0x3B	; 59
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	80 81       	ld	r24, Z
    1b70:	48 2f       	mov	r20, r24
    1b72:	8b 81       	ldd	r24, Y+3	; 0x03
    1b74:	28 2f       	mov	r18, r24
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	81 e0       	ldi	r24, 0x01	; 1
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	02 2e       	mov	r0, r18
    1b7e:	02 c0       	rjmp	.+4      	; 0x1b84 <DIO_u8TogglePinValue+0x82>
    1b80:	88 0f       	add	r24, r24
    1b82:	99 1f       	adc	r25, r25
    1b84:	0a 94       	dec	r0
    1b86:	e2 f7       	brpl	.-8      	; 0x1b80 <DIO_u8TogglePinValue+0x7e>
    1b88:	84 27       	eor	r24, r20
    1b8a:	8c 93       	st	X, r24
    1b8c:	3d c0       	rjmp	.+122    	; 0x1c08 <DIO_u8TogglePinValue+0x106>
			case DIO_U8_PORTB: TOG_BIT( DIO_U8_PORTB_REG, Cpy_u8PinId ); break;
    1b8e:	a8 e3       	ldi	r26, 0x38	; 56
    1b90:	b0 e0       	ldi	r27, 0x00	; 0
    1b92:	e8 e3       	ldi	r30, 0x38	; 56
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	80 81       	ld	r24, Z
    1b98:	48 2f       	mov	r20, r24
    1b9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9c:	28 2f       	mov	r18, r24
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	81 e0       	ldi	r24, 0x01	; 1
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	02 2e       	mov	r0, r18
    1ba6:	02 c0       	rjmp	.+4      	; 0x1bac <DIO_u8TogglePinValue+0xaa>
    1ba8:	88 0f       	add	r24, r24
    1baa:	99 1f       	adc	r25, r25
    1bac:	0a 94       	dec	r0
    1bae:	e2 f7       	brpl	.-8      	; 0x1ba8 <DIO_u8TogglePinValue+0xa6>
    1bb0:	84 27       	eor	r24, r20
    1bb2:	8c 93       	st	X, r24
    1bb4:	29 c0       	rjmp	.+82     	; 0x1c08 <DIO_u8TogglePinValue+0x106>
			case DIO_U8_PORTC: TOG_BIT( DIO_U8_PORTC_REG, Cpy_u8PinId ); break;
    1bb6:	a5 e3       	ldi	r26, 0x35	; 53
    1bb8:	b0 e0       	ldi	r27, 0x00	; 0
    1bba:	e5 e3       	ldi	r30, 0x35	; 53
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	80 81       	ld	r24, Z
    1bc0:	48 2f       	mov	r20, r24
    1bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc4:	28 2f       	mov	r18, r24
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
    1bc8:	81 e0       	ldi	r24, 0x01	; 1
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	02 2e       	mov	r0, r18
    1bce:	02 c0       	rjmp	.+4      	; 0x1bd4 <DIO_u8TogglePinValue+0xd2>
    1bd0:	88 0f       	add	r24, r24
    1bd2:	99 1f       	adc	r25, r25
    1bd4:	0a 94       	dec	r0
    1bd6:	e2 f7       	brpl	.-8      	; 0x1bd0 <DIO_u8TogglePinValue+0xce>
    1bd8:	84 27       	eor	r24, r20
    1bda:	8c 93       	st	X, r24
    1bdc:	15 c0       	rjmp	.+42     	; 0x1c08 <DIO_u8TogglePinValue+0x106>
			case DIO_U8_PORTD: TOG_BIT( DIO_U8_PORTD_REG, Cpy_u8PinId ); break;
    1bde:	a2 e3       	ldi	r26, 0x32	; 50
    1be0:	b0 e0       	ldi	r27, 0x00	; 0
    1be2:	e2 e3       	ldi	r30, 0x32	; 50
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	80 81       	ld	r24, Z
    1be8:	48 2f       	mov	r20, r24
    1bea:	8b 81       	ldd	r24, Y+3	; 0x03
    1bec:	28 2f       	mov	r18, r24
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	02 2e       	mov	r0, r18
    1bf6:	02 c0       	rjmp	.+4      	; 0x1bfc <DIO_u8TogglePinValue+0xfa>
    1bf8:	88 0f       	add	r24, r24
    1bfa:	99 1f       	adc	r25, r25
    1bfc:	0a 94       	dec	r0
    1bfe:	e2 f7       	brpl	.-8      	; 0x1bf8 <DIO_u8TogglePinValue+0xf6>
    1c00:	84 27       	eor	r24, r20
    1c02:	8c 93       	st	X, r24
    1c04:	01 c0       	rjmp	.+2      	; 0x1c08 <DIO_u8TogglePinValue+0x106>
	}
	/* Check 2: PortId or PinId is not in the valid range */
	else
	{
		/* Update error state = NOK, wrong PortId or PinId! */
		Loc_u8ErrorState = STD_TYPES_NOK;
    1c06:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return Loc_u8ErrorState;
    1c08:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c0a:	0f 90       	pop	r0
    1c0c:	0f 90       	pop	r0
    1c0e:	0f 90       	pop	r0
    1c10:	0f 90       	pop	r0
    1c12:	0f 90       	pop	r0
    1c14:	cf 91       	pop	r28
    1c16:	df 91       	pop	r29
    1c18:	08 95       	ret

00001c1a <DIO_u8SetPortDirection>:
 Input: u8 PortId and u8 PortDirection
 Output: u8 Error or No Error
 Description: Function to set Port direction.
*/
u8 DIO_u8SetPortDirection( u8 Cpy_u8PortId, u8 Cpy_u8PortDirection )
{
    1c1a:	df 93       	push	r29
    1c1c:	cf 93       	push	r28
    1c1e:	00 d0       	rcall	.+0      	; 0x1c20 <DIO_u8SetPortDirection+0x6>
    1c20:	00 d0       	rcall	.+0      	; 0x1c22 <DIO_u8SetPortDirection+0x8>
    1c22:	0f 92       	push	r0
    1c24:	cd b7       	in	r28, 0x3d	; 61
    1c26:	de b7       	in	r29, 0x3e	; 62
    1c28:	8a 83       	std	Y+2, r24	; 0x02
    1c2a:	6b 83       	std	Y+3, r22	; 0x03
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	89 83       	std	Y+1, r24	; 0x01
	
	/* Check 1: PortId is in the valid range */
	if( Cpy_u8PortId <= DIO_U8_PORTD )
    1c30:	8a 81       	ldd	r24, Y+2	; 0x02
    1c32:	84 30       	cpi	r24, 0x04	; 4
    1c34:	98 f5       	brcc	.+102    	; 0x1c9c <DIO_u8SetPortDirection+0x82>
	{		
		/* Check 1.1: Required PortId */
		switch( Cpy_u8PortId )
    1c36:	8a 81       	ldd	r24, Y+2	; 0x02
    1c38:	28 2f       	mov	r18, r24
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	3d 83       	std	Y+5, r19	; 0x05
    1c3e:	2c 83       	std	Y+4, r18	; 0x04
    1c40:	8c 81       	ldd	r24, Y+4	; 0x04
    1c42:	9d 81       	ldd	r25, Y+5	; 0x05
    1c44:	81 30       	cpi	r24, 0x01	; 1
    1c46:	91 05       	cpc	r25, r1
    1c48:	d1 f0       	breq	.+52     	; 0x1c7e <DIO_u8SetPortDirection+0x64>
    1c4a:	2c 81       	ldd	r18, Y+4	; 0x04
    1c4c:	3d 81       	ldd	r19, Y+5	; 0x05
    1c4e:	22 30       	cpi	r18, 0x02	; 2
    1c50:	31 05       	cpc	r19, r1
    1c52:	2c f4       	brge	.+10     	; 0x1c5e <DIO_u8SetPortDirection+0x44>
    1c54:	8c 81       	ldd	r24, Y+4	; 0x04
    1c56:	9d 81       	ldd	r25, Y+5	; 0x05
    1c58:	00 97       	sbiw	r24, 0x00	; 0
    1c5a:	61 f0       	breq	.+24     	; 0x1c74 <DIO_u8SetPortDirection+0x5a>
    1c5c:	20 c0       	rjmp	.+64     	; 0x1c9e <DIO_u8SetPortDirection+0x84>
    1c5e:	2c 81       	ldd	r18, Y+4	; 0x04
    1c60:	3d 81       	ldd	r19, Y+5	; 0x05
    1c62:	22 30       	cpi	r18, 0x02	; 2
    1c64:	31 05       	cpc	r19, r1
    1c66:	81 f0       	breq	.+32     	; 0x1c88 <DIO_u8SetPortDirection+0x6e>
    1c68:	8c 81       	ldd	r24, Y+4	; 0x04
    1c6a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c6c:	83 30       	cpi	r24, 0x03	; 3
    1c6e:	91 05       	cpc	r25, r1
    1c70:	81 f0       	breq	.+32     	; 0x1c92 <DIO_u8SetPortDirection+0x78>
    1c72:	15 c0       	rjmp	.+42     	; 0x1c9e <DIO_u8SetPortDirection+0x84>
		{
			case DIO_U8_PORTA: DIO_U8_DDRA_REG = Cpy_u8PortDirection; break;
    1c74:	ea e3       	ldi	r30, 0x3A	; 58
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7a:	80 83       	st	Z, r24
    1c7c:	10 c0       	rjmp	.+32     	; 0x1c9e <DIO_u8SetPortDirection+0x84>
			case DIO_U8_PORTB: DIO_U8_DDRB_REG = Cpy_u8PortDirection; break;
    1c7e:	e7 e3       	ldi	r30, 0x37	; 55
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	8b 81       	ldd	r24, Y+3	; 0x03
    1c84:	80 83       	st	Z, r24
    1c86:	0b c0       	rjmp	.+22     	; 0x1c9e <DIO_u8SetPortDirection+0x84>
			case DIO_U8_PORTC: DIO_U8_DDRC_REG = Cpy_u8PortDirection; break;
    1c88:	e4 e3       	ldi	r30, 0x34	; 52
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8e:	80 83       	st	Z, r24
    1c90:	06 c0       	rjmp	.+12     	; 0x1c9e <DIO_u8SetPortDirection+0x84>
			case DIO_U8_PORTD: DIO_U8_DDRD_REG = Cpy_u8PortDirection; break;
    1c92:	e1 e3       	ldi	r30, 0x31	; 49
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	8b 81       	ldd	r24, Y+3	; 0x03
    1c98:	80 83       	st	Z, r24
    1c9a:	01 c0       	rjmp	.+2      	; 0x1c9e <DIO_u8SetPortDirection+0x84>
	}
	/* Check 2: PortId is not in the valid range */
	else
	{
		/* Update error state = NOK, wrong PortId! */
		Loc_u8ErrorState = STD_TYPES_NOK;
    1c9c:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return Loc_u8ErrorState;
    1c9e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ca0:	0f 90       	pop	r0
    1ca2:	0f 90       	pop	r0
    1ca4:	0f 90       	pop	r0
    1ca6:	0f 90       	pop	r0
    1ca8:	0f 90       	pop	r0
    1caa:	cf 91       	pop	r28
    1cac:	df 91       	pop	r29
    1cae:	08 95       	ret

00001cb0 <DIO_u8SetPortValue>:
 Input: u8 PortId and u8 PortValue
 Output: u8 Error or No Error
 Description: Function to set Port value.
*/
u8 DIO_u8SetPortValue	 ( u8 Cpy_u8PortId, u8 Cpy_u8PortValue )
{
    1cb0:	df 93       	push	r29
    1cb2:	cf 93       	push	r28
    1cb4:	00 d0       	rcall	.+0      	; 0x1cb6 <DIO_u8SetPortValue+0x6>
    1cb6:	00 d0       	rcall	.+0      	; 0x1cb8 <DIO_u8SetPortValue+0x8>
    1cb8:	0f 92       	push	r0
    1cba:	cd b7       	in	r28, 0x3d	; 61
    1cbc:	de b7       	in	r29, 0x3e	; 62
    1cbe:	8a 83       	std	Y+2, r24	; 0x02
    1cc0:	6b 83       	std	Y+3, r22	; 0x03
	/* Define Local Variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
    1cc2:	81 e0       	ldi	r24, 0x01	; 1
    1cc4:	89 83       	std	Y+1, r24	; 0x01
	
	/* Check 1: PortId is in the valid range */
	if( Cpy_u8PortId <= DIO_U8_PORTD )
    1cc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc8:	84 30       	cpi	r24, 0x04	; 4
    1cca:	98 f5       	brcc	.+102    	; 0x1d32 <DIO_u8SetPortValue+0x82>
	{
		/* Check 1.1: Required PortId */
		switch( Cpy_u8PortId )
    1ccc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cce:	28 2f       	mov	r18, r24
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	3d 83       	std	Y+5, r19	; 0x05
    1cd4:	2c 83       	std	Y+4, r18	; 0x04
    1cd6:	8c 81       	ldd	r24, Y+4	; 0x04
    1cd8:	9d 81       	ldd	r25, Y+5	; 0x05
    1cda:	81 30       	cpi	r24, 0x01	; 1
    1cdc:	91 05       	cpc	r25, r1
    1cde:	d1 f0       	breq	.+52     	; 0x1d14 <DIO_u8SetPortValue+0x64>
    1ce0:	2c 81       	ldd	r18, Y+4	; 0x04
    1ce2:	3d 81       	ldd	r19, Y+5	; 0x05
    1ce4:	22 30       	cpi	r18, 0x02	; 2
    1ce6:	31 05       	cpc	r19, r1
    1ce8:	2c f4       	brge	.+10     	; 0x1cf4 <DIO_u8SetPortValue+0x44>
    1cea:	8c 81       	ldd	r24, Y+4	; 0x04
    1cec:	9d 81       	ldd	r25, Y+5	; 0x05
    1cee:	00 97       	sbiw	r24, 0x00	; 0
    1cf0:	61 f0       	breq	.+24     	; 0x1d0a <DIO_u8SetPortValue+0x5a>
    1cf2:	20 c0       	rjmp	.+64     	; 0x1d34 <DIO_u8SetPortValue+0x84>
    1cf4:	2c 81       	ldd	r18, Y+4	; 0x04
    1cf6:	3d 81       	ldd	r19, Y+5	; 0x05
    1cf8:	22 30       	cpi	r18, 0x02	; 2
    1cfa:	31 05       	cpc	r19, r1
    1cfc:	81 f0       	breq	.+32     	; 0x1d1e <DIO_u8SetPortValue+0x6e>
    1cfe:	8c 81       	ldd	r24, Y+4	; 0x04
    1d00:	9d 81       	ldd	r25, Y+5	; 0x05
    1d02:	83 30       	cpi	r24, 0x03	; 3
    1d04:	91 05       	cpc	r25, r1
    1d06:	81 f0       	breq	.+32     	; 0x1d28 <DIO_u8SetPortValue+0x78>
    1d08:	15 c0       	rjmp	.+42     	; 0x1d34 <DIO_u8SetPortValue+0x84>
		{
			case DIO_U8_PORTA: DIO_U8_PORTA_REG = Cpy_u8PortValue; break;
    1d0a:	eb e3       	ldi	r30, 0x3B	; 59
    1d0c:	f0 e0       	ldi	r31, 0x00	; 0
    1d0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d10:	80 83       	st	Z, r24
    1d12:	10 c0       	rjmp	.+32     	; 0x1d34 <DIO_u8SetPortValue+0x84>
			case DIO_U8_PORTB: DIO_U8_PORTB_REG = Cpy_u8PortValue; break;
    1d14:	e8 e3       	ldi	r30, 0x38	; 56
    1d16:	f0 e0       	ldi	r31, 0x00	; 0
    1d18:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1a:	80 83       	st	Z, r24
    1d1c:	0b c0       	rjmp	.+22     	; 0x1d34 <DIO_u8SetPortValue+0x84>
			case DIO_U8_PORTC: DIO_U8_PORTC_REG = Cpy_u8PortValue; break;
    1d1e:	e5 e3       	ldi	r30, 0x35	; 53
    1d20:	f0 e0       	ldi	r31, 0x00	; 0
    1d22:	8b 81       	ldd	r24, Y+3	; 0x03
    1d24:	80 83       	st	Z, r24
    1d26:	06 c0       	rjmp	.+12     	; 0x1d34 <DIO_u8SetPortValue+0x84>
			case DIO_U8_PORTD: DIO_U8_PORTD_REG = Cpy_u8PortValue; break;
    1d28:	e2 e3       	ldi	r30, 0x32	; 50
    1d2a:	f0 e0       	ldi	r31, 0x00	; 0
    1d2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2e:	80 83       	st	Z, r24
    1d30:	01 c0       	rjmp	.+2      	; 0x1d34 <DIO_u8SetPortValue+0x84>
	}
	/* Check 2: PortId is not in the valid range */
	else
	{
		/* Update error state = NOK, wrong PortId! */
		Loc_u8ErrorState = STD_TYPES_NOK;
    1d32:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return Loc_u8ErrorState;
    1d34:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d36:	0f 90       	pop	r0
    1d38:	0f 90       	pop	r0
    1d3a:	0f 90       	pop	r0
    1d3c:	0f 90       	pop	r0
    1d3e:	0f 90       	pop	r0
    1d40:	cf 91       	pop	r28
    1d42:	df 91       	pop	r29
    1d44:	08 95       	ret

00001d46 <DIO_u8GetPortValue>:
 Input: u8 PortId and Pointer to u8 ReturnedPortValue
 Output: u8 Error or No Error
 Description: Function to get Port value.
*/
u8 DIO_u8GetPortValue	 ( u8 Cpy_u8PortId, u8 *Cpy_pu8ReturnedPortValue )
{
    1d46:	df 93       	push	r29
    1d48:	cf 93       	push	r28
    1d4a:	00 d0       	rcall	.+0      	; 0x1d4c <DIO_u8GetPortValue+0x6>
    1d4c:	00 d0       	rcall	.+0      	; 0x1d4e <DIO_u8GetPortValue+0x8>
    1d4e:	00 d0       	rcall	.+0      	; 0x1d50 <DIO_u8GetPortValue+0xa>
    1d50:	cd b7       	in	r28, 0x3d	; 61
    1d52:	de b7       	in	r29, 0x3e	; 62
    1d54:	8a 83       	std	Y+2, r24	; 0x02
    1d56:	7c 83       	std	Y+4, r23	; 0x04
    1d58:	6b 83       	std	Y+3, r22	; 0x03
	/* Define Local Variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
    1d5a:	81 e0       	ldi	r24, 0x01	; 1
    1d5c:	89 83       	std	Y+1, r24	; 0x01
	
	/* Check 1: PortId is in the valid range, and Pointer is not equal to NULL */
	if( ( Cpy_u8PortId <= DIO_U8_PORTD ) && ( Cpy_pu8ReturnedPortValue != NULL ) )
    1d5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d60:	84 30       	cpi	r24, 0x04	; 4
    1d62:	08 f0       	brcs	.+2      	; 0x1d66 <DIO_u8GetPortValue+0x20>
    1d64:	3f c0       	rjmp	.+126    	; 0x1de4 <DIO_u8GetPortValue+0x9e>
    1d66:	8b 81       	ldd	r24, Y+3	; 0x03
    1d68:	9c 81       	ldd	r25, Y+4	; 0x04
    1d6a:	00 97       	sbiw	r24, 0x00	; 0
    1d6c:	d9 f1       	breq	.+118    	; 0x1de4 <DIO_u8GetPortValue+0x9e>
	{
		/* Check 1.1: Required PortId */
		switch( Cpy_u8PortId )
    1d6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d70:	28 2f       	mov	r18, r24
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	3e 83       	std	Y+6, r19	; 0x06
    1d76:	2d 83       	std	Y+5, r18	; 0x05
    1d78:	8d 81       	ldd	r24, Y+5	; 0x05
    1d7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d7c:	81 30       	cpi	r24, 0x01	; 1
    1d7e:	91 05       	cpc	r25, r1
    1d80:	e1 f0       	breq	.+56     	; 0x1dba <DIO_u8GetPortValue+0x74>
    1d82:	2d 81       	ldd	r18, Y+5	; 0x05
    1d84:	3e 81       	ldd	r19, Y+6	; 0x06
    1d86:	22 30       	cpi	r18, 0x02	; 2
    1d88:	31 05       	cpc	r19, r1
    1d8a:	2c f4       	brge	.+10     	; 0x1d96 <DIO_u8GetPortValue+0x50>
    1d8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d90:	00 97       	sbiw	r24, 0x00	; 0
    1d92:	61 f0       	breq	.+24     	; 0x1dac <DIO_u8GetPortValue+0x66>
    1d94:	28 c0       	rjmp	.+80     	; 0x1de6 <DIO_u8GetPortValue+0xa0>
    1d96:	2d 81       	ldd	r18, Y+5	; 0x05
    1d98:	3e 81       	ldd	r19, Y+6	; 0x06
    1d9a:	22 30       	cpi	r18, 0x02	; 2
    1d9c:	31 05       	cpc	r19, r1
    1d9e:	a1 f0       	breq	.+40     	; 0x1dc8 <DIO_u8GetPortValue+0x82>
    1da0:	8d 81       	ldd	r24, Y+5	; 0x05
    1da2:	9e 81       	ldd	r25, Y+6	; 0x06
    1da4:	83 30       	cpi	r24, 0x03	; 3
    1da6:	91 05       	cpc	r25, r1
    1da8:	b1 f0       	breq	.+44     	; 0x1dd6 <DIO_u8GetPortValue+0x90>
    1daa:	1d c0       	rjmp	.+58     	; 0x1de6 <DIO_u8GetPortValue+0xa0>
		{
			case DIO_U8_PORTA: *Cpy_pu8ReturnedPortValue = DIO_U8_PINA_REG; break;
    1dac:	e9 e3       	ldi	r30, 0x39	; 57
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	80 81       	ld	r24, Z
    1db2:	eb 81       	ldd	r30, Y+3	; 0x03
    1db4:	fc 81       	ldd	r31, Y+4	; 0x04
    1db6:	80 83       	st	Z, r24
    1db8:	16 c0       	rjmp	.+44     	; 0x1de6 <DIO_u8GetPortValue+0xa0>
			case DIO_U8_PORTB: *Cpy_pu8ReturnedPortValue = DIO_U8_PINB_REG; break;
    1dba:	e6 e3       	ldi	r30, 0x36	; 54
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	80 81       	ld	r24, Z
    1dc0:	eb 81       	ldd	r30, Y+3	; 0x03
    1dc2:	fc 81       	ldd	r31, Y+4	; 0x04
    1dc4:	80 83       	st	Z, r24
    1dc6:	0f c0       	rjmp	.+30     	; 0x1de6 <DIO_u8GetPortValue+0xa0>
			case DIO_U8_PORTC: *Cpy_pu8ReturnedPortValue = DIO_U8_PINC_REG; break;
    1dc8:	e3 e3       	ldi	r30, 0x33	; 51
    1dca:	f0 e0       	ldi	r31, 0x00	; 0
    1dcc:	80 81       	ld	r24, Z
    1dce:	eb 81       	ldd	r30, Y+3	; 0x03
    1dd0:	fc 81       	ldd	r31, Y+4	; 0x04
    1dd2:	80 83       	st	Z, r24
    1dd4:	08 c0       	rjmp	.+16     	; 0x1de6 <DIO_u8GetPortValue+0xa0>
			case DIO_U8_PORTD: *Cpy_pu8ReturnedPortValue = DIO_U8_PIND_REG; break;
    1dd6:	e0 e3       	ldi	r30, 0x30	; 48
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	80 81       	ld	r24, Z
    1ddc:	eb 81       	ldd	r30, Y+3	; 0x03
    1dde:	fc 81       	ldd	r31, Y+4	; 0x04
    1de0:	80 83       	st	Z, r24
    1de2:	01 c0       	rjmp	.+2      	; 0x1de6 <DIO_u8GetPortValue+0xa0>
	}
	/* Check 2: PortId is not in the valid range, or Pointer is equal to NULL */
	else
	{
		/* Update error state = NOK, wrong PortId, or Pointer is NULL! */
		Loc_u8ErrorState = STD_TYPES_NOK;
    1de4:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return Loc_u8ErrorState;
    1de6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1de8:	26 96       	adiw	r28, 0x06	; 6
    1dea:	0f b6       	in	r0, 0x3f	; 63
    1dec:	f8 94       	cli
    1dee:	de bf       	out	0x3e, r29	; 62
    1df0:	0f be       	out	0x3f, r0	; 63
    1df2:	cd bf       	out	0x3d, r28	; 61
    1df4:	cf 91       	pop	r28
    1df6:	df 91       	pop	r29
    1df8:	08 95       	ret

00001dfa <APP_vdStartProgram>:
 Input: void
 Output: void
 Description: Function to start program by calling all layers needed.
*/
vd APP_vdStartProgram      ( void )
{
    1dfa:	df 93       	push	r29
    1dfc:	cf 93       	push	r28
    1dfe:	00 d0       	rcall	.+0      	; 0x1e00 <APP_vdStartProgram+0x6>
    1e00:	cd b7       	in	r28, 0x3d	; 61
    1e02:	de b7       	in	r29, 0x3e	; 62
	/* Configure SetCallBack Functions */
	/* External Interrupt 0 */
	EXI_u8SetCallBack( EXI_U8_INT0, &APP_vdSwitchMode );
    1e04:	2f e3       	ldi	r18, 0x3F	; 63
    1e06:	3f e0       	ldi	r19, 0x0F	; 15
    1e08:	80 e0       	ldi	r24, 0x00	; 0
    1e0a:	b9 01       	movw	r22, r18
    1e0c:	0e 94 8f 09 	call	0x131e	; 0x131e <EXI_u8SetCallBack>
	/* Timer/Counter 0 */
	TMR_u8OVFSetCallBack( TMR_U8_TMR0, &APP_vdCarMode );
    1e10:	23 e5       	ldi	r18, 0x53	; 83
    1e12:	3f e0       	ldi	r19, 0x0F	; 15
    1e14:	80 e0       	ldi	r24, 0x00	; 0
    1e16:	b9 01       	movw	r22, r18
    1e18:	0e 94 c9 04 	call	0x992	; 0x992 <TMR_u8OVFSetCallBack>

	/* Initialize Peripherals: */
	/* Digital Input/Output */
	DIO_vdInitialization();
    1e1c:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <DIO_vdInitialization>
	/* Global Interrupt */
	GLI_vdEnableGIE();
    1e20:	0e 94 11 08 	call	0x1022	; 0x1022 <GLI_vdEnableGIE>
	/* External Interrupt 0 */
	EXI_u8EnablePIE( EXI_U8_INT0, EXI_U8_SENSE_RISING_EDGE );
    1e24:	80 e0       	ldi	r24, 0x00	; 0
    1e26:	63 e0       	ldi	r22, 0x03	; 3
    1e28:	0e 94 2d 08 	call	0x105a	; 0x105a <EXI_u8EnablePIE>
	/* Timer/Counter 0 */
	TMR_vdTMR0Initialization();
    1e2c:	0e 94 49 00 	call	0x92	; 0x92 <TMR_vdTMR0Initialization>

	/* Define local variable to get number of OVFs */
	u16 Loc_u16NumberOfOVF = 0;
    1e30:	1a 82       	std	Y+2, r1	; 0x02
    1e32:	19 82       	std	Y+1, r1	; 0x01

	/* Loop: Forever */
	while(1)
	{
		/* Check 1: ModeState is PED_MODE */
		if ( Glb_u8ModeState == APP_U8_PED_MODE )
    1e34:	80 91 85 00 	lds	r24, 0x0085
    1e38:	81 30       	cpi	r24, 0x01	; 1
    1e3a:	11 f4       	brne	.+4      	; 0x1e40 <APP_vdStartProgram+0x46>
		{
			APP_vdPedestrianMode();
    1e3c:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <APP_vdPedestrianMode>
		}

		/* Check 2: CurrTrafficState is Yellow */
		if ( Glb_u8CurTrafficState == APP_U8_TRAFFIC_LIGHT_YELLOW )
    1e40:	80 91 84 00 	lds	r24, 0x0084
    1e44:	81 30       	cpi	r24, 0x01	; 1
    1e46:	a9 f4       	brne	.+42     	; 0x1e72 <APP_vdStartProgram+0x78>
		{
			/* Start Blinking */
			/* Get number of OVFs */
			TMR_u8GetNumberOfOVF( TMR_U8_TMR0, &Loc_u16NumberOfOVF );
    1e48:	80 e0       	ldi	r24, 0x00	; 0
    1e4a:	9e 01       	movw	r18, r28
    1e4c:	2f 5f       	subi	r18, 0xFF	; 255
    1e4e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e50:	b9 01       	movw	r22, r18
    1e52:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <TMR_u8GetNumberOfOVF>

			/* Check 2.1: Number of OVFs is divisible by 500, i.e.: Toggle/Blink Yellow LED every 500 OVFs */
			if ( Loc_u16NumberOfOVF % 500 == 0 )
    1e56:	89 81       	ldd	r24, Y+1	; 0x01
    1e58:	9a 81       	ldd	r25, Y+2	; 0x02
    1e5a:	24 ef       	ldi	r18, 0xF4	; 244
    1e5c:	31 e0       	ldi	r19, 0x01	; 1
    1e5e:	b9 01       	movw	r22, r18
    1e60:	0e 94 50 11 	call	0x22a0	; 0x22a0 <__udivmodhi4>
    1e64:	00 97       	sbiw	r24, 0x00	; 0
    1e66:	31 f7       	brne	.-52     	; 0x1e34 <APP_vdStartProgram+0x3a>
			{
				DIO_u8TogglePinValue( APP_U8_CAR_LED_PORT, APP_U8_CAR_YELLOW_LED );
    1e68:	80 e0       	ldi	r24, 0x00	; 0
    1e6a:	61 e0       	ldi	r22, 0x01	; 1
    1e6c:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <DIO_u8TogglePinValue>
    1e70:	e1 cf       	rjmp	.-62     	; 0x1e34 <APP_vdStartProgram+0x3a>
			}
		}
		/* Check 3: CurrTrafficState is not Yellow */
		else
		{
			DIO_u8SetPinValue( APP_U8_CAR_LED_PORT, APP_U8_CAR_YELLOW_LED, DIO_U8_PIN_LOW );
    1e72:	80 e0       	ldi	r24, 0x00	; 0
    1e74:	61 e0       	ldi	r22, 0x01	; 1
    1e76:	40 e0       	ldi	r20, 0x00	; 0
    1e78:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_u8SetPinValue>
    1e7c:	db cf       	rjmp	.-74     	; 0x1e34 <APP_vdStartProgram+0x3a>

00001e7e <APP_vdSwitchMode>:
 Input: void
 Output: void
 Description: Function to switch from normal Car mode to Pedestrian mode, it will be called back when External Interrupt takes place.
*/
vd APP_vdSwitchMode		   ( void )
{
    1e7e:	df 93       	push	r29
    1e80:	cf 93       	push	r28
    1e82:	cd b7       	in	r28, 0x3d	; 61
    1e84:	de b7       	in	r29, 0x3e	; 62
	/* Update mode state = PED_MODE */
	Glb_u8ModeState = APP_U8_PED_MODE;
    1e86:	81 e0       	ldi	r24, 0x01	; 1
    1e88:	80 93 85 00 	sts	0x0085, r24
}
    1e8c:	cf 91       	pop	r28
    1e8e:	df 91       	pop	r29
    1e90:	08 95       	ret

00001e92 <APP_vdSetOVFFlag>:
 Input: void
 Output: void
 Description: Function to be called back when Timer Overflow Interrupt takes place, this function takes place in Pedestrian mode only.
*/
vd APP_vdSetOVFFlag	       ( void )
{
    1e92:	df 93       	push	r29
    1e94:	cf 93       	push	r28
    1e96:	cd b7       	in	r28, 0x3d	; 61
    1e98:	de b7       	in	r29, 0x3e	; 62
	/* Update OVF flag = UP */
	Glb_u8OVFFlag = APP_U8_FLAG_UP;
    1e9a:	81 e0       	ldi	r24, 0x01	; 1
    1e9c:	80 93 86 00 	sts	0x0086, r24
}
    1ea0:	cf 91       	pop	r28
    1ea2:	df 91       	pop	r29
    1ea4:	08 95       	ret

00001ea6 <APP_vdCarMode>:
 Input: void
 Output: void
 Description: Function to be called back when Timer Overflow Interrupt takes place.
*/
vd APP_vdCarMode	       ( void )
{
    1ea6:	df 93       	push	r29
    1ea8:	cf 93       	push	r28
    1eaa:	00 d0       	rcall	.+0      	; 0x1eac <APP_vdCarMode+0x6>
    1eac:	00 d0       	rcall	.+0      	; 0x1eae <APP_vdCarMode+0x8>
    1eae:	cd b7       	in	r28, 0x3d	; 61
    1eb0:	de b7       	in	r29, 0x3e	; 62
	/* Check 1: Required TrafficState */
    switch ( Glb_u8NxtTrafficState )
    1eb2:	80 91 60 00 	lds	r24, 0x0060
    1eb6:	28 2f       	mov	r18, r24
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	3c 83       	std	Y+4, r19	; 0x04
    1ebc:	2b 83       	std	Y+3, r18	; 0x03
    1ebe:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec2:	81 30       	cpi	r24, 0x01	; 1
    1ec4:	91 05       	cpc	r25, r1
    1ec6:	a9 f0       	breq	.+42     	; 0x1ef2 <APP_vdCarMode+0x4c>
    1ec8:	2b 81       	ldd	r18, Y+3	; 0x03
    1eca:	3c 81       	ldd	r19, Y+4	; 0x04
    1ecc:	22 30       	cpi	r18, 0x02	; 2
    1ece:	31 05       	cpc	r19, r1
    1ed0:	69 f1       	breq	.+90     	; 0x1f2c <APP_vdCarMode+0x86>
    1ed2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed6:	00 97       	sbiw	r24, 0x00	; 0
    1ed8:	a1 f5       	brne	.+104    	; 0x1f42 <APP_vdCarMode+0x9c>
    {
        case APP_U8_TRAFFIC_LIGHT_GREEN:

        	/* Update CurrTrafficState to Green and NxtTrafficState to Yellow */
        	Glb_u8CurTrafficState = APP_U8_TRAFFIC_LIGHT_GREEN;
    1eda:	10 92 84 00 	sts	0x0084, r1
        	Glb_u8NxtTrafficState = APP_U8_TRAFFIC_LIGHT_YELLOW;
    1ede:	81 e0       	ldi	r24, 0x01	; 1
    1ee0:	80 93 60 00 	sts	0x0060, r24

			/* Update flag state = UP */
        	Glb_u8DirectionFlag = APP_U8_FLAG_UP;
    1ee4:	81 e0       	ldi	r24, 0x01	; 1
    1ee6:	80 93 61 00 	sts	0x0061, r24

        	/* Turn on Green for Car */
        	APP_u8SetCARTrafficLight( APP_U8_TRAFFIC_LIGHT_GREEN );
    1eea:	80 e0       	ldi	r24, 0x00	; 0
    1eec:	0e 94 93 10 	call	0x2126	; 0x2126 <APP_u8SetCARTrafficLight>
    1ef0:	28 c0       	rjmp	.+80     	; 0x1f42 <APP_vdCarMode+0x9c>
            break;

        case APP_U8_TRAFFIC_LIGHT_YELLOW:

        	/* Update CurrTrafficState to Yellow */
        	Glb_u8CurTrafficState = APP_U8_TRAFFIC_LIGHT_YELLOW;
    1ef2:	81 e0       	ldi	r24, 0x01	; 1
    1ef4:	80 93 84 00 	sts	0x0084, r24

        	/* Update NxtTrafficState to Green if Flag state is DOWN, or Red if Flag state is UP */
        	/* Check 1.1: Required FlagState */
            switch ( Glb_u8DirectionFlag )
    1ef8:	80 91 61 00 	lds	r24, 0x0061
    1efc:	28 2f       	mov	r18, r24
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	3a 83       	std	Y+2, r19	; 0x02
    1f02:	29 83       	std	Y+1, r18	; 0x01
    1f04:	89 81       	ldd	r24, Y+1	; 0x01
    1f06:	9a 81       	ldd	r25, Y+2	; 0x02
    1f08:	00 97       	sbiw	r24, 0x00	; 0
    1f0a:	31 f0       	breq	.+12     	; 0x1f18 <APP_vdCarMode+0x72>
    1f0c:	29 81       	ldd	r18, Y+1	; 0x01
    1f0e:	3a 81       	ldd	r19, Y+2	; 0x02
    1f10:	21 30       	cpi	r18, 0x01	; 1
    1f12:	31 05       	cpc	r19, r1
    1f14:	21 f0       	breq	.+8      	; 0x1f1e <APP_vdCarMode+0x78>
    1f16:	06 c0       	rjmp	.+12     	; 0x1f24 <APP_vdCarMode+0x7e>
            {
            	case APP_U8_FLAG_DOWN: Glb_u8NxtTrafficState = APP_U8_TRAFFIC_LIGHT_GREEN; break;
    1f18:	10 92 60 00 	sts	0x0060, r1
    1f1c:	03 c0       	rjmp	.+6      	; 0x1f24 <APP_vdCarMode+0x7e>
            	case APP_U8_FLAG_UP  : Glb_u8NxtTrafficState = APP_U8_TRAFFIC_LIGHT_RED;   break;
    1f1e:	82 e0       	ldi	r24, 0x02	; 2
    1f20:	80 93 60 00 	sts	0x0060, r24
            }

            /* Turn on Yellow for Car */
            APP_u8SetCARTrafficLight( APP_U8_TRAFFIC_LIGHT_YELLOW );
    1f24:	81 e0       	ldi	r24, 0x01	; 1
    1f26:	0e 94 93 10 	call	0x2126	; 0x2126 <APP_u8SetCARTrafficLight>
    1f2a:	0b c0       	rjmp	.+22     	; 0x1f42 <APP_vdCarMode+0x9c>
            break;

        case APP_U8_TRAFFIC_LIGHT_RED:

        	/* Update CrrentTrafficState to Red and NxtTrafficState to Yellow */
        	Glb_u8CurTrafficState = APP_U8_TRAFFIC_LIGHT_RED;
    1f2c:	82 e0       	ldi	r24, 0x02	; 2
    1f2e:	80 93 84 00 	sts	0x0084, r24
        	Glb_u8NxtTrafficState    = APP_U8_TRAFFIC_LIGHT_YELLOW;
    1f32:	81 e0       	ldi	r24, 0x01	; 1
    1f34:	80 93 60 00 	sts	0x0060, r24

            /* Update flag state = DOWN */
        	Glb_u8DirectionFlag = APP_U8_FLAG_DOWN;
    1f38:	10 92 61 00 	sts	0x0061, r1

        	/* Turn on Red for Car */
        	APP_u8SetCARTrafficLight( APP_U8_TRAFFIC_LIGHT_RED );
    1f3c:	82 e0       	ldi	r24, 0x02	; 2
    1f3e:	0e 94 93 10 	call	0x2126	; 0x2126 <APP_u8SetCARTrafficLight>
            break;
    }
}
    1f42:	0f 90       	pop	r0
    1f44:	0f 90       	pop	r0
    1f46:	0f 90       	pop	r0
    1f48:	0f 90       	pop	r0
    1f4a:	cf 91       	pop	r28
    1f4c:	df 91       	pop	r29
    1f4e:	08 95       	ret

00001f50 <APP_vdPedestrianMode>:
 Input: void
 Output: void
 Description: Function to to be called if External Interrupt takes place.
*/
vd APP_vdPedestrianMode    ( void )
{
    1f50:	df 93       	push	r29
    1f52:	cf 93       	push	r28
    1f54:	00 d0       	rcall	.+0      	; 0x1f56 <APP_vdPedestrianMode+0x6>
    1f56:	00 d0       	rcall	.+0      	; 0x1f58 <APP_vdPedestrianMode+0x8>
    1f58:	cd b7       	in	r28, 0x3d	; 61
    1f5a:	de b7       	in	r29, 0x3e	; 62
	/* Step 1: Reset Timer */
	/* Disable Timer/Counter0 Counting */
	TMR_u8DisableTMR( TMR_U8_TMR0 );
    1f5c:	80 e0       	ldi	r24, 0x00	; 0
    1f5e:	0e 94 b9 01 	call	0x372	; 0x372 <TMR_u8DisableTMR>
	/* Change OVF Callback function to APP_vdSetOVFFlag() */
	TMR_u8OVFSetCallBack( TMR_U8_TMR0, &APP_vdSetOVFFlag );
    1f62:	29 e4       	ldi	r18, 0x49	; 73
    1f64:	3f e0       	ldi	r19, 0x0F	; 15
    1f66:	80 e0       	ldi	r24, 0x00	; 0
    1f68:	b9 01       	movw	r22, r18
    1f6a:	0e 94 c9 04 	call	0x992	; 0x992 <TMR_u8OVFSetCallBack>
	/* Enable Timer/Counter0 Counting */
	TMR_u8EnableTMR ( TMR_U8_TMR0 );
    1f6e:	80 e0       	ldi	r24, 0x00	; 0
    1f70:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <TMR_u8EnableTMR>

	/* Define local variable to get number of OVFs */
	u16 Loc_u16NumberOfOVF = 0;
    1f74:	1a 82       	std	Y+2, r1	; 0x02
    1f76:	19 82       	std	Y+1, r1	; 0x01

	/* Step 2: Run the traffic light sequence according to the CurrTrafficState */
	/* Check 1: Required CurrTrafficState */
	switch ( Glb_u8CurTrafficState )
    1f78:	80 91 84 00 	lds	r24, 0x0084
    1f7c:	28 2f       	mov	r18, r24
    1f7e:	30 e0       	ldi	r19, 0x00	; 0
    1f80:	3c 83       	std	Y+4, r19	; 0x04
    1f82:	2b 83       	std	Y+3, r18	; 0x03
    1f84:	8b 81       	ldd	r24, Y+3	; 0x03
    1f86:	9c 81       	ldd	r25, Y+4	; 0x04
    1f88:	99 23       	and	r25, r25
    1f8a:	0c f4       	brge	.+2      	; 0x1f8e <APP_vdPedestrianMode+0x3e>
    1f8c:	af c0       	rjmp	.+350    	; 0x20ec <APP_vdPedestrianMode+0x19c>
    1f8e:	2b 81       	ldd	r18, Y+3	; 0x03
    1f90:	3c 81       	ldd	r19, Y+4	; 0x04
    1f92:	22 30       	cpi	r18, 0x02	; 2
    1f94:	31 05       	cpc	r19, r1
    1f96:	3c f0       	brlt	.+14     	; 0x1fa6 <APP_vdPedestrianMode+0x56>
    1f98:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f9c:	82 30       	cpi	r24, 0x02	; 2
    1f9e:	91 05       	cpc	r25, r1
    1fa0:	09 f4       	brne	.+2      	; 0x1fa4 <APP_vdPedestrianMode+0x54>
    1fa2:	68 c0       	rjmp	.+208    	; 0x2074 <APP_vdPedestrianMode+0x124>
    1fa4:	a3 c0       	rjmp	.+326    	; 0x20ec <APP_vdPedestrianMode+0x19c>
	{
		case APP_U8_TRAFFIC_LIGHT_GREEN :
		case APP_U8_TRAFFIC_LIGHT_YELLOW:

			/* Step A: Turn on Yellow for Car and Pedestrian */
			APP_u8SetCARTrafficLight( APP_U8_TRAFFIC_LIGHT_YELLOW );
    1fa6:	81 e0       	ldi	r24, 0x01	; 1
    1fa8:	0e 94 93 10 	call	0x2126	; 0x2126 <APP_u8SetCARTrafficLight>
			APP_u8SetPEDTrafficLight( APP_U8_TRAFFIC_LIGHT_YELLOW );
    1fac:	81 e0       	ldi	r24, 0x01	; 1
    1fae:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <APP_u8SetPEDTrafficLight>
    1fb2:	1d c0       	rjmp	.+58     	; 0x1fee <APP_vdPedestrianMode+0x9e>
			/* Loop: Until OVFFlag is UP, i.e.: Poll for 5 sec. */
			while ( Glb_u8OVFFlag == APP_U8_FLAG_DOWN )
			{
				/* Start Blinking */
				/* Get number of OVFs */
				TMR_u8GetNumberOfOVF( TMR_U8_TMR0, &Loc_u16NumberOfOVF );
    1fb4:	80 e0       	ldi	r24, 0x00	; 0
    1fb6:	9e 01       	movw	r18, r28
    1fb8:	2f 5f       	subi	r18, 0xFF	; 255
    1fba:	3f 4f       	sbci	r19, 0xFF	; 255
    1fbc:	b9 01       	movw	r22, r18
    1fbe:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <TMR_u8GetNumberOfOVF>

				DIO_u8SetPinValue( APP_U8_CAR_LED_PORT, APP_U8_CAR_RED_LED, DIO_U8_PIN_LOW );
    1fc2:	80 e0       	ldi	r24, 0x00	; 0
    1fc4:	62 e0       	ldi	r22, 0x02	; 2
    1fc6:	40 e0       	ldi	r20, 0x00	; 0
    1fc8:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_u8SetPinValue>

				/* Check 1.1: Number of OVFs is divisible by 500, i.e.: Toggle/Blink Yellow LED every 500 OVFs */
				if ( Loc_u16NumberOfOVF % 500 == 0 )
    1fcc:	89 81       	ldd	r24, Y+1	; 0x01
    1fce:	9a 81       	ldd	r25, Y+2	; 0x02
    1fd0:	24 ef       	ldi	r18, 0xF4	; 244
    1fd2:	31 e0       	ldi	r19, 0x01	; 1
    1fd4:	b9 01       	movw	r22, r18
    1fd6:	0e 94 50 11 	call	0x22a0	; 0x22a0 <__udivmodhi4>
    1fda:	00 97       	sbiw	r24, 0x00	; 0
    1fdc:	41 f4       	brne	.+16     	; 0x1fee <APP_vdPedestrianMode+0x9e>
				{
					DIO_u8TogglePinValue( APP_U8_CAR_LED_PORT, APP_U8_CAR_YELLOW_LED );
    1fde:	80 e0       	ldi	r24, 0x00	; 0
    1fe0:	61 e0       	ldi	r22, 0x01	; 1
    1fe2:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <DIO_u8TogglePinValue>
					DIO_u8TogglePinValue( APP_U8_PED_LED_PORT, APP_U8_PED_YELLOW_LED );
    1fe6:	81 e0       	ldi	r24, 0x01	; 1
    1fe8:	61 e0       	ldi	r22, 0x01	; 1
    1fea:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <DIO_u8TogglePinValue>
			/* Step A: Turn on Yellow for Car and Pedestrian */
			APP_u8SetCARTrafficLight( APP_U8_TRAFFIC_LIGHT_YELLOW );
			APP_u8SetPEDTrafficLight( APP_U8_TRAFFIC_LIGHT_YELLOW );

			/* Loop: Until OVFFlag is UP, i.e.: Poll for 5 sec. */
			while ( Glb_u8OVFFlag == APP_U8_FLAG_DOWN )
    1fee:	80 91 86 00 	lds	r24, 0x0086
    1ff2:	88 23       	and	r24, r24
    1ff4:	f9 f2       	breq	.-66     	; 0x1fb4 <APP_vdPedestrianMode+0x64>
					DIO_u8TogglePinValue( APP_U8_PED_LED_PORT, APP_U8_PED_YELLOW_LED );
				}
			}

			/* Update OVF flag = DOWN */
			Glb_u8OVFFlag = APP_U8_FLAG_DOWN;
    1ff6:	10 92 86 00 	sts	0x0086, r1

			/* Step B: Turn on Red for Car, and Green for Pedestrian */
			APP_u8SetCARTrafficLight( APP_U8_TRAFFIC_LIGHT_RED );
    1ffa:	82 e0       	ldi	r24, 0x02	; 2
    1ffc:	0e 94 93 10 	call	0x2126	; 0x2126 <APP_u8SetCARTrafficLight>
			APP_u8SetPEDTrafficLight( APP_U8_TRAFFIC_LIGHT_GREEN );
    2000:	80 e0       	ldi	r24, 0x00	; 0
    2002:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <APP_u8SetPEDTrafficLight>

			/* Loop: Until OVFFlag is UP, i.e.: Poll for 5 sec. */
			while ( Glb_u8OVFFlag == APP_U8_FLAG_DOWN );
    2006:	80 91 86 00 	lds	r24, 0x0086
    200a:	88 23       	and	r24, r24
    200c:	e1 f3       	breq	.-8      	; 0x2006 <APP_vdPedestrianMode+0xb6>

			/* Update OVF flag = DOWN */
			Glb_u8OVFFlag = APP_U8_FLAG_DOWN;
    200e:	10 92 86 00 	sts	0x0086, r1

			/* Step C: Turn on Yellow for Car and Pedestrian */
			APP_u8SetCARTrafficLight( APP_U8_TRAFFIC_LIGHT_YELLOW );
    2012:	81 e0       	ldi	r24, 0x01	; 1
    2014:	0e 94 93 10 	call	0x2126	; 0x2126 <APP_u8SetCARTrafficLight>
			APP_u8SetPEDTrafficLight( APP_U8_TRAFFIC_LIGHT_YELLOW );
    2018:	81 e0       	ldi	r24, 0x01	; 1
    201a:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <APP_u8SetPEDTrafficLight>
    201e:	1d c0       	rjmp	.+58     	; 0x205a <APP_vdPedestrianMode+0x10a>
			/* Loop: Until OVFFlag is UP, i.e.: Poll for 5 sec. */
			while ( Glb_u8OVFFlag == APP_U8_FLAG_DOWN )
			{
				/* Start Blinking */
				/* Get number of OVFs */
				TMR_u8GetNumberOfOVF( TMR_U8_TMR0, &Loc_u16NumberOfOVF );
    2020:	80 e0       	ldi	r24, 0x00	; 0
    2022:	9e 01       	movw	r18, r28
    2024:	2f 5f       	subi	r18, 0xFF	; 255
    2026:	3f 4f       	sbci	r19, 0xFF	; 255
    2028:	b9 01       	movw	r22, r18
    202a:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <TMR_u8GetNumberOfOVF>

				DIO_u8SetPinValue( APP_U8_CAR_LED_PORT, APP_U8_CAR_RED_LED, DIO_U8_PIN_LOW );
    202e:	80 e0       	ldi	r24, 0x00	; 0
    2030:	62 e0       	ldi	r22, 0x02	; 2
    2032:	40 e0       	ldi	r20, 0x00	; 0
    2034:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_u8SetPinValue>

				/* Check 1.2: Number of OVFs is divisible by 500, i.e.: Toggle/Blink Yellow LED every 500 OVFs */
				if ( Loc_u16NumberOfOVF % 500 == 0 )
    2038:	89 81       	ldd	r24, Y+1	; 0x01
    203a:	9a 81       	ldd	r25, Y+2	; 0x02
    203c:	24 ef       	ldi	r18, 0xF4	; 244
    203e:	31 e0       	ldi	r19, 0x01	; 1
    2040:	b9 01       	movw	r22, r18
    2042:	0e 94 50 11 	call	0x22a0	; 0x22a0 <__udivmodhi4>
    2046:	00 97       	sbiw	r24, 0x00	; 0
    2048:	41 f4       	brne	.+16     	; 0x205a <APP_vdPedestrianMode+0x10a>
				{
					DIO_u8TogglePinValue( APP_U8_CAR_LED_PORT, APP_U8_CAR_YELLOW_LED );
    204a:	80 e0       	ldi	r24, 0x00	; 0
    204c:	61 e0       	ldi	r22, 0x01	; 1
    204e:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <DIO_u8TogglePinValue>
					DIO_u8TogglePinValue( APP_U8_PED_LED_PORT, APP_U8_PED_YELLOW_LED );
    2052:	81 e0       	ldi	r24, 0x01	; 1
    2054:	61 e0       	ldi	r22, 0x01	; 1
    2056:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <DIO_u8TogglePinValue>
			/* Step C: Turn on Yellow for Car and Pedestrian */
			APP_u8SetCARTrafficLight( APP_U8_TRAFFIC_LIGHT_YELLOW );
			APP_u8SetPEDTrafficLight( APP_U8_TRAFFIC_LIGHT_YELLOW );

			/* Loop: Until OVFFlag is UP, i.e.: Poll for 5 sec. */
			while ( Glb_u8OVFFlag == APP_U8_FLAG_DOWN )
    205a:	80 91 86 00 	lds	r24, 0x0086
    205e:	88 23       	and	r24, r24
    2060:	f9 f2       	breq	.-66     	; 0x2020 <APP_vdPedestrianMode+0xd0>
					DIO_u8TogglePinValue( APP_U8_PED_LED_PORT, APP_U8_PED_YELLOW_LED );
				}
			}

			/* Update OVF flag = DOWN */
			Glb_u8OVFFlag = APP_U8_FLAG_DOWN;
    2062:	10 92 86 00 	sts	0x0086, r1

			/* Step D: Turn on Green for Car, and Red Pedestrian */
			APP_u8SetCARTrafficLight( APP_U8_TRAFFIC_LIGHT_GREEN );
    2066:	80 e0       	ldi	r24, 0x00	; 0
    2068:	0e 94 93 10 	call	0x2126	; 0x2126 <APP_u8SetCARTrafficLight>
			APP_u8SetPEDTrafficLight( APP_U8_TRAFFIC_LIGHT_RED );
    206c:	82 e0       	ldi	r24, 0x02	; 2
    206e:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <APP_u8SetPEDTrafficLight>
    2072:	3c c0       	rjmp	.+120    	; 0x20ec <APP_vdPedestrianMode+0x19c>
			break;

		case APP_U8_TRAFFIC_LIGHT_RED   :

			/* Step A: Turn on Red for Car, and Green for Pedestrian */
			APP_u8SetCARTrafficLight( APP_U8_TRAFFIC_LIGHT_RED );
    2074:	82 e0       	ldi	r24, 0x02	; 2
    2076:	0e 94 93 10 	call	0x2126	; 0x2126 <APP_u8SetCARTrafficLight>
			APP_u8SetPEDTrafficLight( APP_U8_TRAFFIC_LIGHT_GREEN );
    207a:	80 e0       	ldi	r24, 0x00	; 0
    207c:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <APP_u8SetPEDTrafficLight>

			/* Loop: Until OVFFlag is UP, i.e.: Poll for 5 sec. */
			while ( Glb_u8OVFFlag == APP_U8_FLAG_DOWN );
    2080:	80 91 86 00 	lds	r24, 0x0086
    2084:	88 23       	and	r24, r24
    2086:	e1 f3       	breq	.-8      	; 0x2080 <APP_vdPedestrianMode+0x130>

			/* Update OVF flag = DOWN */
			Glb_u8OVFFlag = APP_U8_FLAG_DOWN;
    2088:	10 92 86 00 	sts	0x0086, r1

			/* Step B: Turn on Yellow for Car and Pedestrian */
			APP_u8SetCARTrafficLight( APP_U8_TRAFFIC_LIGHT_YELLOW );
    208c:	81 e0       	ldi	r24, 0x01	; 1
    208e:	0e 94 93 10 	call	0x2126	; 0x2126 <APP_u8SetCARTrafficLight>
			APP_u8SetPEDTrafficLight( APP_U8_TRAFFIC_LIGHT_YELLOW );
    2092:	81 e0       	ldi	r24, 0x01	; 1
    2094:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <APP_u8SetPEDTrafficLight>
    2098:	1d c0       	rjmp	.+58     	; 0x20d4 <APP_vdPedestrianMode+0x184>
			/* Loop: Until OVFFlag is UP, i.e.: Poll for 5 sec. */
			while ( Glb_u8OVFFlag == APP_U8_FLAG_DOWN )
			{
				/* Start Blinking */
				/* Get number of OVFs */
				TMR_u8GetNumberOfOVF( TMR_U8_TMR0, &Loc_u16NumberOfOVF );
    209a:	80 e0       	ldi	r24, 0x00	; 0
    209c:	9e 01       	movw	r18, r28
    209e:	2f 5f       	subi	r18, 0xFF	; 255
    20a0:	3f 4f       	sbci	r19, 0xFF	; 255
    20a2:	b9 01       	movw	r22, r18
    20a4:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <TMR_u8GetNumberOfOVF>

				DIO_u8SetPinValue( APP_U8_CAR_LED_PORT, APP_U8_CAR_RED_LED, DIO_U8_PIN_LOW );
    20a8:	80 e0       	ldi	r24, 0x00	; 0
    20aa:	62 e0       	ldi	r22, 0x02	; 2
    20ac:	40 e0       	ldi	r20, 0x00	; 0
    20ae:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_u8SetPinValue>

				/* Check 1.3: Number of OVFs is divisible by 500, i.e.: Toggle/Blink Yellow LED every 500 OVFs */
				if ( Loc_u16NumberOfOVF % 500 == 0 )
    20b2:	89 81       	ldd	r24, Y+1	; 0x01
    20b4:	9a 81       	ldd	r25, Y+2	; 0x02
    20b6:	24 ef       	ldi	r18, 0xF4	; 244
    20b8:	31 e0       	ldi	r19, 0x01	; 1
    20ba:	b9 01       	movw	r22, r18
    20bc:	0e 94 50 11 	call	0x22a0	; 0x22a0 <__udivmodhi4>
    20c0:	00 97       	sbiw	r24, 0x00	; 0
    20c2:	41 f4       	brne	.+16     	; 0x20d4 <APP_vdPedestrianMode+0x184>
				{
					DIO_u8TogglePinValue( APP_U8_CAR_LED_PORT, APP_U8_CAR_YELLOW_LED );
    20c4:	80 e0       	ldi	r24, 0x00	; 0
    20c6:	61 e0       	ldi	r22, 0x01	; 1
    20c8:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <DIO_u8TogglePinValue>
					DIO_u8TogglePinValue( APP_U8_PED_LED_PORT, APP_U8_PED_YELLOW_LED );
    20cc:	81 e0       	ldi	r24, 0x01	; 1
    20ce:	61 e0       	ldi	r22, 0x01	; 1
    20d0:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <DIO_u8TogglePinValue>
			/* Step B: Turn on Yellow for Car and Pedestrian */
			APP_u8SetCARTrafficLight( APP_U8_TRAFFIC_LIGHT_YELLOW );
			APP_u8SetPEDTrafficLight( APP_U8_TRAFFIC_LIGHT_YELLOW );

			/* Loop: Until OVFFlag is UP, i.e.: Poll for 5 sec. */
			while ( Glb_u8OVFFlag == APP_U8_FLAG_DOWN )
    20d4:	80 91 86 00 	lds	r24, 0x0086
    20d8:	88 23       	and	r24, r24
    20da:	f9 f2       	breq	.-66     	; 0x209a <APP_vdPedestrianMode+0x14a>
					DIO_u8TogglePinValue( APP_U8_PED_LED_PORT, APP_U8_PED_YELLOW_LED );
				}
			}

			/* Update OVF flag = DOWN */
			Glb_u8OVFFlag = APP_U8_FLAG_DOWN;
    20dc:	10 92 86 00 	sts	0x0086, r1

			/* Step C: Turn on Green for Car, and Red for Pedestrian */
			APP_u8SetCARTrafficLight( APP_U8_TRAFFIC_LIGHT_GREEN );
    20e0:	80 e0       	ldi	r24, 0x00	; 0
    20e2:	0e 94 93 10 	call	0x2126	; 0x2126 <APP_u8SetCARTrafficLight>
			APP_u8SetPEDTrafficLight( APP_U8_TRAFFIC_LIGHT_RED );
    20e6:	82 e0       	ldi	r24, 0x02	; 2
    20e8:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <APP_u8SetPEDTrafficLight>
			break;
	}

	/* Step 3: Switch to Car Mode */
	/* Update mode state = CAR_MODE */
	Glb_u8ModeState = APP_U8_CAR_MODE;
    20ec:	10 92 85 00 	sts	0x0085, r1
	/* Update current traffic state = GREEN, and next traffic state = YELLOW */
	Glb_u8CurTrafficState = APP_U8_TRAFFIC_LIGHT_GREEN;
    20f0:	10 92 84 00 	sts	0x0084, r1
	Glb_u8NxtTrafficState = APP_U8_TRAFFIC_LIGHT_YELLOW;
    20f4:	81 e0       	ldi	r24, 0x01	; 1
    20f6:	80 93 60 00 	sts	0x0060, r24
	/* Update direction flag = UP */
	Glb_u8DirectionFlag = APP_U8_FLAG_UP;
    20fa:	81 e0       	ldi	r24, 0x01	; 1
    20fc:	80 93 61 00 	sts	0x0061, r24

	/* Step 4: Reset Timer */
	/* Disable Timer/Counter0 Counting */
	TMR_u8DisableTMR( TMR_U8_TMR0 );
    2100:	80 e0       	ldi	r24, 0x00	; 0
    2102:	0e 94 b9 01 	call	0x372	; 0x372 <TMR_u8DisableTMR>
	/* Change OVF Callback function to APP_vdCarMode() */
	TMR_u8OVFSetCallBack( TMR_U8_TMR0, &APP_vdCarMode );
    2106:	23 e5       	ldi	r18, 0x53	; 83
    2108:	3f e0       	ldi	r19, 0x0F	; 15
    210a:	80 e0       	ldi	r24, 0x00	; 0
    210c:	b9 01       	movw	r22, r18
    210e:	0e 94 c9 04 	call	0x992	; 0x992 <TMR_u8OVFSetCallBack>
	/* Enable Timer/Counter0 Counting */
	TMR_u8EnableTMR ( TMR_U8_TMR0 );
    2112:	80 e0       	ldi	r24, 0x00	; 0
    2114:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <TMR_u8EnableTMR>
}
    2118:	0f 90       	pop	r0
    211a:	0f 90       	pop	r0
    211c:	0f 90       	pop	r0
    211e:	0f 90       	pop	r0
    2120:	cf 91       	pop	r28
    2122:	df 91       	pop	r29
    2124:	08 95       	ret

00002126 <APP_u8SetCARTrafficLight>:
 Input: u8 TrafficLight
 Output: u8 Error or No Error
 Description: Function to set traffic light to Cars.
*/
u8 APP_u8SetCARTrafficLight( u8 Cpy_u8TrafficLight )
{
    2126:	df 93       	push	r29
    2128:	cf 93       	push	r28
    212a:	00 d0       	rcall	.+0      	; 0x212c <APP_u8SetCARTrafficLight+0x6>
    212c:	00 d0       	rcall	.+0      	; 0x212e <APP_u8SetCARTrafficLight+0x8>
    212e:	cd b7       	in	r28, 0x3d	; 61
    2130:	de b7       	in	r29, 0x3e	; 62
    2132:	8a 83       	std	Y+2, r24	; 0x02
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
    2134:	81 e0       	ldi	r24, 0x01	; 1
    2136:	89 83       	std	Y+1, r24	; 0x01

	/* Check 1: TrafficLight is in the valid range */
	if ( Cpy_u8TrafficLight <= APP_U8_TRAFFIC_LIGHT_RED )
    2138:	8a 81       	ldd	r24, Y+2	; 0x02
    213a:	83 30       	cpi	r24, 0x03	; 3
    213c:	08 f0       	brcs	.+2      	; 0x2140 <APP_u8SetCARTrafficLight+0x1a>
    213e:	43 c0       	rjmp	.+134    	; 0x21c6 <APP_u8SetCARTrafficLight+0xa0>
	{
		/* Check 1.1: Required TrafficLight */
			switch ( Cpy_u8TrafficLight )
    2140:	8a 81       	ldd	r24, Y+2	; 0x02
    2142:	28 2f       	mov	r18, r24
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	3c 83       	std	Y+4, r19	; 0x04
    2148:	2b 83       	std	Y+3, r18	; 0x03
    214a:	8b 81       	ldd	r24, Y+3	; 0x03
    214c:	9c 81       	ldd	r25, Y+4	; 0x04
    214e:	81 30       	cpi	r24, 0x01	; 1
    2150:	91 05       	cpc	r25, r1
    2152:	c9 f0       	breq	.+50     	; 0x2186 <APP_u8SetCARTrafficLight+0x60>
    2154:	2b 81       	ldd	r18, Y+3	; 0x03
    2156:	3c 81       	ldd	r19, Y+4	; 0x04
    2158:	22 30       	cpi	r18, 0x02	; 2
    215a:	31 05       	cpc	r19, r1
    215c:	21 f1       	breq	.+72     	; 0x21a6 <APP_u8SetCARTrafficLight+0x80>
    215e:	8b 81       	ldd	r24, Y+3	; 0x03
    2160:	9c 81       	ldd	r25, Y+4	; 0x04
    2162:	00 97       	sbiw	r24, 0x00	; 0
    2164:	89 f5       	brne	.+98     	; 0x21c8 <APP_u8SetCARTrafficLight+0xa2>
			{
				case APP_U8_TRAFFIC_LIGHT_GREEN:
		            DIO_u8SetPinValue( APP_U8_CAR_LED_PORT, APP_U8_CAR_GREEN_LED, DIO_U8_PIN_HIGH );
    2166:	80 e0       	ldi	r24, 0x00	; 0
    2168:	60 e0       	ldi	r22, 0x00	; 0
    216a:	41 e0       	ldi	r20, 0x01	; 1
    216c:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_u8SetPinValue>
					DIO_u8SetPinValue( APP_U8_CAR_LED_PORT, APP_U8_CAR_YELLOW_LED, DIO_U8_PIN_LOW );
    2170:	80 e0       	ldi	r24, 0x00	; 0
    2172:	61 e0       	ldi	r22, 0x01	; 1
    2174:	40 e0       	ldi	r20, 0x00	; 0
    2176:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_u8SetPinValue>
					DIO_u8SetPinValue( APP_U8_CAR_LED_PORT, APP_U8_CAR_RED_LED, DIO_U8_PIN_LOW );
    217a:	80 e0       	ldi	r24, 0x00	; 0
    217c:	62 e0       	ldi	r22, 0x02	; 2
    217e:	40 e0       	ldi	r20, 0x00	; 0
    2180:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_u8SetPinValue>
    2184:	21 c0       	rjmp	.+66     	; 0x21c8 <APP_u8SetCARTrafficLight+0xa2>
					break;

				case APP_U8_TRAFFIC_LIGHT_YELLOW:
		            DIO_u8SetPinValue( APP_U8_CAR_LED_PORT, APP_U8_CAR_GREEN_LED, DIO_U8_PIN_LOW );
    2186:	80 e0       	ldi	r24, 0x00	; 0
    2188:	60 e0       	ldi	r22, 0x00	; 0
    218a:	40 e0       	ldi	r20, 0x00	; 0
    218c:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_u8SetPinValue>
		            DIO_u8SetPinValue( APP_U8_CAR_LED_PORT, APP_U8_CAR_YELLOW_LED, DIO_U8_PIN_HIGH );
    2190:	80 e0       	ldi	r24, 0x00	; 0
    2192:	61 e0       	ldi	r22, 0x01	; 1
    2194:	41 e0       	ldi	r20, 0x01	; 1
    2196:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_u8SetPinValue>
		            DIO_u8SetPinValue( APP_U8_CAR_LED_PORT, APP_U8_CAR_RED_LED, DIO_U8_PIN_LOW );
    219a:	80 e0       	ldi	r24, 0x00	; 0
    219c:	62 e0       	ldi	r22, 0x02	; 2
    219e:	40 e0       	ldi	r20, 0x00	; 0
    21a0:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_u8SetPinValue>
    21a4:	11 c0       	rjmp	.+34     	; 0x21c8 <APP_u8SetCARTrafficLight+0xa2>
		            break;

				case APP_U8_TRAFFIC_LIGHT_RED:
		            DIO_u8SetPinValue( APP_U8_CAR_LED_PORT, APP_U8_CAR_GREEN_LED, DIO_U8_PIN_LOW );
    21a6:	80 e0       	ldi	r24, 0x00	; 0
    21a8:	60 e0       	ldi	r22, 0x00	; 0
    21aa:	40 e0       	ldi	r20, 0x00	; 0
    21ac:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_u8SetPinValue>
		            DIO_u8SetPinValue( APP_U8_CAR_LED_PORT, APP_U8_CAR_YELLOW_LED, DIO_U8_PIN_LOW );
    21b0:	80 e0       	ldi	r24, 0x00	; 0
    21b2:	61 e0       	ldi	r22, 0x01	; 1
    21b4:	40 e0       	ldi	r20, 0x00	; 0
    21b6:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_u8SetPinValue>
		            DIO_u8SetPinValue( APP_U8_CAR_LED_PORT, APP_U8_CAR_RED_LED, DIO_U8_PIN_HIGH );
    21ba:	80 e0       	ldi	r24, 0x00	; 0
    21bc:	62 e0       	ldi	r22, 0x02	; 2
    21be:	41 e0       	ldi	r20, 0x01	; 1
    21c0:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_u8SetPinValue>
    21c4:	01 c0       	rjmp	.+2      	; 0x21c8 <APP_u8SetCARTrafficLight+0xa2>
	}
	/* Check 2: TrafficLight is not in the valid range */
	else
	{
		/* Update error state = NOK, wrong Traffic Light! */
		Loc_u8ErrorState = STD_TYPES_NOK;
    21c6:	19 82       	std	Y+1, r1	; 0x01
	}

	return Loc_u8ErrorState;
    21c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    21ca:	0f 90       	pop	r0
    21cc:	0f 90       	pop	r0
    21ce:	0f 90       	pop	r0
    21d0:	0f 90       	pop	r0
    21d2:	cf 91       	pop	r28
    21d4:	df 91       	pop	r29
    21d6:	08 95       	ret

000021d8 <APP_u8SetPEDTrafficLight>:
 Input: u8 TrafficLight
 Output: u8 Error or No Error
 Description: Function to set traffic light to Pedestrians.
*/
u8 APP_u8SetPEDTrafficLight( u8 Cpy_u8TrafficLight )
{
    21d8:	df 93       	push	r29
    21da:	cf 93       	push	r28
    21dc:	00 d0       	rcall	.+0      	; 0x21de <APP_u8SetPEDTrafficLight+0x6>
    21de:	00 d0       	rcall	.+0      	; 0x21e0 <APP_u8SetPEDTrafficLight+0x8>
    21e0:	cd b7       	in	r28, 0x3d	; 61
    21e2:	de b7       	in	r29, 0x3e	; 62
    21e4:	8a 83       	std	Y+2, r24	; 0x02
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	89 83       	std	Y+1, r24	; 0x01

	/* Check 1: TrafficLight is in the valid range */
	if ( Cpy_u8TrafficLight <= APP_U8_TRAFFIC_LIGHT_RED )
    21ea:	8a 81       	ldd	r24, Y+2	; 0x02
    21ec:	83 30       	cpi	r24, 0x03	; 3
    21ee:	08 f0       	brcs	.+2      	; 0x21f2 <APP_u8SetPEDTrafficLight+0x1a>
    21f0:	43 c0       	rjmp	.+134    	; 0x2278 <APP_u8SetPEDTrafficLight+0xa0>
	{
		/* Check 1.1: RequiredTraffic Light */
			switch ( Cpy_u8TrafficLight )
    21f2:	8a 81       	ldd	r24, Y+2	; 0x02
    21f4:	28 2f       	mov	r18, r24
    21f6:	30 e0       	ldi	r19, 0x00	; 0
    21f8:	3c 83       	std	Y+4, r19	; 0x04
    21fa:	2b 83       	std	Y+3, r18	; 0x03
    21fc:	8b 81       	ldd	r24, Y+3	; 0x03
    21fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2200:	81 30       	cpi	r24, 0x01	; 1
    2202:	91 05       	cpc	r25, r1
    2204:	c9 f0       	breq	.+50     	; 0x2238 <APP_u8SetPEDTrafficLight+0x60>
    2206:	2b 81       	ldd	r18, Y+3	; 0x03
    2208:	3c 81       	ldd	r19, Y+4	; 0x04
    220a:	22 30       	cpi	r18, 0x02	; 2
    220c:	31 05       	cpc	r19, r1
    220e:	21 f1       	breq	.+72     	; 0x2258 <APP_u8SetPEDTrafficLight+0x80>
    2210:	8b 81       	ldd	r24, Y+3	; 0x03
    2212:	9c 81       	ldd	r25, Y+4	; 0x04
    2214:	00 97       	sbiw	r24, 0x00	; 0
    2216:	89 f5       	brne	.+98     	; 0x227a <APP_u8SetPEDTrafficLight+0xa2>
			{
				case APP_U8_TRAFFIC_LIGHT_GREEN:
		            DIO_u8SetPinValue( APP_U8_PED_LED_PORT, APP_U8_PED_GREEN_LED, DIO_U8_PIN_HIGH );
    2218:	81 e0       	ldi	r24, 0x01	; 1
    221a:	60 e0       	ldi	r22, 0x00	; 0
    221c:	41 e0       	ldi	r20, 0x01	; 1
    221e:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_u8SetPinValue>
					DIO_u8SetPinValue( APP_U8_PED_LED_PORT, APP_U8_PED_YELLOW_LED, DIO_U8_PIN_LOW );
    2222:	81 e0       	ldi	r24, 0x01	; 1
    2224:	61 e0       	ldi	r22, 0x01	; 1
    2226:	40 e0       	ldi	r20, 0x00	; 0
    2228:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_u8SetPinValue>
					DIO_u8SetPinValue( APP_U8_PED_LED_PORT, APP_U8_PED_RED_LED, DIO_U8_PIN_LOW );
    222c:	81 e0       	ldi	r24, 0x01	; 1
    222e:	62 e0       	ldi	r22, 0x02	; 2
    2230:	40 e0       	ldi	r20, 0x00	; 0
    2232:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_u8SetPinValue>
    2236:	21 c0       	rjmp	.+66     	; 0x227a <APP_u8SetPEDTrafficLight+0xa2>
					break;

				case APP_U8_TRAFFIC_LIGHT_YELLOW:
		            DIO_u8SetPinValue( APP_U8_PED_LED_PORT, APP_U8_PED_GREEN_LED, DIO_U8_PIN_LOW );
    2238:	81 e0       	ldi	r24, 0x01	; 1
    223a:	60 e0       	ldi	r22, 0x00	; 0
    223c:	40 e0       	ldi	r20, 0x00	; 0
    223e:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_u8SetPinValue>
		            DIO_u8SetPinValue( APP_U8_PED_LED_PORT, APP_U8_PED_YELLOW_LED, DIO_U8_PIN_HIGH );
    2242:	81 e0       	ldi	r24, 0x01	; 1
    2244:	61 e0       	ldi	r22, 0x01	; 1
    2246:	41 e0       	ldi	r20, 0x01	; 1
    2248:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_u8SetPinValue>
		            DIO_u8SetPinValue( APP_U8_PED_LED_PORT, APP_U8_PED_RED_LED, DIO_U8_PIN_LOW );
    224c:	81 e0       	ldi	r24, 0x01	; 1
    224e:	62 e0       	ldi	r22, 0x02	; 2
    2250:	40 e0       	ldi	r20, 0x00	; 0
    2252:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_u8SetPinValue>
    2256:	11 c0       	rjmp	.+34     	; 0x227a <APP_u8SetPEDTrafficLight+0xa2>
		            break;

				case APP_U8_TRAFFIC_LIGHT_RED:
		            DIO_u8SetPinValue( APP_U8_PED_LED_PORT, APP_U8_PED_GREEN_LED, DIO_U8_PIN_LOW );
    2258:	81 e0       	ldi	r24, 0x01	; 1
    225a:	60 e0       	ldi	r22, 0x00	; 0
    225c:	40 e0       	ldi	r20, 0x00	; 0
    225e:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_u8SetPinValue>
		            DIO_u8SetPinValue( APP_U8_PED_LED_PORT, APP_U8_PED_YELLOW_LED, DIO_U8_PIN_LOW );
    2262:	81 e0       	ldi	r24, 0x01	; 1
    2264:	61 e0       	ldi	r22, 0x01	; 1
    2266:	40 e0       	ldi	r20, 0x00	; 0
    2268:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_u8SetPinValue>
		            DIO_u8SetPinValue( APP_U8_PED_LED_PORT, APP_U8_PED_RED_LED, DIO_U8_PIN_HIGH );
    226c:	81 e0       	ldi	r24, 0x01	; 1
    226e:	62 e0       	ldi	r22, 0x02	; 2
    2270:	41 e0       	ldi	r20, 0x01	; 1
    2272:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_u8SetPinValue>
    2276:	01 c0       	rjmp	.+2      	; 0x227a <APP_u8SetPEDTrafficLight+0xa2>
	}
	/* Check 2: TrafficLight is not in the valid range */
	else
	{
		/* Update error state = NOK, wrong Traffic Light! */
		Loc_u8ErrorState = STD_TYPES_NOK;
    2278:	19 82       	std	Y+1, r1	; 0x01
	}

	return Loc_u8ErrorState;
    227a:	89 81       	ldd	r24, Y+1	; 0x01
}
    227c:	0f 90       	pop	r0
    227e:	0f 90       	pop	r0
    2280:	0f 90       	pop	r0
    2282:	0f 90       	pop	r0
    2284:	cf 91       	pop	r28
    2286:	df 91       	pop	r29
    2288:	08 95       	ret

0000228a <main>:

/* APP */
#include "APP/APP_Interface.h"

int main( void )
{
    228a:	df 93       	push	r29
    228c:	cf 93       	push	r28
    228e:	cd b7       	in	r28, 0x3d	; 61
    2290:	de b7       	in	r29, 0x3e	; 62
	APP_vdStartProgram();
    2292:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <APP_vdStartProgram>

	return 0;
    2296:	80 e0       	ldi	r24, 0x00	; 0
    2298:	90 e0       	ldi	r25, 0x00	; 0
}
    229a:	cf 91       	pop	r28
    229c:	df 91       	pop	r29
    229e:	08 95       	ret

000022a0 <__udivmodhi4>:
    22a0:	aa 1b       	sub	r26, r26
    22a2:	bb 1b       	sub	r27, r27
    22a4:	51 e1       	ldi	r21, 0x11	; 17
    22a6:	07 c0       	rjmp	.+14     	; 0x22b6 <__udivmodhi4_ep>

000022a8 <__udivmodhi4_loop>:
    22a8:	aa 1f       	adc	r26, r26
    22aa:	bb 1f       	adc	r27, r27
    22ac:	a6 17       	cp	r26, r22
    22ae:	b7 07       	cpc	r27, r23
    22b0:	10 f0       	brcs	.+4      	; 0x22b6 <__udivmodhi4_ep>
    22b2:	a6 1b       	sub	r26, r22
    22b4:	b7 0b       	sbc	r27, r23

000022b6 <__udivmodhi4_ep>:
    22b6:	88 1f       	adc	r24, r24
    22b8:	99 1f       	adc	r25, r25
    22ba:	5a 95       	dec	r21
    22bc:	a9 f7       	brne	.-22     	; 0x22a8 <__udivmodhi4_loop>
    22be:	80 95       	com	r24
    22c0:	90 95       	com	r25
    22c2:	bc 01       	movw	r22, r24
    22c4:	cd 01       	movw	r24, r26
    22c6:	08 95       	ret

000022c8 <_exit>:
    22c8:	f8 94       	cli

000022ca <__stop_program>:
    22ca:	ff cf       	rjmp	.-2      	; 0x22ca <__stop_program>
